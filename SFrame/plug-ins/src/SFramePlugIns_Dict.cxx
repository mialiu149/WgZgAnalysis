//
// File generated by /cvmfs/atlas.cern.ch/repo/sw/software/x86_64-slc6-gcc47-opt/17.8.0/LCGCMT/LCGCMT_65/InstallArea/x86_64-slc6-gcc47-opt/bin/../../../../../sw/lcg/app/releases/ROOT/5.34.07a/x86_64-slc6-gcc47-opt/root/bin/rootcint at Thu Feb  5 07:44:33 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME srcdISFramePlugIns_Dict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "SFramePlugIns_Dict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SH1< float > SH1lEfloatgR;
      #else
      class SH1lEfloatgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~SH1lEfloatgR() throw() {};
          int m_arraySize; //
         float* m_content; //[m_arraySize]
         float* m_errors; //[m_arraySize]
         int m_entries; //
          int m_bins; //
          double m_low; //
          double m_high; //
          bool m_computeErrors; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SH1< double > SH1lEdoublegR;
      #else
      class SH1lEdoublegR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~SH1lEdoublegR() throw() {};
          int m_arraySize; //
         double* m_content; //[m_arraySize]
         double* m_errors; //[m_arraySize]
         int m_entries; //
          int m_bins; //
          double m_low; //
          double m_high; //
          bool m_computeErrors; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::SH1< int > SH1lEintgR;
      #else
      class SH1lEintgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~SH1lEintgR() throw() {};
          int m_arraySize; //
         int* m_content; //[m_arraySize]
         int* m_errors; //[m_arraySize]
         int m_entries; //
          int m_bins; //
          double m_low; //
          double m_high; //
          bool m_computeErrors; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ProofSummedVar< short > ProofSummedVarlEshortgR;
      #else
      class ProofSummedVarlEshortgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ProofSummedVarlEshortgR() throw() {};
         short m_member; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ProofSummedVar< unsigned short > ProofSummedVarlEunsignedsPshortgR;
      #else
      class ProofSummedVarlEunsignedsPshortgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ProofSummedVarlEunsignedsPshortgR() throw() {};
         unsigned short m_member; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ProofSummedVar< int > ProofSummedVarlEintgR;
      #else
      class ProofSummedVarlEintgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ProofSummedVarlEintgR() throw() {};
         int m_member; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ProofSummedVar< unsigned int > ProofSummedVarlEunsignedsPintgR;
      #else
      class ProofSummedVarlEunsignedsPintgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ProofSummedVarlEunsignedsPintgR() throw() {};
         unsigned int m_member; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ProofSummedVar< long > ProofSummedVarlElonggR;
      #else
      class ProofSummedVarlElonggR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ProofSummedVarlElonggR() throw() {};
         long m_member; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ProofSummedVar< unsigned long > ProofSummedVarlEunsignedsPlonggR;
      #else
      class ProofSummedVarlEunsignedsPlonggR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ProofSummedVarlEunsignedsPlonggR() throw() {};
         unsigned long m_member; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ProofSummedVar< long long > ProofSummedVarlElongsPlonggR;
      #else
      class ProofSummedVarlElongsPlonggR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ProofSummedVarlElongsPlonggR() throw() {};
         G__int64 m_member; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ProofSummedVar< unsigned long long > ProofSummedVarlEunsignedsPlongsPlonggR;
      #else
      class ProofSummedVarlEunsignedsPlongsPlonggR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ProofSummedVarlEunsignedsPlongsPlonggR() throw() {};
         G__uint64 m_member; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ProofSummedVar< float > ProofSummedVarlEfloatgR;
      #else
      class ProofSummedVarlEfloatgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ProofSummedVarlEfloatgR() throw() {};
         float m_member; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ProofSummedVar< double > ProofSummedVarlEdoublegR;
      #else
      class ProofSummedVarlEdoublegR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ProofSummedVarlEdoublegR() throw() {};
         double m_member; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ProofSummedVar< vector< short, allocator< short >  >  > ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR;
      #else
      class ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR() throw() {};
         vector< short, allocator< short >  > m_member; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ProofSummedVar< vector< unsigned short, allocator< unsigned short >  >  > ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR;
      #else
      class ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR() throw() {};
         vector< unsigned short, allocator< unsigned short >  > m_member; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ProofSummedVar< vector< int, allocator< int >  >  > ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR;
      #else
      class ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR() throw() {};
         vector< int, allocator< int >  > m_member; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ProofSummedVar< vector< unsigned int, allocator< unsigned int >  >  > ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR;
      #else
      class ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR() throw() {};
         vector< unsigned int, allocator< unsigned int >  > m_member; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ProofSummedVar< vector< long, allocator< long >  >  > ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR;
      #else
      class ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR() throw() {};
         vector< long, allocator< long >  > m_member; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ProofSummedVar< vector< unsigned long, allocator< unsigned long >  >  > ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR;
      #else
      class ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR() throw() {};
         vector< unsigned long, allocator< unsigned long >  > m_member; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ProofSummedVar< vector< long long, allocator< long long >  >  > ProofSummedVarlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgR;
      #else
      class ProofSummedVarlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ProofSummedVarlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgR() throw() {};
         vector< G__int64, allocator< G__int64 >  > m_member; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ProofSummedVar< vector< unsigned long long, allocator< unsigned long long >  >  > ProofSummedVarlEvectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgRsPgR;
      #else
      class ProofSummedVarlEvectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgRsPgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ProofSummedVarlEvectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgRsPgR() throw() {};
         vector< G__uint64, allocator< G__uint64 >  > m_member; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ProofSummedVar< vector< float, allocator< float >  >  > ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR;
      #else
      class ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR() throw() {};
         vector< float, allocator< float >  > m_member; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ProofSummedVar< vector< double, allocator< double >  >  > ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR;
      #else
      class ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR() throw() {};
         vector< double, allocator< double >  > m_member; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef pair< ::string, unsigned int > pairlEstringcOunsignedsPintgR;
      #else
      class pairlEstringcOunsignedsPintgR  {
         public:
         //friend XX;
         string first; //
         unsigned int second; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ProofSummedVar< map< ::string, int, ::less< ::string >, allocator< pair< const ::string, int >  >  >  > ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR;
      #else
      class ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR() throw() {};
         map< ::string, int, ::less< ::string >, allocator< pair< const ::string, int >  >  > m_member; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ProofSummedVar< map< ::string, unsigned int, ::less< ::string >, allocator< pair< const ::string, unsigned int >  >  >  > ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR;
      #else
      class ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR() throw() {};
         map< ::string, unsigned int, ::less< ::string >, allocator< pair< const ::string, unsigned int >  >  > m_member; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ProofSummedVar< map< ::string, float, ::less< ::string >, allocator< pair< const ::string, float >  >  >  > ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR;
      #else
      class ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR() throw() {};
         map< ::string, float, ::less< ::string >, allocator< pair< const ::string, float >  >  > m_member; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ProofSummedVar< map< ::string, double, ::less< ::string >, allocator< pair< const ::string, double >  >  >  > ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR;
      #else
      class ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR  :  public ::TNamed {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR() throw() {};
         map< ::string, double, ::less< ::string >, allocator< pair< const ::string, double >  >  > m_member; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void SH1lEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SH1lEfloatgR_Dictionary();
   static void *new_SH1lEfloatgR(void *p = 0);
   static void *newArray_SH1lEfloatgR(Long_t size, void *p);
   static void delete_SH1lEfloatgR(void *p);
   static void deleteArray_SH1lEfloatgR(void *p);
   static void destruct_SH1lEfloatgR(void *p);
   static Long64_t merge_SH1lEfloatgR(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SH1<float>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SH1<float>) == sizeof(::ROOT::Shadow::SH1lEfloatgR));
      ::SH1<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SH1<float> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SH1<float>", ::SH1<float>::Class_Version(), "./include/SH1.h", 52,
                  typeid(::SH1<float>), DefineBehavior(ptr, ptr),
                  &SH1lEfloatgR_Dictionary, isa_proxy, 4,
                  sizeof(::SH1<float>) );
      instance.SetNew(&new_SH1lEfloatgR);
      instance.SetNewArray(&newArray_SH1lEfloatgR);
      instance.SetDelete(&delete_SH1lEfloatgR);
      instance.SetDeleteArray(&deleteArray_SH1lEfloatgR);
      instance.SetDestructor(&destruct_SH1lEfloatgR);
      instance.SetMerge(&merge_SH1lEfloatgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SH1<float>*)
   {
      return GenerateInitInstanceLocal((::SH1<float>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SH1<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SH1lEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::SH1<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SH1lEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SH1lEdoublegR_Dictionary();
   static void *new_SH1lEdoublegR(void *p = 0);
   static void *newArray_SH1lEdoublegR(Long_t size, void *p);
   static void delete_SH1lEdoublegR(void *p);
   static void deleteArray_SH1lEdoublegR(void *p);
   static void destruct_SH1lEdoublegR(void *p);
   static Long64_t merge_SH1lEdoublegR(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SH1<double>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SH1<double>) == sizeof(::ROOT::Shadow::SH1lEdoublegR));
      ::SH1<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SH1<double> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SH1<double>", ::SH1<double>::Class_Version(), "./include/SH1.h", 52,
                  typeid(::SH1<double>), DefineBehavior(ptr, ptr),
                  &SH1lEdoublegR_Dictionary, isa_proxy, 4,
                  sizeof(::SH1<double>) );
      instance.SetNew(&new_SH1lEdoublegR);
      instance.SetNewArray(&newArray_SH1lEdoublegR);
      instance.SetDelete(&delete_SH1lEdoublegR);
      instance.SetDeleteArray(&deleteArray_SH1lEdoublegR);
      instance.SetDestructor(&destruct_SH1lEdoublegR);
      instance.SetMerge(&merge_SH1lEdoublegR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SH1<double>*)
   {
      return GenerateInitInstanceLocal((::SH1<double>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SH1<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SH1lEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::SH1<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SH1lEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void SH1lEintgR_Dictionary();
   static void *new_SH1lEintgR(void *p = 0);
   static void *newArray_SH1lEintgR(Long_t size, void *p);
   static void delete_SH1lEintgR(void *p);
   static void deleteArray_SH1lEintgR(void *p);
   static void destruct_SH1lEintgR(void *p);
   static Long64_t merge_SH1lEintgR(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SH1<int>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::SH1<int>) == sizeof(::ROOT::Shadow::SH1lEintgR));
      ::SH1<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SH1<int> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SH1<int>", ::SH1<int>::Class_Version(), "./include/SH1.h", 52,
                  typeid(::SH1<int>), DefineBehavior(ptr, ptr),
                  &SH1lEintgR_Dictionary, isa_proxy, 4,
                  sizeof(::SH1<int>) );
      instance.SetNew(&new_SH1lEintgR);
      instance.SetNewArray(&newArray_SH1lEintgR);
      instance.SetDelete(&delete_SH1lEintgR);
      instance.SetDeleteArray(&deleteArray_SH1lEintgR);
      instance.SetDestructor(&destruct_SH1lEintgR);
      instance.SetMerge(&merge_SH1lEintgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SH1<int>*)
   {
      return GenerateInitInstanceLocal((::SH1<int>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SH1<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void SH1lEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::SH1<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SParticle_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SParticle(void *p = 0);
   static void *newArray_SParticle(Long_t size, void *p);
   static void delete_SParticle(void *p);
   static void deleteArray_SParticle(void *p);
   static void destruct_SParticle(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SParticle*)
   {
      ::SParticle *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SParticle >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SParticle", ::SParticle::Class_Version(), "./include/SParticle.h", 54,
                  typeid(::SParticle), DefineBehavior(ptr, ptr),
                  &::SParticle::Dictionary, isa_proxy, 4,
                  sizeof(::SParticle) );
      instance.SetNew(&new_SParticle);
      instance.SetNewArray(&newArray_SParticle);
      instance.SetDelete(&delete_SParticle);
      instance.SetDeleteArray(&deleteArray_SParticle);
      instance.SetDestructor(&destruct_SParticle);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SParticle*)
   {
      return GenerateInitInstanceLocal((::SParticle*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SParticle*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void ProofSummedVarlEshortgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ProofSummedVarlEshortgR_Dictionary();
   static void *new_ProofSummedVarlEshortgR(void *p = 0);
   static void *newArray_ProofSummedVarlEshortgR(Long_t size, void *p);
   static void delete_ProofSummedVarlEshortgR(void *p);
   static void deleteArray_ProofSummedVarlEshortgR(void *p);
   static void destruct_ProofSummedVarlEshortgR(void *p);
   static Long64_t merge_ProofSummedVarlEshortgR(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ProofSummedVar<short>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ProofSummedVar<short>) == sizeof(::ROOT::Shadow::ProofSummedVarlEshortgR));
      ::ProofSummedVar<short> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ProofSummedVar<short> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ProofSummedVar<short>", ::ProofSummedVar<short>::Class_Version(), "./include/SSummedVar.h", 44,
                  typeid(::ProofSummedVar<short>), DefineBehavior(ptr, ptr),
                  &ProofSummedVarlEshortgR_Dictionary, isa_proxy, 4,
                  sizeof(::ProofSummedVar<short>) );
      instance.SetNew(&new_ProofSummedVarlEshortgR);
      instance.SetNewArray(&newArray_ProofSummedVarlEshortgR);
      instance.SetDelete(&delete_ProofSummedVarlEshortgR);
      instance.SetDeleteArray(&deleteArray_ProofSummedVarlEshortgR);
      instance.SetDestructor(&destruct_ProofSummedVarlEshortgR);
      instance.SetMerge(&merge_ProofSummedVarlEshortgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ProofSummedVar<short>*)
   {
      return GenerateInitInstanceLocal((::ProofSummedVar<short>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ProofSummedVar<short>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ProofSummedVarlEshortgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<short>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ProofSummedVarlEunsignedsPshortgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ProofSummedVarlEunsignedsPshortgR_Dictionary();
   static void *new_ProofSummedVarlEunsignedsPshortgR(void *p = 0);
   static void *newArray_ProofSummedVarlEunsignedsPshortgR(Long_t size, void *p);
   static void delete_ProofSummedVarlEunsignedsPshortgR(void *p);
   static void deleteArray_ProofSummedVarlEunsignedsPshortgR(void *p);
   static void destruct_ProofSummedVarlEunsignedsPshortgR(void *p);
   static Long64_t merge_ProofSummedVarlEunsignedsPshortgR(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ProofSummedVar<unsigned short>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ProofSummedVar<unsigned short>) == sizeof(::ROOT::Shadow::ProofSummedVarlEunsignedsPshortgR));
      ::ProofSummedVar<unsigned short> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ProofSummedVar<unsigned short> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ProofSummedVar<unsigned short>", ::ProofSummedVar<unsigned short>::Class_Version(), "./include/SSummedVar.h", 44,
                  typeid(::ProofSummedVar<unsigned short>), DefineBehavior(ptr, ptr),
                  &ProofSummedVarlEunsignedsPshortgR_Dictionary, isa_proxy, 4,
                  sizeof(::ProofSummedVar<unsigned short>) );
      instance.SetNew(&new_ProofSummedVarlEunsignedsPshortgR);
      instance.SetNewArray(&newArray_ProofSummedVarlEunsignedsPshortgR);
      instance.SetDelete(&delete_ProofSummedVarlEunsignedsPshortgR);
      instance.SetDeleteArray(&deleteArray_ProofSummedVarlEunsignedsPshortgR);
      instance.SetDestructor(&destruct_ProofSummedVarlEunsignedsPshortgR);
      instance.SetMerge(&merge_ProofSummedVarlEunsignedsPshortgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ProofSummedVar<unsigned short>*)
   {
      return GenerateInitInstanceLocal((::ProofSummedVar<unsigned short>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ProofSummedVar<unsigned short>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ProofSummedVarlEunsignedsPshortgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<unsigned short>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ProofSummedVarlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ProofSummedVarlEintgR_Dictionary();
   static void *new_ProofSummedVarlEintgR(void *p = 0);
   static void *newArray_ProofSummedVarlEintgR(Long_t size, void *p);
   static void delete_ProofSummedVarlEintgR(void *p);
   static void deleteArray_ProofSummedVarlEintgR(void *p);
   static void destruct_ProofSummedVarlEintgR(void *p);
   static Long64_t merge_ProofSummedVarlEintgR(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ProofSummedVar<int>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ProofSummedVar<int>) == sizeof(::ROOT::Shadow::ProofSummedVarlEintgR));
      ::ProofSummedVar<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ProofSummedVar<int> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ProofSummedVar<int>", ::ProofSummedVar<int>::Class_Version(), "./include/SSummedVar.h", 44,
                  typeid(::ProofSummedVar<int>), DefineBehavior(ptr, ptr),
                  &ProofSummedVarlEintgR_Dictionary, isa_proxy, 4,
                  sizeof(::ProofSummedVar<int>) );
      instance.SetNew(&new_ProofSummedVarlEintgR);
      instance.SetNewArray(&newArray_ProofSummedVarlEintgR);
      instance.SetDelete(&delete_ProofSummedVarlEintgR);
      instance.SetDeleteArray(&deleteArray_ProofSummedVarlEintgR);
      instance.SetDestructor(&destruct_ProofSummedVarlEintgR);
      instance.SetMerge(&merge_ProofSummedVarlEintgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ProofSummedVar<int>*)
   {
      return GenerateInitInstanceLocal((::ProofSummedVar<int>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ProofSummedVar<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ProofSummedVarlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ProofSummedVarlEunsignedsPintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ProofSummedVarlEunsignedsPintgR_Dictionary();
   static void *new_ProofSummedVarlEunsignedsPintgR(void *p = 0);
   static void *newArray_ProofSummedVarlEunsignedsPintgR(Long_t size, void *p);
   static void delete_ProofSummedVarlEunsignedsPintgR(void *p);
   static void deleteArray_ProofSummedVarlEunsignedsPintgR(void *p);
   static void destruct_ProofSummedVarlEunsignedsPintgR(void *p);
   static Long64_t merge_ProofSummedVarlEunsignedsPintgR(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ProofSummedVar<unsigned int>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ProofSummedVar<unsigned int>) == sizeof(::ROOT::Shadow::ProofSummedVarlEunsignedsPintgR));
      ::ProofSummedVar<unsigned int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ProofSummedVar<unsigned int> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ProofSummedVar<unsigned int>", ::ProofSummedVar<unsigned int>::Class_Version(), "./include/SSummedVar.h", 44,
                  typeid(::ProofSummedVar<unsigned int>), DefineBehavior(ptr, ptr),
                  &ProofSummedVarlEunsignedsPintgR_Dictionary, isa_proxy, 4,
                  sizeof(::ProofSummedVar<unsigned int>) );
      instance.SetNew(&new_ProofSummedVarlEunsignedsPintgR);
      instance.SetNewArray(&newArray_ProofSummedVarlEunsignedsPintgR);
      instance.SetDelete(&delete_ProofSummedVarlEunsignedsPintgR);
      instance.SetDeleteArray(&deleteArray_ProofSummedVarlEunsignedsPintgR);
      instance.SetDestructor(&destruct_ProofSummedVarlEunsignedsPintgR);
      instance.SetMerge(&merge_ProofSummedVarlEunsignedsPintgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ProofSummedVar<unsigned int>*)
   {
      return GenerateInitInstanceLocal((::ProofSummedVar<unsigned int>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ProofSummedVar<unsigned int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ProofSummedVarlEunsignedsPintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<unsigned int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ProofSummedVarlElonggR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ProofSummedVarlElonggR_Dictionary();
   static void *new_ProofSummedVarlElonggR(void *p = 0);
   static void *newArray_ProofSummedVarlElonggR(Long_t size, void *p);
   static void delete_ProofSummedVarlElonggR(void *p);
   static void deleteArray_ProofSummedVarlElonggR(void *p);
   static void destruct_ProofSummedVarlElonggR(void *p);
   static Long64_t merge_ProofSummedVarlElonggR(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ProofSummedVar<long>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ProofSummedVar<long>) == sizeof(::ROOT::Shadow::ProofSummedVarlElonggR));
      ::ProofSummedVar<long> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ProofSummedVar<long> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ProofSummedVar<long>", ::ProofSummedVar<long>::Class_Version(), "./include/SSummedVar.h", 44,
                  typeid(::ProofSummedVar<long>), DefineBehavior(ptr, ptr),
                  &ProofSummedVarlElonggR_Dictionary, isa_proxy, 4,
                  sizeof(::ProofSummedVar<long>) );
      instance.SetNew(&new_ProofSummedVarlElonggR);
      instance.SetNewArray(&newArray_ProofSummedVarlElonggR);
      instance.SetDelete(&delete_ProofSummedVarlElonggR);
      instance.SetDeleteArray(&deleteArray_ProofSummedVarlElonggR);
      instance.SetDestructor(&destruct_ProofSummedVarlElonggR);
      instance.SetMerge(&merge_ProofSummedVarlElonggR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ProofSummedVar<long>*)
   {
      return GenerateInitInstanceLocal((::ProofSummedVar<long>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ProofSummedVar<long>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ProofSummedVarlElonggR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<long>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ProofSummedVarlEunsignedsPlonggR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ProofSummedVarlEunsignedsPlonggR_Dictionary();
   static void *new_ProofSummedVarlEunsignedsPlonggR(void *p = 0);
   static void *newArray_ProofSummedVarlEunsignedsPlonggR(Long_t size, void *p);
   static void delete_ProofSummedVarlEunsignedsPlonggR(void *p);
   static void deleteArray_ProofSummedVarlEunsignedsPlonggR(void *p);
   static void destruct_ProofSummedVarlEunsignedsPlonggR(void *p);
   static Long64_t merge_ProofSummedVarlEunsignedsPlonggR(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ProofSummedVar<unsigned long>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ProofSummedVar<unsigned long>) == sizeof(::ROOT::Shadow::ProofSummedVarlEunsignedsPlonggR));
      ::ProofSummedVar<unsigned long> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ProofSummedVar<unsigned long> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ProofSummedVar<unsigned long>", ::ProofSummedVar<unsigned long>::Class_Version(), "./include/SSummedVar.h", 44,
                  typeid(::ProofSummedVar<unsigned long>), DefineBehavior(ptr, ptr),
                  &ProofSummedVarlEunsignedsPlonggR_Dictionary, isa_proxy, 4,
                  sizeof(::ProofSummedVar<unsigned long>) );
      instance.SetNew(&new_ProofSummedVarlEunsignedsPlonggR);
      instance.SetNewArray(&newArray_ProofSummedVarlEunsignedsPlonggR);
      instance.SetDelete(&delete_ProofSummedVarlEunsignedsPlonggR);
      instance.SetDeleteArray(&deleteArray_ProofSummedVarlEunsignedsPlonggR);
      instance.SetDestructor(&destruct_ProofSummedVarlEunsignedsPlonggR);
      instance.SetMerge(&merge_ProofSummedVarlEunsignedsPlonggR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ProofSummedVar<unsigned long>*)
   {
      return GenerateInitInstanceLocal((::ProofSummedVar<unsigned long>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ProofSummedVar<unsigned long>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ProofSummedVarlEunsignedsPlonggR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<unsigned long>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ProofSummedVarlELong64_tgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ProofSummedVarlELong64_tgR_Dictionary();
   static void *new_ProofSummedVarlELong64_tgR(void *p = 0);
   static void *newArray_ProofSummedVarlELong64_tgR(Long_t size, void *p);
   static void delete_ProofSummedVarlELong64_tgR(void *p);
   static void deleteArray_ProofSummedVarlELong64_tgR(void *p);
   static void destruct_ProofSummedVarlELong64_tgR(void *p);
   static Long64_t merge_ProofSummedVarlELong64_tgR(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ProofSummedVar<Long64_t>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ProofSummedVar<Long64_t>) == sizeof(::ROOT::Shadow::ProofSummedVarlElongsPlonggR));
      ::ProofSummedVar<Long64_t> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ProofSummedVar<Long64_t> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ProofSummedVar<Long64_t>", ::ProofSummedVar<Long64_t>::Class_Version(), "./include/SSummedVar.h", 44,
                  typeid(::ProofSummedVar<Long64_t>), DefineBehavior(ptr, ptr),
                  &ProofSummedVarlELong64_tgR_Dictionary, isa_proxy, 4,
                  sizeof(::ProofSummedVar<Long64_t>) );
      instance.SetNew(&new_ProofSummedVarlELong64_tgR);
      instance.SetNewArray(&newArray_ProofSummedVarlELong64_tgR);
      instance.SetDelete(&delete_ProofSummedVarlELong64_tgR);
      instance.SetDeleteArray(&deleteArray_ProofSummedVarlELong64_tgR);
      instance.SetDestructor(&destruct_ProofSummedVarlELong64_tgR);
      instance.SetMerge(&merge_ProofSummedVarlELong64_tgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ProofSummedVar<Long64_t>*)
   {
      return GenerateInitInstanceLocal((::ProofSummedVar<Long64_t>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ProofSummedVar<Long64_t>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ProofSummedVarlELong64_tgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<Long64_t>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ProofSummedVarlEULong64_tgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ProofSummedVarlEULong64_tgR_Dictionary();
   static void *new_ProofSummedVarlEULong64_tgR(void *p = 0);
   static void *newArray_ProofSummedVarlEULong64_tgR(Long_t size, void *p);
   static void delete_ProofSummedVarlEULong64_tgR(void *p);
   static void deleteArray_ProofSummedVarlEULong64_tgR(void *p);
   static void destruct_ProofSummedVarlEULong64_tgR(void *p);
   static Long64_t merge_ProofSummedVarlEULong64_tgR(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ProofSummedVar<ULong64_t>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ProofSummedVar<ULong64_t>) == sizeof(::ROOT::Shadow::ProofSummedVarlEunsignedsPlongsPlonggR));
      ::ProofSummedVar<ULong64_t> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ProofSummedVar<ULong64_t> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ProofSummedVar<ULong64_t>", ::ProofSummedVar<ULong64_t>::Class_Version(), "./include/SSummedVar.h", 44,
                  typeid(::ProofSummedVar<ULong64_t>), DefineBehavior(ptr, ptr),
                  &ProofSummedVarlEULong64_tgR_Dictionary, isa_proxy, 4,
                  sizeof(::ProofSummedVar<ULong64_t>) );
      instance.SetNew(&new_ProofSummedVarlEULong64_tgR);
      instance.SetNewArray(&newArray_ProofSummedVarlEULong64_tgR);
      instance.SetDelete(&delete_ProofSummedVarlEULong64_tgR);
      instance.SetDeleteArray(&deleteArray_ProofSummedVarlEULong64_tgR);
      instance.SetDestructor(&destruct_ProofSummedVarlEULong64_tgR);
      instance.SetMerge(&merge_ProofSummedVarlEULong64_tgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ProofSummedVar<ULong64_t>*)
   {
      return GenerateInitInstanceLocal((::ProofSummedVar<ULong64_t>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ProofSummedVar<ULong64_t>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ProofSummedVarlEULong64_tgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<ULong64_t>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ProofSummedVarlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ProofSummedVarlEfloatgR_Dictionary();
   static void *new_ProofSummedVarlEfloatgR(void *p = 0);
   static void *newArray_ProofSummedVarlEfloatgR(Long_t size, void *p);
   static void delete_ProofSummedVarlEfloatgR(void *p);
   static void deleteArray_ProofSummedVarlEfloatgR(void *p);
   static void destruct_ProofSummedVarlEfloatgR(void *p);
   static Long64_t merge_ProofSummedVarlEfloatgR(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ProofSummedVar<float>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ProofSummedVar<float>) == sizeof(::ROOT::Shadow::ProofSummedVarlEfloatgR));
      ::ProofSummedVar<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ProofSummedVar<float> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ProofSummedVar<float>", ::ProofSummedVar<float>::Class_Version(), "./include/SSummedVar.h", 44,
                  typeid(::ProofSummedVar<float>), DefineBehavior(ptr, ptr),
                  &ProofSummedVarlEfloatgR_Dictionary, isa_proxy, 4,
                  sizeof(::ProofSummedVar<float>) );
      instance.SetNew(&new_ProofSummedVarlEfloatgR);
      instance.SetNewArray(&newArray_ProofSummedVarlEfloatgR);
      instance.SetDelete(&delete_ProofSummedVarlEfloatgR);
      instance.SetDeleteArray(&deleteArray_ProofSummedVarlEfloatgR);
      instance.SetDestructor(&destruct_ProofSummedVarlEfloatgR);
      instance.SetMerge(&merge_ProofSummedVarlEfloatgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ProofSummedVar<float>*)
   {
      return GenerateInitInstanceLocal((::ProofSummedVar<float>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ProofSummedVar<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ProofSummedVarlEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ProofSummedVarlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ProofSummedVarlEdoublegR_Dictionary();
   static void *new_ProofSummedVarlEdoublegR(void *p = 0);
   static void *newArray_ProofSummedVarlEdoublegR(Long_t size, void *p);
   static void delete_ProofSummedVarlEdoublegR(void *p);
   static void deleteArray_ProofSummedVarlEdoublegR(void *p);
   static void destruct_ProofSummedVarlEdoublegR(void *p);
   static Long64_t merge_ProofSummedVarlEdoublegR(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ProofSummedVar<double>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ProofSummedVar<double>) == sizeof(::ROOT::Shadow::ProofSummedVarlEdoublegR));
      ::ProofSummedVar<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ProofSummedVar<double> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ProofSummedVar<double>", ::ProofSummedVar<double>::Class_Version(), "./include/SSummedVar.h", 44,
                  typeid(::ProofSummedVar<double>), DefineBehavior(ptr, ptr),
                  &ProofSummedVarlEdoublegR_Dictionary, isa_proxy, 4,
                  sizeof(::ProofSummedVar<double>) );
      instance.SetNew(&new_ProofSummedVarlEdoublegR);
      instance.SetNewArray(&newArray_ProofSummedVarlEdoublegR);
      instance.SetDelete(&delete_ProofSummedVarlEdoublegR);
      instance.SetDeleteArray(&deleteArray_ProofSummedVarlEdoublegR);
      instance.SetDestructor(&destruct_ProofSummedVarlEdoublegR);
      instance.SetMerge(&merge_ProofSummedVarlEdoublegR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ProofSummedVar<double>*)
   {
      return GenerateInitInstanceLocal((::ProofSummedVar<double>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ProofSummedVar<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ProofSummedVarlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR_Dictionary();
   static void *new_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR(void *p = 0);
   static void *newArray_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR(Long_t size, void *p);
   static void delete_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR(void *p);
   static void deleteArray_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR(void *p);
   static void destruct_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR(void *p);
   static Long64_t merge_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ProofSummedVar<vector<short,allocator<short> > >*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ProofSummedVar<vector<short,allocator<short> > >) == sizeof(::ROOT::Shadow::ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR));
      ::ProofSummedVar<vector<short,allocator<short> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ProofSummedVar<vector<short,allocator<short> > > >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ProofSummedVar<vector<short,allocator<short> > >", ::ProofSummedVar<vector<short,allocator<short> > >::Class_Version(), "./include/SSummedVar.h", 44,
                  typeid(::ProofSummedVar<vector<short,allocator<short> > >), DefineBehavior(ptr, ptr),
                  &ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(::ProofSummedVar<vector<short,allocator<short> > >) );
      instance.SetNew(&new_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR);
      instance.SetNewArray(&newArray_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR);
      instance.SetDelete(&delete_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR);
      instance.SetDestructor(&destruct_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR);
      instance.SetMerge(&merge_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ProofSummedVar<vector<short,allocator<short> > >*)
   {
      return GenerateInitInstanceLocal((::ProofSummedVar<vector<short,allocator<short> > >*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ProofSummedVar<vector<short,allocator<short> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<short,allocator<short> > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR_Dictionary();
   static void *new_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR(void *p = 0);
   static void *newArray_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR(Long_t size, void *p);
   static void delete_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR(void *p);
   static void deleteArray_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR(void *p);
   static void destruct_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR(void *p);
   static Long64_t merge_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >) == sizeof(::ROOT::Shadow::ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR));
      ::ProofSummedVar<vector<unsigned short,allocator<unsigned short> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ProofSummedVar<vector<unsigned short,allocator<unsigned short> > > >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >", ::ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >::Class_Version(), "./include/SSummedVar.h", 44,
                  typeid(::ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >), DefineBehavior(ptr, ptr),
                  &ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(::ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >) );
      instance.SetNew(&new_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR);
      instance.SetNewArray(&newArray_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR);
      instance.SetDelete(&delete_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR);
      instance.SetDestructor(&destruct_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR);
      instance.SetMerge(&merge_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >*)
   {
      return GenerateInitInstanceLocal((::ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR_Dictionary();
   static void *new_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR(void *p = 0);
   static void *newArray_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR(Long_t size, void *p);
   static void delete_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR(void *p);
   static void deleteArray_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR(void *p);
   static void destruct_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR(void *p);
   static Long64_t merge_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ProofSummedVar<vector<int,allocator<int> > >*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ProofSummedVar<vector<int,allocator<int> > >) == sizeof(::ROOT::Shadow::ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR));
      ::ProofSummedVar<vector<int,allocator<int> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ProofSummedVar<vector<int,allocator<int> > > >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ProofSummedVar<vector<int,allocator<int> > >", ::ProofSummedVar<vector<int,allocator<int> > >::Class_Version(), "./include/SSummedVar.h", 44,
                  typeid(::ProofSummedVar<vector<int,allocator<int> > >), DefineBehavior(ptr, ptr),
                  &ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(::ProofSummedVar<vector<int,allocator<int> > >) );
      instance.SetNew(&new_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR);
      instance.SetNewArray(&newArray_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR);
      instance.SetDelete(&delete_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR);
      instance.SetDestructor(&destruct_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR);
      instance.SetMerge(&merge_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ProofSummedVar<vector<int,allocator<int> > >*)
   {
      return GenerateInitInstanceLocal((::ProofSummedVar<vector<int,allocator<int> > >*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ProofSummedVar<vector<int,allocator<int> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<int,allocator<int> > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR_Dictionary();
   static void *new_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR(void *p = 0);
   static void *newArray_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR(Long_t size, void *p);
   static void delete_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR(void *p);
   static void deleteArray_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR(void *p);
   static void destruct_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR(void *p);
   static Long64_t merge_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >) == sizeof(::ROOT::Shadow::ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR));
      ::ProofSummedVar<vector<unsigned int,allocator<unsigned int> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ProofSummedVar<vector<unsigned int,allocator<unsigned int> > > >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >", ::ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >::Class_Version(), "./include/SSummedVar.h", 44,
                  typeid(::ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >), DefineBehavior(ptr, ptr),
                  &ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(::ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >) );
      instance.SetNew(&new_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR);
      instance.SetNewArray(&newArray_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR);
      instance.SetDelete(&delete_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR);
      instance.SetDestructor(&destruct_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR);
      instance.SetMerge(&merge_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >*)
   {
      return GenerateInitInstanceLocal((::ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR_Dictionary();
   static void *new_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR(void *p = 0);
   static void *newArray_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR(Long_t size, void *p);
   static void delete_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR(void *p);
   static void deleteArray_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR(void *p);
   static void destruct_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR(void *p);
   static Long64_t merge_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ProofSummedVar<vector<long,allocator<long> > >*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ProofSummedVar<vector<long,allocator<long> > >) == sizeof(::ROOT::Shadow::ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR));
      ::ProofSummedVar<vector<long,allocator<long> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ProofSummedVar<vector<long,allocator<long> > > >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ProofSummedVar<vector<long,allocator<long> > >", ::ProofSummedVar<vector<long,allocator<long> > >::Class_Version(), "./include/SSummedVar.h", 44,
                  typeid(::ProofSummedVar<vector<long,allocator<long> > >), DefineBehavior(ptr, ptr),
                  &ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(::ProofSummedVar<vector<long,allocator<long> > >) );
      instance.SetNew(&new_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR);
      instance.SetNewArray(&newArray_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR);
      instance.SetDelete(&delete_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR);
      instance.SetDestructor(&destruct_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR);
      instance.SetMerge(&merge_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ProofSummedVar<vector<long,allocator<long> > >*)
   {
      return GenerateInitInstanceLocal((::ProofSummedVar<vector<long,allocator<long> > >*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ProofSummedVar<vector<long,allocator<long> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<long,allocator<long> > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR_Dictionary();
   static void *new_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR(void *p = 0);
   static void *newArray_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR(Long_t size, void *p);
   static void delete_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR(void *p);
   static void deleteArray_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR(void *p);
   static void destruct_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR(void *p);
   static Long64_t merge_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >) == sizeof(::ROOT::Shadow::ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR));
      ::ProofSummedVar<vector<unsigned long,allocator<unsigned long> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ProofSummedVar<vector<unsigned long,allocator<unsigned long> > > >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >", ::ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >::Class_Version(), "./include/SSummedVar.h", 44,
                  typeid(::ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >), DefineBehavior(ptr, ptr),
                  &ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(::ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >) );
      instance.SetNew(&new_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR);
      instance.SetNewArray(&newArray_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR);
      instance.SetDelete(&delete_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR);
      instance.SetDestructor(&destruct_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR);
      instance.SetMerge(&merge_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >*)
   {
      return GenerateInitInstanceLocal((::ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ProofSummedVarlEvectorlELong64_tcOallocatorlELong64_tgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ProofSummedVarlEvectorlELong64_tcOallocatorlELong64_tgRsPgRsPgR_Dictionary();
   static void *new_ProofSummedVarlEvectorlELong64_tcOallocatorlELong64_tgRsPgRsPgR(void *p = 0);
   static void *newArray_ProofSummedVarlEvectorlELong64_tcOallocatorlELong64_tgRsPgRsPgR(Long_t size, void *p);
   static void delete_ProofSummedVarlEvectorlELong64_tcOallocatorlELong64_tgRsPgRsPgR(void *p);
   static void deleteArray_ProofSummedVarlEvectorlELong64_tcOallocatorlELong64_tgRsPgRsPgR(void *p);
   static void destruct_ProofSummedVarlEvectorlELong64_tcOallocatorlELong64_tgRsPgRsPgR(void *p);
   static Long64_t merge_ProofSummedVarlEvectorlELong64_tcOallocatorlELong64_tgRsPgRsPgR(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ProofSummedVar<vector<Long64_t,allocator<Long64_t> > >*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ProofSummedVar<vector<Long64_t,allocator<Long64_t> > >) == sizeof(::ROOT::Shadow::ProofSummedVarlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgR));
      ::ProofSummedVar<vector<Long64_t,allocator<Long64_t> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ProofSummedVar<vector<Long64_t,allocator<Long64_t> > > >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ProofSummedVar<vector<Long64_t,allocator<Long64_t> > >", ::ProofSummedVar<vector<Long64_t,allocator<Long64_t> > >::Class_Version(), "./include/SSummedVar.h", 44,
                  typeid(::ProofSummedVar<vector<Long64_t,allocator<Long64_t> > >), DefineBehavior(ptr, ptr),
                  &ProofSummedVarlEvectorlELong64_tcOallocatorlELong64_tgRsPgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(::ProofSummedVar<vector<Long64_t,allocator<Long64_t> > >) );
      instance.SetNew(&new_ProofSummedVarlEvectorlELong64_tcOallocatorlELong64_tgRsPgRsPgR);
      instance.SetNewArray(&newArray_ProofSummedVarlEvectorlELong64_tcOallocatorlELong64_tgRsPgRsPgR);
      instance.SetDelete(&delete_ProofSummedVarlEvectorlELong64_tcOallocatorlELong64_tgRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_ProofSummedVarlEvectorlELong64_tcOallocatorlELong64_tgRsPgRsPgR);
      instance.SetDestructor(&destruct_ProofSummedVarlEvectorlELong64_tcOallocatorlELong64_tgRsPgRsPgR);
      instance.SetMerge(&merge_ProofSummedVarlEvectorlELong64_tcOallocatorlELong64_tgRsPgRsPgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ProofSummedVar<vector<Long64_t,allocator<Long64_t> > >*)
   {
      return GenerateInitInstanceLocal((::ProofSummedVar<vector<Long64_t,allocator<Long64_t> > >*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ProofSummedVar<vector<Long64_t,allocator<Long64_t> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ProofSummedVarlEvectorlELong64_tcOallocatorlELong64_tgRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<Long64_t,allocator<Long64_t> > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ProofSummedVarlEvectorlEULong64_tcOallocatorlEULong64_tgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ProofSummedVarlEvectorlEULong64_tcOallocatorlEULong64_tgRsPgRsPgR_Dictionary();
   static void *new_ProofSummedVarlEvectorlEULong64_tcOallocatorlEULong64_tgRsPgRsPgR(void *p = 0);
   static void *newArray_ProofSummedVarlEvectorlEULong64_tcOallocatorlEULong64_tgRsPgRsPgR(Long_t size, void *p);
   static void delete_ProofSummedVarlEvectorlEULong64_tcOallocatorlEULong64_tgRsPgRsPgR(void *p);
   static void deleteArray_ProofSummedVarlEvectorlEULong64_tcOallocatorlEULong64_tgRsPgRsPgR(void *p);
   static void destruct_ProofSummedVarlEvectorlEULong64_tcOallocatorlEULong64_tgRsPgRsPgR(void *p);
   static Long64_t merge_ProofSummedVarlEvectorlEULong64_tcOallocatorlEULong64_tgRsPgRsPgR(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ProofSummedVar<vector<ULong64_t,allocator<ULong64_t> > >*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ProofSummedVar<vector<ULong64_t,allocator<ULong64_t> > >) == sizeof(::ROOT::Shadow::ProofSummedVarlEvectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgRsPgR));
      ::ProofSummedVar<vector<ULong64_t,allocator<ULong64_t> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ProofSummedVar<vector<ULong64_t,allocator<ULong64_t> > > >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ProofSummedVar<vector<ULong64_t,allocator<ULong64_t> > >", ::ProofSummedVar<vector<ULong64_t,allocator<ULong64_t> > >::Class_Version(), "./include/SSummedVar.h", 44,
                  typeid(::ProofSummedVar<vector<ULong64_t,allocator<ULong64_t> > >), DefineBehavior(ptr, ptr),
                  &ProofSummedVarlEvectorlEULong64_tcOallocatorlEULong64_tgRsPgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(::ProofSummedVar<vector<ULong64_t,allocator<ULong64_t> > >) );
      instance.SetNew(&new_ProofSummedVarlEvectorlEULong64_tcOallocatorlEULong64_tgRsPgRsPgR);
      instance.SetNewArray(&newArray_ProofSummedVarlEvectorlEULong64_tcOallocatorlEULong64_tgRsPgRsPgR);
      instance.SetDelete(&delete_ProofSummedVarlEvectorlEULong64_tcOallocatorlEULong64_tgRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_ProofSummedVarlEvectorlEULong64_tcOallocatorlEULong64_tgRsPgRsPgR);
      instance.SetDestructor(&destruct_ProofSummedVarlEvectorlEULong64_tcOallocatorlEULong64_tgRsPgRsPgR);
      instance.SetMerge(&merge_ProofSummedVarlEvectorlEULong64_tcOallocatorlEULong64_tgRsPgRsPgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ProofSummedVar<vector<ULong64_t,allocator<ULong64_t> > >*)
   {
      return GenerateInitInstanceLocal((::ProofSummedVar<vector<ULong64_t,allocator<ULong64_t> > >*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ProofSummedVar<vector<ULong64_t,allocator<ULong64_t> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ProofSummedVarlEvectorlEULong64_tcOallocatorlEULong64_tgRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<ULong64_t,allocator<ULong64_t> > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR_Dictionary();
   static void *new_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void *p = 0);
   static void *newArray_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(Long_t size, void *p);
   static void delete_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void *p);
   static void deleteArray_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void *p);
   static void destruct_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void *p);
   static Long64_t merge_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ProofSummedVar<vector<float,allocator<float> > >*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ProofSummedVar<vector<float,allocator<float> > >) == sizeof(::ROOT::Shadow::ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR));
      ::ProofSummedVar<vector<float,allocator<float> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ProofSummedVar<vector<float,allocator<float> > > >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ProofSummedVar<vector<float,allocator<float> > >", ::ProofSummedVar<vector<float,allocator<float> > >::Class_Version(), "./include/SSummedVar.h", 44,
                  typeid(::ProofSummedVar<vector<float,allocator<float> > >), DefineBehavior(ptr, ptr),
                  &ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(::ProofSummedVar<vector<float,allocator<float> > >) );
      instance.SetNew(&new_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR);
      instance.SetNewArray(&newArray_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR);
      instance.SetDelete(&delete_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR);
      instance.SetDestructor(&destruct_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR);
      instance.SetMerge(&merge_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ProofSummedVar<vector<float,allocator<float> > >*)
   {
      return GenerateInitInstanceLocal((::ProofSummedVar<vector<float,allocator<float> > >*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ProofSummedVar<vector<float,allocator<float> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<float,allocator<float> > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR_Dictionary();
   static void *new_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR(void *p = 0);
   static void *newArray_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR(Long_t size, void *p);
   static void delete_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR(void *p);
   static void deleteArray_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR(void *p);
   static void destruct_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR(void *p);
   static Long64_t merge_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ProofSummedVar<vector<double,allocator<double> > >*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ProofSummedVar<vector<double,allocator<double> > >) == sizeof(::ROOT::Shadow::ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR));
      ::ProofSummedVar<vector<double,allocator<double> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ProofSummedVar<vector<double,allocator<double> > > >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ProofSummedVar<vector<double,allocator<double> > >", ::ProofSummedVar<vector<double,allocator<double> > >::Class_Version(), "./include/SSummedVar.h", 44,
                  typeid(::ProofSummedVar<vector<double,allocator<double> > >), DefineBehavior(ptr, ptr),
                  &ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(::ProofSummedVar<vector<double,allocator<double> > >) );
      instance.SetNew(&new_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR);
      instance.SetNewArray(&newArray_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR);
      instance.SetDelete(&delete_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR);
      instance.SetDestructor(&destruct_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR);
      instance.SetMerge(&merge_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ProofSummedVar<vector<double,allocator<double> > >*)
   {
      return GenerateInitInstanceLocal((::ProofSummedVar<vector<double,allocator<double> > >*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ProofSummedVar<vector<double,allocator<double> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<double,allocator<double> > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void pairlEstringcOunsignedsPintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void pairlEstringcOunsignedsPintgR_Dictionary();
   static void *new_pairlEstringcOunsignedsPintgR(void *p = 0);
   static void *newArray_pairlEstringcOunsignedsPintgR(Long_t size, void *p);
   static void delete_pairlEstringcOunsignedsPintgR(void *p);
   static void deleteArray_pairlEstringcOunsignedsPintgR(void *p);
   static void destruct_pairlEstringcOunsignedsPintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const pair<string,unsigned int>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(pair<string,unsigned int>) == sizeof(::ROOT::Shadow::pairlEstringcOunsignedsPintgR));
      pair<string,unsigned int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(pair<string,unsigned int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("pair<string,unsigned int>", "/cvmfs/atlas.cern.ch/repo/sw/software/x86_64-slc6-gcc47-opt/17.8.0/sw/lcg/app/releases/ROOT/5.34.07a/x86_64-slc6-gcc47-opt/root/cint/cint/lib/prec_stl/utility", 17,
                  typeid(pair<string,unsigned int>), DefineBehavior(ptr, ptr),
                  &pairlEstringcOunsignedsPintgR_ShowMembers, &pairlEstringcOunsignedsPintgR_Dictionary, isa_proxy, 4,
                  sizeof(pair<string,unsigned int>) );
      instance.SetNew(&new_pairlEstringcOunsignedsPintgR);
      instance.SetNewArray(&newArray_pairlEstringcOunsignedsPintgR);
      instance.SetDelete(&delete_pairlEstringcOunsignedsPintgR);
      instance.SetDeleteArray(&deleteArray_pairlEstringcOunsignedsPintgR);
      instance.SetDestructor(&destruct_pairlEstringcOunsignedsPintgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const pair<string,unsigned int>*)
   {
      return GenerateInitInstanceLocal((pair<string,unsigned int>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const pair<string,unsigned int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void pairlEstringcOunsignedsPintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const pair<string,unsigned int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR_Dictionary();
   static void *new_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR(void *p = 0);
   static void *newArray_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR(Long_t size, void *p);
   static void delete_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR(void *p);
   static void deleteArray_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR(void *p);
   static void destruct_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR(void *p);
   static Long64_t merge_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >) == sizeof(::ROOT::Shadow::ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR));
      ::ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > > >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >", ::ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >::Class_Version(), "./include/SSummedVar.h", 44,
                  typeid(::ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >), DefineBehavior(ptr, ptr),
                  &ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(::ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >) );
      instance.SetNew(&new_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR);
      instance.SetNewArray(&newArray_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR);
      instance.SetDelete(&delete_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR);
      instance.SetDestructor(&destruct_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR);
      instance.SetMerge(&merge_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >*)
   {
      return GenerateInitInstanceLocal((::ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR_Dictionary();
   static void *new_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR(void *p = 0);
   static void *newArray_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR(Long_t size, void *p);
   static void delete_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR(void *p);
   static void deleteArray_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR(void *p);
   static void destruct_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR(void *p);
   static Long64_t merge_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >) == sizeof(::ROOT::Shadow::ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR));
      ::ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > > >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >", ::ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >::Class_Version(), "./include/SSummedVar.h", 44,
                  typeid(::ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >), DefineBehavior(ptr, ptr),
                  &ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(::ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >) );
      instance.SetNew(&new_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR);
      instance.SetNewArray(&newArray_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR);
      instance.SetDelete(&delete_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR);
      instance.SetDestructor(&destruct_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR);
      instance.SetMerge(&merge_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >*)
   {
      return GenerateInitInstanceLocal((::ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR_Dictionary();
   static void *new_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR(void *p = 0);
   static void *newArray_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR(Long_t size, void *p);
   static void delete_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR(void *p);
   static void deleteArray_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR(void *p);
   static void destruct_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR(void *p);
   static Long64_t merge_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >) == sizeof(::ROOT::Shadow::ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR));
      ::ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > > >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >", ::ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >::Class_Version(), "./include/SSummedVar.h", 44,
                  typeid(::ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >), DefineBehavior(ptr, ptr),
                  &ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(::ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >) );
      instance.SetNew(&new_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR);
      instance.SetNewArray(&newArray_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR);
      instance.SetDelete(&delete_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR);
      instance.SetDestructor(&destruct_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR);
      instance.SetMerge(&merge_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >*)
   {
      return GenerateInitInstanceLocal((::ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR_Dictionary();
   static void *new_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR(void *p = 0);
   static void *newArray_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR(Long_t size, void *p);
   static void delete_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR(void *p);
   static void deleteArray_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR(void *p);
   static void destruct_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR(void *p);
   static Long64_t merge_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >) == sizeof(::ROOT::Shadow::ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR));
      ::ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > > >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >", ::ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >::Class_Version(), "./include/SSummedVar.h", 44,
                  typeid(::ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >), DefineBehavior(ptr, ptr),
                  &ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(::ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >) );
      instance.SetNew(&new_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR);
      instance.SetNewArray(&newArray_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR);
      instance.SetDelete(&delete_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR);
      instance.SetDestructor(&destruct_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR);
      instance.SetMerge(&merge_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >*)
   {
      return GenerateInitInstanceLocal((::ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
template <> TClass *SH1<float>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *SH1<float>::Class_Name()
{
   return "SH1<float>";
}

//______________________________________________________________________________
template <> const char *SH1<float>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SH1<float>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int SH1<float>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SH1<float>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void SH1<float>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SH1<float>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *SH1<float>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SH1<float>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *SH1<double>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *SH1<double>::Class_Name()
{
   return "SH1<double>";
}

//______________________________________________________________________________
template <> const char *SH1<double>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SH1<double>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int SH1<double>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SH1<double>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void SH1<double>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SH1<double>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *SH1<double>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SH1<double>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *SH1<int>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *SH1<int>::Class_Name()
{
   return "SH1<int>";
}

//______________________________________________________________________________
template <> const char *SH1<int>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SH1<int>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int SH1<int>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SH1<int>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void SH1<int>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SH1<int>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *SH1<int>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SH1<int>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *SParticle::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SParticle::Class_Name()
{
   return "SParticle";
}

//______________________________________________________________________________
const char *SParticle::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SParticle*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SParticle::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SParticle*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SParticle::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SParticle*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SParticle::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SParticle*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<short>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *ProofSummedVar<short>::Class_Name()
{
   return "ProofSummedVar<short>";
}

//______________________________________________________________________________
template <> const char *ProofSummedVar<short>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<short>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int ProofSummedVar<short>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<short>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void ProofSummedVar<short>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<short>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<short>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<short>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<unsigned short>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *ProofSummedVar<unsigned short>::Class_Name()
{
   return "ProofSummedVar<unsigned short>";
}

//______________________________________________________________________________
template <> const char *ProofSummedVar<unsigned short>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<unsigned short>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int ProofSummedVar<unsigned short>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<unsigned short>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void ProofSummedVar<unsigned short>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<unsigned short>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<unsigned short>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<unsigned short>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<int>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *ProofSummedVar<int>::Class_Name()
{
   return "ProofSummedVar<int>";
}

//______________________________________________________________________________
template <> const char *ProofSummedVar<int>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<int>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int ProofSummedVar<int>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<int>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void ProofSummedVar<int>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<int>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<int>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<int>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<unsigned int>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *ProofSummedVar<unsigned int>::Class_Name()
{
   return "ProofSummedVar<unsigned int>";
}

//______________________________________________________________________________
template <> const char *ProofSummedVar<unsigned int>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<unsigned int>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int ProofSummedVar<unsigned int>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<unsigned int>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void ProofSummedVar<unsigned int>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<unsigned int>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<unsigned int>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<unsigned int>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<long>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *ProofSummedVar<long>::Class_Name()
{
   return "ProofSummedVar<long>";
}

//______________________________________________________________________________
template <> const char *ProofSummedVar<long>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<long>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int ProofSummedVar<long>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<long>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void ProofSummedVar<long>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<long>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<long>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<long>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<unsigned long>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *ProofSummedVar<unsigned long>::Class_Name()
{
   return "ProofSummedVar<unsigned long>";
}

//______________________________________________________________________________
template <> const char *ProofSummedVar<unsigned long>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<unsigned long>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int ProofSummedVar<unsigned long>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<unsigned long>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void ProofSummedVar<unsigned long>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<unsigned long>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<unsigned long>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<unsigned long>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<long long>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *ProofSummedVar<long long>::Class_Name()
{
   return "ProofSummedVar<long long>";
}

//______________________________________________________________________________
template <> const char *ProofSummedVar<long long>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<long long>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int ProofSummedVar<long long>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<long long>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void ProofSummedVar<long long>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<long long>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<long long>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<long long>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<unsigned long long>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *ProofSummedVar<unsigned long long>::Class_Name()
{
   return "ProofSummedVar<unsigned long long>";
}

//______________________________________________________________________________
template <> const char *ProofSummedVar<unsigned long long>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<unsigned long long>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int ProofSummedVar<unsigned long long>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<unsigned long long>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void ProofSummedVar<unsigned long long>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<unsigned long long>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<unsigned long long>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<unsigned long long>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<float>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *ProofSummedVar<float>::Class_Name()
{
   return "ProofSummedVar<float>";
}

//______________________________________________________________________________
template <> const char *ProofSummedVar<float>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<float>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int ProofSummedVar<float>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<float>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void ProofSummedVar<float>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<float>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<float>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<float>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<double>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *ProofSummedVar<double>::Class_Name()
{
   return "ProofSummedVar<double>";
}

//______________________________________________________________________________
template <> const char *ProofSummedVar<double>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<double>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int ProofSummedVar<double>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<double>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void ProofSummedVar<double>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<double>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<double>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<double>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<vector<short,allocator<short> > >::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *ProofSummedVar<vector<short,allocator<short> > >::Class_Name()
{
   return "ProofSummedVar<vector<short,allocator<short> > >";
}

//______________________________________________________________________________
template <> const char *ProofSummedVar<vector<short,allocator<short> > >::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<short,allocator<short> > >*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int ProofSummedVar<vector<short,allocator<short> > >::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<short,allocator<short> > >*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void ProofSummedVar<vector<short,allocator<short> > >::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<short,allocator<short> > >*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<vector<short,allocator<short> > >::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<short,allocator<short> > >*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >::Class_Name()
{
   return "ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >";
}

//______________________________________________________________________________
template <> const char *ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<vector<int,allocator<int> > >::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *ProofSummedVar<vector<int,allocator<int> > >::Class_Name()
{
   return "ProofSummedVar<vector<int,allocator<int> > >";
}

//______________________________________________________________________________
template <> const char *ProofSummedVar<vector<int,allocator<int> > >::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<int,allocator<int> > >*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int ProofSummedVar<vector<int,allocator<int> > >::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<int,allocator<int> > >*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void ProofSummedVar<vector<int,allocator<int> > >::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<int,allocator<int> > >*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<vector<int,allocator<int> > >::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<int,allocator<int> > >*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >::Class_Name()
{
   return "ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >";
}

//______________________________________________________________________________
template <> const char *ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<vector<long,allocator<long> > >::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *ProofSummedVar<vector<long,allocator<long> > >::Class_Name()
{
   return "ProofSummedVar<vector<long,allocator<long> > >";
}

//______________________________________________________________________________
template <> const char *ProofSummedVar<vector<long,allocator<long> > >::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<long,allocator<long> > >*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int ProofSummedVar<vector<long,allocator<long> > >::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<long,allocator<long> > >*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void ProofSummedVar<vector<long,allocator<long> > >::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<long,allocator<long> > >*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<vector<long,allocator<long> > >::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<long,allocator<long> > >*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >::Class_Name()
{
   return "ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >";
}

//______________________________________________________________________________
template <> const char *ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<vector<long long,allocator<long long> > >::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *ProofSummedVar<vector<long long,allocator<long long> > >::Class_Name()
{
   return "ProofSummedVar<vector<long long,allocator<long long> > >";
}

//______________________________________________________________________________
template <> const char *ProofSummedVar<vector<long long,allocator<long long> > >::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<long long,allocator<long long> > >*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int ProofSummedVar<vector<long long,allocator<long long> > >::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<long long,allocator<long long> > >*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void ProofSummedVar<vector<long long,allocator<long long> > >::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<long long,allocator<long long> > >*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<vector<long long,allocator<long long> > >::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<long long,allocator<long long> > >*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >::Class_Name()
{
   return "ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >";
}

//______________________________________________________________________________
template <> const char *ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<vector<float,allocator<float> > >::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *ProofSummedVar<vector<float,allocator<float> > >::Class_Name()
{
   return "ProofSummedVar<vector<float,allocator<float> > >";
}

//______________________________________________________________________________
template <> const char *ProofSummedVar<vector<float,allocator<float> > >::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<float,allocator<float> > >*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int ProofSummedVar<vector<float,allocator<float> > >::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<float,allocator<float> > >*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void ProofSummedVar<vector<float,allocator<float> > >::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<float,allocator<float> > >*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<vector<float,allocator<float> > >::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<float,allocator<float> > >*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<vector<double,allocator<double> > >::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *ProofSummedVar<vector<double,allocator<double> > >::Class_Name()
{
   return "ProofSummedVar<vector<double,allocator<double> > >";
}

//______________________________________________________________________________
template <> const char *ProofSummedVar<vector<double,allocator<double> > >::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<double,allocator<double> > >*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int ProofSummedVar<vector<double,allocator<double> > >::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<double,allocator<double> > >*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void ProofSummedVar<vector<double,allocator<double> > >::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<double,allocator<double> > >*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<vector<double,allocator<double> > >::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<double,allocator<double> > >*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >::Class_Name()
{
   return "ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >";
}

//______________________________________________________________________________
template <> const char *ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >::Class_Name()
{
   return "ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >";
}

//______________________________________________________________________________
template <> const char *ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >::Class_Name()
{
   return "ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >";
}

//______________________________________________________________________________
template <> const char *ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >::Class_Name()
{
   return "ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >";
}

//______________________________________________________________________________
template <> const char *ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void SParticle::Streamer(TBuffer &R__b)
{
   // Stream an object of class SParticle.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SParticle::Class(),this);
   } else {
      R__b.WriteClassBuffer(SParticle::Class(),this);
   }
}

//______________________________________________________________________________
void SParticle::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SParticle.
      TClass *R__cl = ::SParticle::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.GenericShowMembers("ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<Double32_t> >", ( ::ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<Double32_t> > *) (this ), false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SParticle(void *p) {
      return  p ? new(p) ::SParticle : new ::SParticle;
   }
   static void *newArray_SParticle(Long_t nElements, void *p) {
      return p ? new(p) ::SParticle[nElements] : new ::SParticle[nElements];
   }
   // Wrapper around operator delete
   static void delete_SParticle(void *p) {
      delete ((::SParticle*)p);
   }
   static void deleteArray_SParticle(void *p) {
      delete [] ((::SParticle*)p);
   }
   static void destruct_SParticle(void *p) {
      typedef ::SParticle current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SParticle

//______________________________________________________________________________
template <> void ProofSummedVar<short>::Streamer(TBuffer &R__b)
{
   // Stream an object of class ProofSummedVar<short>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ProofSummedVar<short>::Class(),this);
   } else {
      R__b.WriteClassBuffer(ProofSummedVar<short>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void ProofSummedVarlEshortgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ProofSummedVar<short>.
      typedef ::ROOT::Shadow::ProofSummedVarlEshortgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<short>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_member", &sobj->m_member);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void ProofSummedVar<short>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::ProofSummedVarlEshortgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ProofSummedVarlEshortgR(void *p) {
      return  p ? new(p) ::ProofSummedVar<short> : new ::ProofSummedVar<short>;
   }
   static void *newArray_ProofSummedVarlEshortgR(Long_t nElements, void *p) {
      return p ? new(p) ::ProofSummedVar<short>[nElements] : new ::ProofSummedVar<short>[nElements];
   }
   // Wrapper around operator delete
   static void delete_ProofSummedVarlEshortgR(void *p) {
      delete ((::ProofSummedVar<short>*)p);
   }
   static void deleteArray_ProofSummedVarlEshortgR(void *p) {
      delete [] ((::ProofSummedVar<short>*)p);
   }
   static void destruct_ProofSummedVarlEshortgR(void *p) {
      typedef ::ProofSummedVar<short> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_ProofSummedVarlEshortgR(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::ProofSummedVar<short>*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::ProofSummedVar<short>

//______________________________________________________________________________
template <> void ProofSummedVar<unsigned short>::Streamer(TBuffer &R__b)
{
   // Stream an object of class ProofSummedVar<unsigned short>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ProofSummedVar<unsigned short>::Class(),this);
   } else {
      R__b.WriteClassBuffer(ProofSummedVar<unsigned short>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void ProofSummedVarlEunsignedsPshortgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ProofSummedVar<unsigned short>.
      typedef ::ROOT::Shadow::ProofSummedVarlEunsignedsPshortgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<unsigned short>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_member", &sobj->m_member);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void ProofSummedVar<unsigned short>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::ProofSummedVarlEunsignedsPshortgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ProofSummedVarlEunsignedsPshortgR(void *p) {
      return  p ? new(p) ::ProofSummedVar<unsigned short> : new ::ProofSummedVar<unsigned short>;
   }
   static void *newArray_ProofSummedVarlEunsignedsPshortgR(Long_t nElements, void *p) {
      return p ? new(p) ::ProofSummedVar<unsigned short>[nElements] : new ::ProofSummedVar<unsigned short>[nElements];
   }
   // Wrapper around operator delete
   static void delete_ProofSummedVarlEunsignedsPshortgR(void *p) {
      delete ((::ProofSummedVar<unsigned short>*)p);
   }
   static void deleteArray_ProofSummedVarlEunsignedsPshortgR(void *p) {
      delete [] ((::ProofSummedVar<unsigned short>*)p);
   }
   static void destruct_ProofSummedVarlEunsignedsPshortgR(void *p) {
      typedef ::ProofSummedVar<unsigned short> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_ProofSummedVarlEunsignedsPshortgR(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::ProofSummedVar<unsigned short>*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::ProofSummedVar<unsigned short>

//______________________________________________________________________________
template <> void ProofSummedVar<int>::Streamer(TBuffer &R__b)
{
   // Stream an object of class ProofSummedVar<int>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ProofSummedVar<int>::Class(),this);
   } else {
      R__b.WriteClassBuffer(ProofSummedVar<int>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void ProofSummedVarlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ProofSummedVar<int>.
      typedef ::ROOT::Shadow::ProofSummedVarlEintgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<int>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_member", &sobj->m_member);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void ProofSummedVar<int>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::ProofSummedVarlEintgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ProofSummedVarlEintgR(void *p) {
      return  p ? new(p) ::ProofSummedVar<int> : new ::ProofSummedVar<int>;
   }
   static void *newArray_ProofSummedVarlEintgR(Long_t nElements, void *p) {
      return p ? new(p) ::ProofSummedVar<int>[nElements] : new ::ProofSummedVar<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_ProofSummedVarlEintgR(void *p) {
      delete ((::ProofSummedVar<int>*)p);
   }
   static void deleteArray_ProofSummedVarlEintgR(void *p) {
      delete [] ((::ProofSummedVar<int>*)p);
   }
   static void destruct_ProofSummedVarlEintgR(void *p) {
      typedef ::ProofSummedVar<int> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_ProofSummedVarlEintgR(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::ProofSummedVar<int>*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::ProofSummedVar<int>

//______________________________________________________________________________
template <> void ProofSummedVar<unsigned int>::Streamer(TBuffer &R__b)
{
   // Stream an object of class ProofSummedVar<unsigned int>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ProofSummedVar<unsigned int>::Class(),this);
   } else {
      R__b.WriteClassBuffer(ProofSummedVar<unsigned int>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void ProofSummedVarlEunsignedsPintgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ProofSummedVar<unsigned int>.
      typedef ::ROOT::Shadow::ProofSummedVarlEunsignedsPintgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<unsigned int>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_member", &sobj->m_member);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void ProofSummedVar<unsigned int>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::ProofSummedVarlEunsignedsPintgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ProofSummedVarlEunsignedsPintgR(void *p) {
      return  p ? new(p) ::ProofSummedVar<unsigned int> : new ::ProofSummedVar<unsigned int>;
   }
   static void *newArray_ProofSummedVarlEunsignedsPintgR(Long_t nElements, void *p) {
      return p ? new(p) ::ProofSummedVar<unsigned int>[nElements] : new ::ProofSummedVar<unsigned int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_ProofSummedVarlEunsignedsPintgR(void *p) {
      delete ((::ProofSummedVar<unsigned int>*)p);
   }
   static void deleteArray_ProofSummedVarlEunsignedsPintgR(void *p) {
      delete [] ((::ProofSummedVar<unsigned int>*)p);
   }
   static void destruct_ProofSummedVarlEunsignedsPintgR(void *p) {
      typedef ::ProofSummedVar<unsigned int> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_ProofSummedVarlEunsignedsPintgR(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::ProofSummedVar<unsigned int>*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::ProofSummedVar<unsigned int>

//______________________________________________________________________________
template <> void ProofSummedVar<long>::Streamer(TBuffer &R__b)
{
   // Stream an object of class ProofSummedVar<long>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ProofSummedVar<long>::Class(),this);
   } else {
      R__b.WriteClassBuffer(ProofSummedVar<long>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void ProofSummedVarlElonggR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ProofSummedVar<long>.
      typedef ::ROOT::Shadow::ProofSummedVarlElonggR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<long>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_member", &sobj->m_member);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void ProofSummedVar<long>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::ProofSummedVarlElonggR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ProofSummedVarlElonggR(void *p) {
      return  p ? new(p) ::ProofSummedVar<long> : new ::ProofSummedVar<long>;
   }
   static void *newArray_ProofSummedVarlElonggR(Long_t nElements, void *p) {
      return p ? new(p) ::ProofSummedVar<long>[nElements] : new ::ProofSummedVar<long>[nElements];
   }
   // Wrapper around operator delete
   static void delete_ProofSummedVarlElonggR(void *p) {
      delete ((::ProofSummedVar<long>*)p);
   }
   static void deleteArray_ProofSummedVarlElonggR(void *p) {
      delete [] ((::ProofSummedVar<long>*)p);
   }
   static void destruct_ProofSummedVarlElonggR(void *p) {
      typedef ::ProofSummedVar<long> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_ProofSummedVarlElonggR(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::ProofSummedVar<long>*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::ProofSummedVar<long>

//______________________________________________________________________________
template <> void ProofSummedVar<unsigned long>::Streamer(TBuffer &R__b)
{
   // Stream an object of class ProofSummedVar<unsigned long>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ProofSummedVar<unsigned long>::Class(),this);
   } else {
      R__b.WriteClassBuffer(ProofSummedVar<unsigned long>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void ProofSummedVarlEunsignedsPlonggR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ProofSummedVar<unsigned long>.
      typedef ::ROOT::Shadow::ProofSummedVarlEunsignedsPlonggR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<unsigned long>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_member", &sobj->m_member);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void ProofSummedVar<unsigned long>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::ProofSummedVarlEunsignedsPlonggR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ProofSummedVarlEunsignedsPlonggR(void *p) {
      return  p ? new(p) ::ProofSummedVar<unsigned long> : new ::ProofSummedVar<unsigned long>;
   }
   static void *newArray_ProofSummedVarlEunsignedsPlonggR(Long_t nElements, void *p) {
      return p ? new(p) ::ProofSummedVar<unsigned long>[nElements] : new ::ProofSummedVar<unsigned long>[nElements];
   }
   // Wrapper around operator delete
   static void delete_ProofSummedVarlEunsignedsPlonggR(void *p) {
      delete ((::ProofSummedVar<unsigned long>*)p);
   }
   static void deleteArray_ProofSummedVarlEunsignedsPlonggR(void *p) {
      delete [] ((::ProofSummedVar<unsigned long>*)p);
   }
   static void destruct_ProofSummedVarlEunsignedsPlonggR(void *p) {
      typedef ::ProofSummedVar<unsigned long> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_ProofSummedVarlEunsignedsPlonggR(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::ProofSummedVar<unsigned long>*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::ProofSummedVar<unsigned long>

//______________________________________________________________________________
template <> void ProofSummedVar<long long>::Streamer(TBuffer &R__b)
{
   // Stream an object of class ProofSummedVar<long long>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ProofSummedVar<long long>::Class(),this);
   } else {
      R__b.WriteClassBuffer(ProofSummedVar<long long>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void ProofSummedVarlELong64_tgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ProofSummedVar<long long>.
      typedef ::ROOT::Shadow::ProofSummedVarlElongsPlonggR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<long long>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_member", &sobj->m_member);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void ProofSummedVar<long long>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::ProofSummedVarlELong64_tgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ProofSummedVarlELong64_tgR(void *p) {
      return  p ? new(p) ::ProofSummedVar<Long64_t> : new ::ProofSummedVar<Long64_t>;
   }
   static void *newArray_ProofSummedVarlELong64_tgR(Long_t nElements, void *p) {
      return p ? new(p) ::ProofSummedVar<Long64_t>[nElements] : new ::ProofSummedVar<Long64_t>[nElements];
   }
   // Wrapper around operator delete
   static void delete_ProofSummedVarlELong64_tgR(void *p) {
      delete ((::ProofSummedVar<Long64_t>*)p);
   }
   static void deleteArray_ProofSummedVarlELong64_tgR(void *p) {
      delete [] ((::ProofSummedVar<Long64_t>*)p);
   }
   static void destruct_ProofSummedVarlELong64_tgR(void *p) {
      typedef ::ProofSummedVar<Long64_t> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_ProofSummedVarlELong64_tgR(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::ProofSummedVar<Long64_t>*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::ProofSummedVar<Long64_t>

//______________________________________________________________________________
template <> void ProofSummedVar<unsigned long long>::Streamer(TBuffer &R__b)
{
   // Stream an object of class ProofSummedVar<unsigned long long>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ProofSummedVar<unsigned long long>::Class(),this);
   } else {
      R__b.WriteClassBuffer(ProofSummedVar<unsigned long long>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void ProofSummedVarlEULong64_tgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ProofSummedVar<unsigned long long>.
      typedef ::ROOT::Shadow::ProofSummedVarlEunsignedsPlongsPlonggR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<unsigned long long>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_member", &sobj->m_member);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void ProofSummedVar<unsigned long long>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::ProofSummedVarlEULong64_tgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ProofSummedVarlEULong64_tgR(void *p) {
      return  p ? new(p) ::ProofSummedVar<ULong64_t> : new ::ProofSummedVar<ULong64_t>;
   }
   static void *newArray_ProofSummedVarlEULong64_tgR(Long_t nElements, void *p) {
      return p ? new(p) ::ProofSummedVar<ULong64_t>[nElements] : new ::ProofSummedVar<ULong64_t>[nElements];
   }
   // Wrapper around operator delete
   static void delete_ProofSummedVarlEULong64_tgR(void *p) {
      delete ((::ProofSummedVar<ULong64_t>*)p);
   }
   static void deleteArray_ProofSummedVarlEULong64_tgR(void *p) {
      delete [] ((::ProofSummedVar<ULong64_t>*)p);
   }
   static void destruct_ProofSummedVarlEULong64_tgR(void *p) {
      typedef ::ProofSummedVar<ULong64_t> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_ProofSummedVarlEULong64_tgR(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::ProofSummedVar<ULong64_t>*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::ProofSummedVar<ULong64_t>

//______________________________________________________________________________
template <> void ProofSummedVar<float>::Streamer(TBuffer &R__b)
{
   // Stream an object of class ProofSummedVar<float>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ProofSummedVar<float>::Class(),this);
   } else {
      R__b.WriteClassBuffer(ProofSummedVar<float>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void ProofSummedVarlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ProofSummedVar<float>.
      typedef ::ROOT::Shadow::ProofSummedVarlEfloatgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<float>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_member", &sobj->m_member);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void ProofSummedVar<float>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::ProofSummedVarlEfloatgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ProofSummedVarlEfloatgR(void *p) {
      return  p ? new(p) ::ProofSummedVar<float> : new ::ProofSummedVar<float>;
   }
   static void *newArray_ProofSummedVarlEfloatgR(Long_t nElements, void *p) {
      return p ? new(p) ::ProofSummedVar<float>[nElements] : new ::ProofSummedVar<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_ProofSummedVarlEfloatgR(void *p) {
      delete ((::ProofSummedVar<float>*)p);
   }
   static void deleteArray_ProofSummedVarlEfloatgR(void *p) {
      delete [] ((::ProofSummedVar<float>*)p);
   }
   static void destruct_ProofSummedVarlEfloatgR(void *p) {
      typedef ::ProofSummedVar<float> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_ProofSummedVarlEfloatgR(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::ProofSummedVar<float>*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::ProofSummedVar<float>

//______________________________________________________________________________
template <> void ProofSummedVar<double>::Streamer(TBuffer &R__b)
{
   // Stream an object of class ProofSummedVar<double>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ProofSummedVar<double>::Class(),this);
   } else {
      R__b.WriteClassBuffer(ProofSummedVar<double>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void ProofSummedVarlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ProofSummedVar<double>.
      typedef ::ROOT::Shadow::ProofSummedVarlEdoublegR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<double>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_member", &sobj->m_member);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void ProofSummedVar<double>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::ProofSummedVarlEdoublegR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ProofSummedVarlEdoublegR(void *p) {
      return  p ? new(p) ::ProofSummedVar<double> : new ::ProofSummedVar<double>;
   }
   static void *newArray_ProofSummedVarlEdoublegR(Long_t nElements, void *p) {
      return p ? new(p) ::ProofSummedVar<double>[nElements] : new ::ProofSummedVar<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_ProofSummedVarlEdoublegR(void *p) {
      delete ((::ProofSummedVar<double>*)p);
   }
   static void deleteArray_ProofSummedVarlEdoublegR(void *p) {
      delete [] ((::ProofSummedVar<double>*)p);
   }
   static void destruct_ProofSummedVarlEdoublegR(void *p) {
      typedef ::ProofSummedVar<double> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_ProofSummedVarlEdoublegR(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::ProofSummedVar<double>*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::ProofSummedVar<double>

//______________________________________________________________________________
template <> void ProofSummedVar<vector<short,allocator<short> > >::Streamer(TBuffer &R__b)
{
   // Stream an object of class ProofSummedVar<vector<short,allocator<short> > >.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ProofSummedVar<vector<short,allocator<short> > >::Class(),this);
   } else {
      R__b.WriteClassBuffer(ProofSummedVar<vector<short,allocator<short> > >::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ProofSummedVar<vector<short,allocator<short> > >.
      typedef ::ROOT::Shadow::ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<short,allocator<short> > >*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_member", (void*)&sobj->m_member);
      R__insp.InspectMember("vector<short,allocator<short> >", (void*)&sobj->m_member, "m_member.", false);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void ProofSummedVar<vector<short,allocator<short> > >::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR(void *p) {
      return  p ? new(p) ::ProofSummedVar<vector<short,allocator<short> > > : new ::ProofSummedVar<vector<short,allocator<short> > >;
   }
   static void *newArray_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR(Long_t nElements, void *p) {
      return p ? new(p) ::ProofSummedVar<vector<short,allocator<short> > >[nElements] : new ::ProofSummedVar<vector<short,allocator<short> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR(void *p) {
      delete ((::ProofSummedVar<vector<short,allocator<short> > >*)p);
   }
   static void deleteArray_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR(void *p) {
      delete [] ((::ProofSummedVar<vector<short,allocator<short> > >*)p);
   }
   static void destruct_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR(void *p) {
      typedef ::ProofSummedVar<vector<short,allocator<short> > > current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::ProofSummedVar<vector<short,allocator<short> > >*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::ProofSummedVar<vector<short,allocator<short> > >

//______________________________________________________________________________
template <> void ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >::Streamer(TBuffer &R__b)
{
   // Stream an object of class ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >::Class(),this);
   } else {
      R__b.WriteClassBuffer(ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >.
      typedef ::ROOT::Shadow::ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_member", (void*)&sobj->m_member);
      R__insp.InspectMember("vector<unsigned short,allocator<unsigned short> >", (void*)&sobj->m_member, "m_member.", false);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR(void *p) {
      return  p ? new(p) ::ProofSummedVar<vector<unsigned short,allocator<unsigned short> > > : new ::ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >;
   }
   static void *newArray_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR(Long_t nElements, void *p) {
      return p ? new(p) ::ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >[nElements] : new ::ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR(void *p) {
      delete ((::ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >*)p);
   }
   static void deleteArray_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR(void *p) {
      delete [] ((::ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >*)p);
   }
   static void destruct_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR(void *p) {
      typedef ::ProofSummedVar<vector<unsigned short,allocator<unsigned short> > > current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >

//______________________________________________________________________________
template <> void ProofSummedVar<vector<int,allocator<int> > >::Streamer(TBuffer &R__b)
{
   // Stream an object of class ProofSummedVar<vector<int,allocator<int> > >.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ProofSummedVar<vector<int,allocator<int> > >::Class(),this);
   } else {
      R__b.WriteClassBuffer(ProofSummedVar<vector<int,allocator<int> > >::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ProofSummedVar<vector<int,allocator<int> > >.
      typedef ::ROOT::Shadow::ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<int,allocator<int> > >*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_member", (void*)&sobj->m_member);
      R__insp.InspectMember("vector<int,allocator<int> >", (void*)&sobj->m_member, "m_member.", false);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void ProofSummedVar<vector<int,allocator<int> > >::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR(void *p) {
      return  p ? new(p) ::ProofSummedVar<vector<int,allocator<int> > > : new ::ProofSummedVar<vector<int,allocator<int> > >;
   }
   static void *newArray_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR(Long_t nElements, void *p) {
      return p ? new(p) ::ProofSummedVar<vector<int,allocator<int> > >[nElements] : new ::ProofSummedVar<vector<int,allocator<int> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR(void *p) {
      delete ((::ProofSummedVar<vector<int,allocator<int> > >*)p);
   }
   static void deleteArray_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR(void *p) {
      delete [] ((::ProofSummedVar<vector<int,allocator<int> > >*)p);
   }
   static void destruct_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR(void *p) {
      typedef ::ProofSummedVar<vector<int,allocator<int> > > current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::ProofSummedVar<vector<int,allocator<int> > >*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::ProofSummedVar<vector<int,allocator<int> > >

//______________________________________________________________________________
template <> void ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >::Streamer(TBuffer &R__b)
{
   // Stream an object of class ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >::Class(),this);
   } else {
      R__b.WriteClassBuffer(ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >.
      typedef ::ROOT::Shadow::ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_member", (void*)&sobj->m_member);
      R__insp.InspectMember("vector<unsigned int,allocator<unsigned int> >", (void*)&sobj->m_member, "m_member.", false);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR(void *p) {
      return  p ? new(p) ::ProofSummedVar<vector<unsigned int,allocator<unsigned int> > > : new ::ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >;
   }
   static void *newArray_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR(Long_t nElements, void *p) {
      return p ? new(p) ::ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >[nElements] : new ::ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR(void *p) {
      delete ((::ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >*)p);
   }
   static void deleteArray_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR(void *p) {
      delete [] ((::ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >*)p);
   }
   static void destruct_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR(void *p) {
      typedef ::ProofSummedVar<vector<unsigned int,allocator<unsigned int> > > current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >

//______________________________________________________________________________
template <> void ProofSummedVar<vector<long,allocator<long> > >::Streamer(TBuffer &R__b)
{
   // Stream an object of class ProofSummedVar<vector<long,allocator<long> > >.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ProofSummedVar<vector<long,allocator<long> > >::Class(),this);
   } else {
      R__b.WriteClassBuffer(ProofSummedVar<vector<long,allocator<long> > >::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ProofSummedVar<vector<long,allocator<long> > >.
      typedef ::ROOT::Shadow::ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<long,allocator<long> > >*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_member", (void*)&sobj->m_member);
      R__insp.InspectMember("vector<long,allocator<long> >", (void*)&sobj->m_member, "m_member.", false);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void ProofSummedVar<vector<long,allocator<long> > >::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR(void *p) {
      return  p ? new(p) ::ProofSummedVar<vector<long,allocator<long> > > : new ::ProofSummedVar<vector<long,allocator<long> > >;
   }
   static void *newArray_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR(Long_t nElements, void *p) {
      return p ? new(p) ::ProofSummedVar<vector<long,allocator<long> > >[nElements] : new ::ProofSummedVar<vector<long,allocator<long> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR(void *p) {
      delete ((::ProofSummedVar<vector<long,allocator<long> > >*)p);
   }
   static void deleteArray_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR(void *p) {
      delete [] ((::ProofSummedVar<vector<long,allocator<long> > >*)p);
   }
   static void destruct_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR(void *p) {
      typedef ::ProofSummedVar<vector<long,allocator<long> > > current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::ProofSummedVar<vector<long,allocator<long> > >*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::ProofSummedVar<vector<long,allocator<long> > >

//______________________________________________________________________________
template <> void ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >::Streamer(TBuffer &R__b)
{
   // Stream an object of class ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >::Class(),this);
   } else {
      R__b.WriteClassBuffer(ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >.
      typedef ::ROOT::Shadow::ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_member", (void*)&sobj->m_member);
      R__insp.InspectMember("vector<unsigned long,allocator<unsigned long> >", (void*)&sobj->m_member, "m_member.", false);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR(void *p) {
      return  p ? new(p) ::ProofSummedVar<vector<unsigned long,allocator<unsigned long> > > : new ::ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >;
   }
   static void *newArray_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR(Long_t nElements, void *p) {
      return p ? new(p) ::ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >[nElements] : new ::ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR(void *p) {
      delete ((::ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >*)p);
   }
   static void deleteArray_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR(void *p) {
      delete [] ((::ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >*)p);
   }
   static void destruct_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR(void *p) {
      typedef ::ProofSummedVar<vector<unsigned long,allocator<unsigned long> > > current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >

//______________________________________________________________________________
template <> void ProofSummedVar<vector<long long,allocator<long long> > >::Streamer(TBuffer &R__b)
{
   // Stream an object of class ProofSummedVar<vector<long long,allocator<long long> > >.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ProofSummedVar<vector<long long,allocator<long long> > >::Class(),this);
   } else {
      R__b.WriteClassBuffer(ProofSummedVar<vector<long long,allocator<long long> > >::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void ProofSummedVarlEvectorlELong64_tcOallocatorlELong64_tgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ProofSummedVar<vector<long long,allocator<long long> > >.
      typedef ::ROOT::Shadow::ProofSummedVarlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<long long,allocator<long long> > >*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_member", (void*)&sobj->m_member);
      R__insp.InspectMember("vector<Long64_t,allocator<Long64_t> >", (void*)&sobj->m_member, "m_member.", false);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void ProofSummedVar<vector<long long,allocator<long long> > >::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::ProofSummedVarlEvectorlELong64_tcOallocatorlELong64_tgRsPgRsPgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ProofSummedVarlEvectorlELong64_tcOallocatorlELong64_tgRsPgRsPgR(void *p) {
      return  p ? new(p) ::ProofSummedVar<vector<Long64_t,allocator<Long64_t> > > : new ::ProofSummedVar<vector<Long64_t,allocator<Long64_t> > >;
   }
   static void *newArray_ProofSummedVarlEvectorlELong64_tcOallocatorlELong64_tgRsPgRsPgR(Long_t nElements, void *p) {
      return p ? new(p) ::ProofSummedVar<vector<Long64_t,allocator<Long64_t> > >[nElements] : new ::ProofSummedVar<vector<Long64_t,allocator<Long64_t> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_ProofSummedVarlEvectorlELong64_tcOallocatorlELong64_tgRsPgRsPgR(void *p) {
      delete ((::ProofSummedVar<vector<Long64_t,allocator<Long64_t> > >*)p);
   }
   static void deleteArray_ProofSummedVarlEvectorlELong64_tcOallocatorlELong64_tgRsPgRsPgR(void *p) {
      delete [] ((::ProofSummedVar<vector<Long64_t,allocator<Long64_t> > >*)p);
   }
   static void destruct_ProofSummedVarlEvectorlELong64_tcOallocatorlELong64_tgRsPgRsPgR(void *p) {
      typedef ::ProofSummedVar<vector<Long64_t,allocator<Long64_t> > > current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_ProofSummedVarlEvectorlELong64_tcOallocatorlELong64_tgRsPgRsPgR(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::ProofSummedVar<vector<Long64_t,allocator<Long64_t> > >*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::ProofSummedVar<vector<Long64_t,allocator<Long64_t> > >

//______________________________________________________________________________
template <> void ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >::Streamer(TBuffer &R__b)
{
   // Stream an object of class ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >::Class(),this);
   } else {
      R__b.WriteClassBuffer(ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void ProofSummedVarlEvectorlEULong64_tcOallocatorlEULong64_tgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >.
      typedef ::ROOT::Shadow::ProofSummedVarlEvectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgRsPgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_member", (void*)&sobj->m_member);
      R__insp.InspectMember("vector<ULong64_t,allocator<ULong64_t> >", (void*)&sobj->m_member, "m_member.", false);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::ProofSummedVarlEvectorlEULong64_tcOallocatorlEULong64_tgRsPgRsPgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ProofSummedVarlEvectorlEULong64_tcOallocatorlEULong64_tgRsPgRsPgR(void *p) {
      return  p ? new(p) ::ProofSummedVar<vector<ULong64_t,allocator<ULong64_t> > > : new ::ProofSummedVar<vector<ULong64_t,allocator<ULong64_t> > >;
   }
   static void *newArray_ProofSummedVarlEvectorlEULong64_tcOallocatorlEULong64_tgRsPgRsPgR(Long_t nElements, void *p) {
      return p ? new(p) ::ProofSummedVar<vector<ULong64_t,allocator<ULong64_t> > >[nElements] : new ::ProofSummedVar<vector<ULong64_t,allocator<ULong64_t> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_ProofSummedVarlEvectorlEULong64_tcOallocatorlEULong64_tgRsPgRsPgR(void *p) {
      delete ((::ProofSummedVar<vector<ULong64_t,allocator<ULong64_t> > >*)p);
   }
   static void deleteArray_ProofSummedVarlEvectorlEULong64_tcOallocatorlEULong64_tgRsPgRsPgR(void *p) {
      delete [] ((::ProofSummedVar<vector<ULong64_t,allocator<ULong64_t> > >*)p);
   }
   static void destruct_ProofSummedVarlEvectorlEULong64_tcOallocatorlEULong64_tgRsPgRsPgR(void *p) {
      typedef ::ProofSummedVar<vector<ULong64_t,allocator<ULong64_t> > > current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_ProofSummedVarlEvectorlEULong64_tcOallocatorlEULong64_tgRsPgRsPgR(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::ProofSummedVar<vector<ULong64_t,allocator<ULong64_t> > >*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::ProofSummedVar<vector<ULong64_t,allocator<ULong64_t> > >

//______________________________________________________________________________
template <> void ProofSummedVar<vector<float,allocator<float> > >::Streamer(TBuffer &R__b)
{
   // Stream an object of class ProofSummedVar<vector<float,allocator<float> > >.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ProofSummedVar<vector<float,allocator<float> > >::Class(),this);
   } else {
      R__b.WriteClassBuffer(ProofSummedVar<vector<float,allocator<float> > >::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ProofSummedVar<vector<float,allocator<float> > >.
      typedef ::ROOT::Shadow::ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<float,allocator<float> > >*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_member", (void*)&sobj->m_member);
      R__insp.InspectMember("vector<float,allocator<float> >", (void*)&sobj->m_member, "m_member.", false);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void ProofSummedVar<vector<float,allocator<float> > >::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void *p) {
      return  p ? new(p) ::ProofSummedVar<vector<float,allocator<float> > > : new ::ProofSummedVar<vector<float,allocator<float> > >;
   }
   static void *newArray_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(Long_t nElements, void *p) {
      return p ? new(p) ::ProofSummedVar<vector<float,allocator<float> > >[nElements] : new ::ProofSummedVar<vector<float,allocator<float> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void *p) {
      delete ((::ProofSummedVar<vector<float,allocator<float> > >*)p);
   }
   static void deleteArray_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void *p) {
      delete [] ((::ProofSummedVar<vector<float,allocator<float> > >*)p);
   }
   static void destruct_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void *p) {
      typedef ::ProofSummedVar<vector<float,allocator<float> > > current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::ProofSummedVar<vector<float,allocator<float> > >*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::ProofSummedVar<vector<float,allocator<float> > >

//______________________________________________________________________________
template <> void ProofSummedVar<vector<double,allocator<double> > >::Streamer(TBuffer &R__b)
{
   // Stream an object of class ProofSummedVar<vector<double,allocator<double> > >.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ProofSummedVar<vector<double,allocator<double> > >::Class(),this);
   } else {
      R__b.WriteClassBuffer(ProofSummedVar<vector<double,allocator<double> > >::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ProofSummedVar<vector<double,allocator<double> > >.
      typedef ::ROOT::Shadow::ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<vector<double,allocator<double> > >*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_member", (void*)&sobj->m_member);
      R__insp.InspectMember("vector<double,allocator<double> >", (void*)&sobj->m_member, "m_member.", false);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void ProofSummedVar<vector<double,allocator<double> > >::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR(void *p) {
      return  p ? new(p) ::ProofSummedVar<vector<double,allocator<double> > > : new ::ProofSummedVar<vector<double,allocator<double> > >;
   }
   static void *newArray_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR(Long_t nElements, void *p) {
      return p ? new(p) ::ProofSummedVar<vector<double,allocator<double> > >[nElements] : new ::ProofSummedVar<vector<double,allocator<double> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR(void *p) {
      delete ((::ProofSummedVar<vector<double,allocator<double> > >*)p);
   }
   static void deleteArray_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR(void *p) {
      delete [] ((::ProofSummedVar<vector<double,allocator<double> > >*)p);
   }
   static void destruct_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR(void *p) {
      typedef ::ProofSummedVar<vector<double,allocator<double> > > current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::ProofSummedVar<vector<double,allocator<double> > >*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::ProofSummedVar<vector<double,allocator<double> > >

//______________________________________________________________________________
namespace ROOT {
   void pairlEstringcOunsignedsPintgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class pair<string,unsigned int>.
      typedef ::ROOT::Shadow::pairlEstringcOunsignedsPintgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const pair<string,unsigned int>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "first", (void*)&sobj->first);
      R__insp.InspectMember("string", (void*)&sobj->first, "first.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "second", &sobj->second);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_pairlEstringcOunsignedsPintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) pair<string,unsigned int> : new pair<string,unsigned int>;
   }
   static void *newArray_pairlEstringcOunsignedsPintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) pair<string,unsigned int>[nElements] : new pair<string,unsigned int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_pairlEstringcOunsignedsPintgR(void *p) {
      delete ((pair<string,unsigned int>*)p);
   }
   static void deleteArray_pairlEstringcOunsignedsPintgR(void *p) {
      delete [] ((pair<string,unsigned int>*)p);
   }
   static void destruct_pairlEstringcOunsignedsPintgR(void *p) {
      typedef pair<string,unsigned int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class pair<string,unsigned int>

//______________________________________________________________________________
template <> void ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >::Streamer(TBuffer &R__b)
{
   // Stream an object of class ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >::Class(),this);
   } else {
      R__b.WriteClassBuffer(ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >.
      typedef ::ROOT::Shadow::ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_member", (void*)&sobj->m_member);
      R__insp.InspectMember("map<string,int,less<string>,allocator<pair<const string,int> > >", (void*)&sobj->m_member, "m_member.", false);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR(void *p) {
      return  p ? new(p) ::ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > > : new ::ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >;
   }
   static void *newArray_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR(Long_t nElements, void *p) {
      return p ? new(p) ::ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >[nElements] : new ::ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR(void *p) {
      delete ((::ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >*)p);
   }
   static void deleteArray_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR(void *p) {
      delete [] ((::ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >*)p);
   }
   static void destruct_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR(void *p) {
      typedef ::ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > > current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >

//______________________________________________________________________________
template <> void ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >::Streamer(TBuffer &R__b)
{
   // Stream an object of class ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >::Class(),this);
   } else {
      R__b.WriteClassBuffer(ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >.
      typedef ::ROOT::Shadow::ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_member", (void*)&sobj->m_member);
      R__insp.InspectMember("map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >", (void*)&sobj->m_member, "m_member.", false);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR(void *p) {
      return  p ? new(p) ::ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > > : new ::ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >;
   }
   static void *newArray_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR(Long_t nElements, void *p) {
      return p ? new(p) ::ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >[nElements] : new ::ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR(void *p) {
      delete ((::ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >*)p);
   }
   static void deleteArray_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR(void *p) {
      delete [] ((::ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >*)p);
   }
   static void destruct_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR(void *p) {
      typedef ::ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > > current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >

//______________________________________________________________________________
template <> void ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >::Streamer(TBuffer &R__b)
{
   // Stream an object of class ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >::Class(),this);
   } else {
      R__b.WriteClassBuffer(ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >.
      typedef ::ROOT::Shadow::ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_member", (void*)&sobj->m_member);
      R__insp.InspectMember("map<string,float,less<string>,allocator<pair<const string,float> > >", (void*)&sobj->m_member, "m_member.", false);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR(void *p) {
      return  p ? new(p) ::ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > > : new ::ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >;
   }
   static void *newArray_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR(Long_t nElements, void *p) {
      return p ? new(p) ::ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >[nElements] : new ::ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR(void *p) {
      delete ((::ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >*)p);
   }
   static void deleteArray_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR(void *p) {
      delete [] ((::ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >*)p);
   }
   static void destruct_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR(void *p) {
      typedef ::ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > > current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >

//______________________________________________________________________________
template <> void ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >::Streamer(TBuffer &R__b)
{
   // Stream an object of class ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >::Class(),this);
   } else {
      R__b.WriteClassBuffer(ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >.
      typedef ::ROOT::Shadow::ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_member", (void*)&sobj->m_member);
      R__insp.InspectMember("map<string,double,less<string>,allocator<pair<const string,double> > >", (void*)&sobj->m_member, "m_member.", false);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR(void *p) {
      return  p ? new(p) ::ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > > : new ::ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >;
   }
   static void *newArray_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR(Long_t nElements, void *p) {
      return p ? new(p) ::ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >[nElements] : new ::ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR(void *p) {
      delete ((::ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >*)p);
   }
   static void deleteArray_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR(void *p) {
      delete [] ((::ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >*)p);
   }
   static void destruct_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR(void *p) {
      typedef ::ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > > current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >

//______________________________________________________________________________
template <> void SH1<float>::Streamer(TBuffer &R__b)
{
   // Stream an object of class SH1<float>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SH1<float>::Class(),this);
   } else {
      R__b.WriteClassBuffer(SH1<float>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void SH1lEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SH1<float>.
      typedef ::ROOT::Shadow::SH1lEfloatgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::SH1<float>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_arraySize", &sobj->m_arraySize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_content", &sobj->m_content);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_errors", &sobj->m_errors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_entries", &sobj->m_entries);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_bins", &sobj->m_bins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_low", &sobj->m_low);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_high", &sobj->m_high);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_computeErrors", &sobj->m_computeErrors);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void SH1<float>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::SH1lEfloatgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SH1lEfloatgR(void *p) {
      return  p ? new(p) ::SH1<float> : new ::SH1<float>;
   }
   static void *newArray_SH1lEfloatgR(Long_t nElements, void *p) {
      return p ? new(p) ::SH1<float>[nElements] : new ::SH1<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_SH1lEfloatgR(void *p) {
      delete ((::SH1<float>*)p);
   }
   static void deleteArray_SH1lEfloatgR(void *p) {
      delete [] ((::SH1<float>*)p);
   }
   static void destruct_SH1lEfloatgR(void *p) {
      typedef ::SH1<float> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_SH1lEfloatgR(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::SH1<float>*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::SH1<float>

//______________________________________________________________________________
template <> void SH1<double>::Streamer(TBuffer &R__b)
{
   // Stream an object of class SH1<double>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SH1<double>::Class(),this);
   } else {
      R__b.WriteClassBuffer(SH1<double>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void SH1lEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SH1<double>.
      typedef ::ROOT::Shadow::SH1lEdoublegR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::SH1<double>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_arraySize", &sobj->m_arraySize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_content", &sobj->m_content);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_errors", &sobj->m_errors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_entries", &sobj->m_entries);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_bins", &sobj->m_bins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_low", &sobj->m_low);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_high", &sobj->m_high);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_computeErrors", &sobj->m_computeErrors);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void SH1<double>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::SH1lEdoublegR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SH1lEdoublegR(void *p) {
      return  p ? new(p) ::SH1<double> : new ::SH1<double>;
   }
   static void *newArray_SH1lEdoublegR(Long_t nElements, void *p) {
      return p ? new(p) ::SH1<double>[nElements] : new ::SH1<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_SH1lEdoublegR(void *p) {
      delete ((::SH1<double>*)p);
   }
   static void deleteArray_SH1lEdoublegR(void *p) {
      delete [] ((::SH1<double>*)p);
   }
   static void destruct_SH1lEdoublegR(void *p) {
      typedef ::SH1<double> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_SH1lEdoublegR(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::SH1<double>*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::SH1<double>

//______________________________________________________________________________
template <> void SH1<int>::Streamer(TBuffer &R__b)
{
   // Stream an object of class SH1<int>.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SH1<int>::Class(),this);
   } else {
      R__b.WriteClassBuffer(SH1<int>::Class(),this);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void SH1lEintgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class SH1<int>.
      typedef ::ROOT::Shadow::SH1lEintgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::SH1<int>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_arraySize", &sobj->m_arraySize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_content", &sobj->m_content);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_errors", &sobj->m_errors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_entries", &sobj->m_entries);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_bins", &sobj->m_bins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_low", &sobj->m_low);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_high", &sobj->m_high);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_computeErrors", &sobj->m_computeErrors);
      sobj->TNamed::ShowMembers(R__insp);
   }

}

template <> void SH1<int>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::SH1lEintgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SH1lEintgR(void *p) {
      return  p ? new(p) ::SH1<int> : new ::SH1<int>;
   }
   static void *newArray_SH1lEintgR(Long_t nElements, void *p) {
      return p ? new(p) ::SH1<int>[nElements] : new ::SH1<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_SH1lEintgR(void *p) {
      delete ((::SH1<int>*)p);
   }
   static void deleteArray_SH1lEintgR(void *p) {
      delete [] ((::SH1<int>*)p);
   }
   static void destruct_SH1lEintgR(void *p) {
      typedef ::SH1<int> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_SH1lEintgR(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::SH1<int>*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::SH1<int>

namespace ROOT {
   void maplEstringcOdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOdoublegR_Dictionary();
   static void *new_maplEstringcOdoublegR(void *p = 0);
   static void *newArray_maplEstringcOdoublegR(Long_t size, void *p);
   static void delete_maplEstringcOdoublegR(void *p);
   static void deleteArray_maplEstringcOdoublegR(void *p);
   static void destruct_maplEstringcOdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,double>*)
   {
      map<string,double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,double>", -2, "map.dll", 0,
                  typeid(map<string,double>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,double>) );
      instance.SetNew(&new_maplEstringcOdoublegR);
      instance.SetNewArray(&newArray_maplEstringcOdoublegR);
      instance.SetDelete(&delete_maplEstringcOdoublegR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOdoublegR);
      instance.SetDestructor(&destruct_maplEstringcOdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,double> : new map<string,double>;
   }
   static void *newArray_maplEstringcOdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,double>[nElements] : new map<string,double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOdoublegR(void *p) {
      delete ((map<string,double>*)p);
   }
   static void deleteArray_maplEstringcOdoublegR(void *p) {
      delete [] ((map<string,double>*)p);
   }
   static void destruct_maplEstringcOdoublegR(void *p) {
      typedef map<string,double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,double>

namespace ROOT {
   void maplEstringcOfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOfloatgR_Dictionary();
   static void *new_maplEstringcOfloatgR(void *p = 0);
   static void *newArray_maplEstringcOfloatgR(Long_t size, void *p);
   static void delete_maplEstringcOfloatgR(void *p);
   static void deleteArray_maplEstringcOfloatgR(void *p);
   static void destruct_maplEstringcOfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,float>*)
   {
      map<string,float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,float>", -2, "map.dll", 0,
                  typeid(map<string,float>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,float>) );
      instance.SetNew(&new_maplEstringcOfloatgR);
      instance.SetNewArray(&newArray_maplEstringcOfloatgR);
      instance.SetDelete(&delete_maplEstringcOfloatgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOfloatgR);
      instance.SetDestructor(&destruct_maplEstringcOfloatgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,float> : new map<string,float>;
   }
   static void *newArray_maplEstringcOfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,float>[nElements] : new map<string,float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOfloatgR(void *p) {
      delete ((map<string,float>*)p);
   }
   static void deleteArray_maplEstringcOfloatgR(void *p) {
      delete [] ((map<string,float>*)p);
   }
   static void destruct_maplEstringcOfloatgR(void *p) {
      typedef map<string,float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,float>

namespace ROOT {
   void maplEstringcOintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOintgR_Dictionary();
   static void *new_maplEstringcOintgR(void *p = 0);
   static void *newArray_maplEstringcOintgR(Long_t size, void *p);
   static void delete_maplEstringcOintgR(void *p);
   static void deleteArray_maplEstringcOintgR(void *p);
   static void destruct_maplEstringcOintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,int>*)
   {
      map<string,int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,int>", -2, "map.dll", 0,
                  typeid(map<string,int>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOintgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,int>) );
      instance.SetNew(&new_maplEstringcOintgR);
      instance.SetNewArray(&newArray_maplEstringcOintgR);
      instance.SetDelete(&delete_maplEstringcOintgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOintgR);
      instance.SetDestructor(&destruct_maplEstringcOintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,int> : new map<string,int>;
   }
   static void *newArray_maplEstringcOintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,int>[nElements] : new map<string,int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOintgR(void *p) {
      delete ((map<string,int>*)p);
   }
   static void deleteArray_maplEstringcOintgR(void *p) {
      delete [] ((map<string,int>*)p);
   }
   static void destruct_maplEstringcOintgR(void *p) {
      typedef map<string,int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,int>

namespace ROOT {
   void maplEstringcOunsignedsPintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOunsignedsPintgR_Dictionary();
   static void *new_maplEstringcOunsignedsPintgR(void *p = 0);
   static void *newArray_maplEstringcOunsignedsPintgR(Long_t size, void *p);
   static void delete_maplEstringcOunsignedsPintgR(void *p);
   static void deleteArray_maplEstringcOunsignedsPintgR(void *p);
   static void destruct_maplEstringcOunsignedsPintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,unsigned int>*)
   {
      map<string,unsigned int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,unsigned int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,unsigned int>", -2, "/cvmfs/atlas.cern.ch/repo/sw/software/x86_64-slc6-gcc47-opt/17.8.0/sw/lcg/app/releases/ROOT/5.34.07a/x86_64-slc6-gcc47-opt/root/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<string,unsigned int>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOunsignedsPintgR_Dictionary, isa_proxy, 4,
                  sizeof(map<string,unsigned int>) );
      instance.SetNew(&new_maplEstringcOunsignedsPintgR);
      instance.SetNewArray(&newArray_maplEstringcOunsignedsPintgR);
      instance.SetDelete(&delete_maplEstringcOunsignedsPintgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOunsignedsPintgR);
      instance.SetDestructor(&destruct_maplEstringcOunsignedsPintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,unsigned int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,unsigned int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOunsignedsPintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,unsigned int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOunsignedsPintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,unsigned int> : new map<string,unsigned int>;
   }
   static void *newArray_maplEstringcOunsignedsPintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,unsigned int>[nElements] : new map<string,unsigned int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOunsignedsPintgR(void *p) {
      delete ((map<string,unsigned int>*)p);
   }
   static void deleteArray_maplEstringcOunsignedsPintgR(void *p) {
      delete [] ((map<string,unsigned int>*)p);
   }
   static void destruct_maplEstringcOunsignedsPintgR(void *p) {
      typedef map<string,unsigned int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,unsigned int>

namespace ROOT {
   void vectorlESParticlegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlESParticlegR_Dictionary();
   static void *new_vectorlESParticlegR(void *p = 0);
   static void *newArray_vectorlESParticlegR(Long_t size, void *p);
   static void delete_vectorlESParticlegR(void *p);
   static void deleteArray_vectorlESParticlegR(void *p);
   static void destruct_vectorlESParticlegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<SParticle>*)
   {
      vector<SParticle> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<SParticle>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<SParticle>", -2, "/cvmfs/atlas.cern.ch/repo/sw/software/x86_64-slc6-gcc47-opt/17.8.0/sw/lcg/app/releases/ROOT/5.34.07a/x86_64-slc6-gcc47-opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<SParticle>), DefineBehavior(ptr, ptr),
                  0, &vectorlESParticlegR_Dictionary, isa_proxy, 4,
                  sizeof(vector<SParticle>) );
      instance.SetNew(&new_vectorlESParticlegR);
      instance.SetNewArray(&newArray_vectorlESParticlegR);
      instance.SetDelete(&delete_vectorlESParticlegR);
      instance.SetDeleteArray(&deleteArray_vectorlESParticlegR);
      instance.SetDestructor(&destruct_vectorlESParticlegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<SParticle> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<SParticle>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlESParticlegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<SParticle>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlESParticlegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SParticle> : new vector<SParticle>;
   }
   static void *newArray_vectorlESParticlegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SParticle>[nElements] : new vector<SParticle>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlESParticlegR(void *p) {
      delete ((vector<SParticle>*)p);
   }
   static void deleteArray_vectorlESParticlegR(void *p) {
      delete [] ((vector<SParticle>*)p);
   }
   static void destruct_vectorlESParticlegR(void *p) {
      typedef vector<SParticle> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<SParticle>

namespace ROOT {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<double>

namespace ROOT {
   void vectorlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEfloatgR_Dictionary();
   static void *new_vectorlEfloatgR(void *p = 0);
   static void *newArray_vectorlEfloatgR(Long_t size, void *p);
   static void delete_vectorlEfloatgR(void *p);
   static void deleteArray_vectorlEfloatgR(void *p);
   static void destruct_vectorlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<float>*)
   {
      vector<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<float>", -2, "vector.dll", 0,
                  typeid(vector<float>), DefineBehavior(ptr, ptr),
                  0, &vectorlEfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<float>) );
      instance.SetNew(&new_vectorlEfloatgR);
      instance.SetNewArray(&newArray_vectorlEfloatgR);
      instance.SetDelete(&delete_vectorlEfloatgR);
      instance.SetDeleteArray(&deleteArray_vectorlEfloatgR);
      instance.SetDestructor(&destruct_vectorlEfloatgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float> : new vector<float>;
   }
   static void *newArray_vectorlEfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float>[nElements] : new vector<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEfloatgR(void *p) {
      delete ((vector<float>*)p);
   }
   static void deleteArray_vectorlEfloatgR(void *p) {
      delete [] ((vector<float>*)p);
   }
   static void destruct_vectorlEfloatgR(void *p) {
      typedef vector<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<float>

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "/cvmfs/atlas.cern.ch/repo/sw/software/x86_64-slc6-gcc47-opt/17.8.0/sw/lcg/app/releases/ROOT/5.34.07a/x86_64-slc6-gcc47-opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

namespace ROOT {
   void vectorlELong64_tgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlELong64_tgR_Dictionary();
   static void *new_vectorlELong64_tgR(void *p = 0);
   static void *newArray_vectorlELong64_tgR(Long_t size, void *p);
   static void delete_vectorlELong64_tgR(void *p);
   static void deleteArray_vectorlELong64_tgR(void *p);
   static void destruct_vectorlELong64_tgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<Long64_t>*)
   {
      vector<Long64_t> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<Long64_t>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<Long64_t>", -2, "vector.dll", 0,
                  typeid(vector<Long64_t>), DefineBehavior(ptr, ptr),
                  0, &vectorlELong64_tgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<Long64_t>) );
      instance.SetNew(&new_vectorlELong64_tgR);
      instance.SetNewArray(&newArray_vectorlELong64_tgR);
      instance.SetDelete(&delete_vectorlELong64_tgR);
      instance.SetDeleteArray(&deleteArray_vectorlELong64_tgR);
      instance.SetDestructor(&destruct_vectorlELong64_tgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<Long64_t> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<Long64_t>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlELong64_tgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<Long64_t>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlELong64_tgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Long64_t> : new vector<Long64_t>;
   }
   static void *newArray_vectorlELong64_tgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Long64_t>[nElements] : new vector<Long64_t>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlELong64_tgR(void *p) {
      delete ((vector<Long64_t>*)p);
   }
   static void deleteArray_vectorlELong64_tgR(void *p) {
      delete [] ((vector<Long64_t>*)p);
   }
   static void destruct_vectorlELong64_tgR(void *p) {
      typedef vector<Long64_t> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<Long64_t>

namespace ROOT {
   void vectorlElonggR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlElonggR_Dictionary();
   static void *new_vectorlElonggR(void *p = 0);
   static void *newArray_vectorlElonggR(Long_t size, void *p);
   static void delete_vectorlElonggR(void *p);
   static void deleteArray_vectorlElonggR(void *p);
   static void destruct_vectorlElonggR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<long>*)
   {
      vector<long> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<long>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<long>", -2, "vector.dll", 0,
                  typeid(vector<long>), DefineBehavior(ptr, ptr),
                  0, &vectorlElonggR_Dictionary, isa_proxy, 0,
                  sizeof(vector<long>) );
      instance.SetNew(&new_vectorlElonggR);
      instance.SetNewArray(&newArray_vectorlElonggR);
      instance.SetDelete(&delete_vectorlElonggR);
      instance.SetDeleteArray(&deleteArray_vectorlElonggR);
      instance.SetDestructor(&destruct_vectorlElonggR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<long> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<long>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlElonggR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<long>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlElonggR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<long> : new vector<long>;
   }
   static void *newArray_vectorlElonggR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<long>[nElements] : new vector<long>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlElonggR(void *p) {
      delete ((vector<long>*)p);
   }
   static void deleteArray_vectorlElonggR(void *p) {
      delete [] ((vector<long>*)p);
   }
   static void destruct_vectorlElonggR(void *p) {
      typedef vector<long> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<long>

namespace ROOT {
   void vectorlEshortgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEshortgR_Dictionary();
   static void *new_vectorlEshortgR(void *p = 0);
   static void *newArray_vectorlEshortgR(Long_t size, void *p);
   static void delete_vectorlEshortgR(void *p);
   static void deleteArray_vectorlEshortgR(void *p);
   static void destruct_vectorlEshortgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<short>*)
   {
      vector<short> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<short>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<short>", -2, "vector.dll", 0,
                  typeid(vector<short>), DefineBehavior(ptr, ptr),
                  0, &vectorlEshortgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<short>) );
      instance.SetNew(&new_vectorlEshortgR);
      instance.SetNewArray(&newArray_vectorlEshortgR);
      instance.SetDelete(&delete_vectorlEshortgR);
      instance.SetDeleteArray(&deleteArray_vectorlEshortgR);
      instance.SetDestructor(&destruct_vectorlEshortgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<short> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<short>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEshortgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<short>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEshortgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<short> : new vector<short>;
   }
   static void *newArray_vectorlEshortgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<short>[nElements] : new vector<short>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEshortgR(void *p) {
      delete ((vector<short>*)p);
   }
   static void deleteArray_vectorlEshortgR(void *p) {
      delete [] ((vector<short>*)p);
   }
   static void destruct_vectorlEshortgR(void *p) {
      typedef vector<short> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<short>

namespace ROOT {
   void vectorlEunsignedsPintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEunsignedsPintgR_Dictionary();
   static void *new_vectorlEunsignedsPintgR(void *p = 0);
   static void *newArray_vectorlEunsignedsPintgR(Long_t size, void *p);
   static void delete_vectorlEunsignedsPintgR(void *p);
   static void deleteArray_vectorlEunsignedsPintgR(void *p);
   static void destruct_vectorlEunsignedsPintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<unsigned int>*)
   {
      vector<unsigned int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<unsigned int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<unsigned int>", -2, "vector.dll", 0,
                  typeid(vector<unsigned int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEunsignedsPintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<unsigned int>) );
      instance.SetNew(&new_vectorlEunsignedsPintgR);
      instance.SetNewArray(&newArray_vectorlEunsignedsPintgR);
      instance.SetDelete(&delete_vectorlEunsignedsPintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEunsignedsPintgR);
      instance.SetDestructor(&destruct_vectorlEunsignedsPintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<unsigned int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<unsigned int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEunsignedsPintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<unsigned int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEunsignedsPintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned int> : new vector<unsigned int>;
   }
   static void *newArray_vectorlEunsignedsPintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned int>[nElements] : new vector<unsigned int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEunsignedsPintgR(void *p) {
      delete ((vector<unsigned int>*)p);
   }
   static void deleteArray_vectorlEunsignedsPintgR(void *p) {
      delete [] ((vector<unsigned int>*)p);
   }
   static void destruct_vectorlEunsignedsPintgR(void *p) {
      typedef vector<unsigned int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<unsigned int>

namespace ROOT {
   void vectorlEULong64_tgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEULong64_tgR_Dictionary();
   static void *new_vectorlEULong64_tgR(void *p = 0);
   static void *newArray_vectorlEULong64_tgR(Long_t size, void *p);
   static void delete_vectorlEULong64_tgR(void *p);
   static void deleteArray_vectorlEULong64_tgR(void *p);
   static void destruct_vectorlEULong64_tgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<ULong64_t>*)
   {
      vector<ULong64_t> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<ULong64_t>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<ULong64_t>", -2, "vector.dll", 0,
                  typeid(vector<ULong64_t>), DefineBehavior(ptr, ptr),
                  0, &vectorlEULong64_tgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<ULong64_t>) );
      instance.SetNew(&new_vectorlEULong64_tgR);
      instance.SetNewArray(&newArray_vectorlEULong64_tgR);
      instance.SetDelete(&delete_vectorlEULong64_tgR);
      instance.SetDeleteArray(&deleteArray_vectorlEULong64_tgR);
      instance.SetDestructor(&destruct_vectorlEULong64_tgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<ULong64_t> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<ULong64_t>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEULong64_tgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<ULong64_t>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEULong64_tgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<ULong64_t> : new vector<ULong64_t>;
   }
   static void *newArray_vectorlEULong64_tgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<ULong64_t>[nElements] : new vector<ULong64_t>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEULong64_tgR(void *p) {
      delete ((vector<ULong64_t>*)p);
   }
   static void deleteArray_vectorlEULong64_tgR(void *p) {
      delete [] ((vector<ULong64_t>*)p);
   }
   static void destruct_vectorlEULong64_tgR(void *p) {
      typedef vector<ULong64_t> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<ULong64_t>

namespace ROOT {
   void vectorlEunsignedsPlonggR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEunsignedsPlonggR_Dictionary();
   static void *new_vectorlEunsignedsPlonggR(void *p = 0);
   static void *newArray_vectorlEunsignedsPlonggR(Long_t size, void *p);
   static void delete_vectorlEunsignedsPlonggR(void *p);
   static void deleteArray_vectorlEunsignedsPlonggR(void *p);
   static void destruct_vectorlEunsignedsPlonggR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<unsigned long>*)
   {
      vector<unsigned long> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<unsigned long>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<unsigned long>", -2, "vector.dll", 0,
                  typeid(vector<unsigned long>), DefineBehavior(ptr, ptr),
                  0, &vectorlEunsignedsPlonggR_Dictionary, isa_proxy, 0,
                  sizeof(vector<unsigned long>) );
      instance.SetNew(&new_vectorlEunsignedsPlonggR);
      instance.SetNewArray(&newArray_vectorlEunsignedsPlonggR);
      instance.SetDelete(&delete_vectorlEunsignedsPlonggR);
      instance.SetDeleteArray(&deleteArray_vectorlEunsignedsPlonggR);
      instance.SetDestructor(&destruct_vectorlEunsignedsPlonggR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<unsigned long> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<unsigned long>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEunsignedsPlonggR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<unsigned long>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEunsignedsPlonggR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned long> : new vector<unsigned long>;
   }
   static void *newArray_vectorlEunsignedsPlonggR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned long>[nElements] : new vector<unsigned long>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEunsignedsPlonggR(void *p) {
      delete ((vector<unsigned long>*)p);
   }
   static void deleteArray_vectorlEunsignedsPlonggR(void *p) {
      delete [] ((vector<unsigned long>*)p);
   }
   static void destruct_vectorlEunsignedsPlonggR(void *p) {
      typedef vector<unsigned long> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<unsigned long>

namespace ROOT {
   void vectorlEunsignedsPshortgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEunsignedsPshortgR_Dictionary();
   static void *new_vectorlEunsignedsPshortgR(void *p = 0);
   static void *newArray_vectorlEunsignedsPshortgR(Long_t size, void *p);
   static void delete_vectorlEunsignedsPshortgR(void *p);
   static void deleteArray_vectorlEunsignedsPshortgR(void *p);
   static void destruct_vectorlEunsignedsPshortgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<unsigned short>*)
   {
      vector<unsigned short> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<unsigned short>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<unsigned short>", -2, "vector.dll", 0,
                  typeid(vector<unsigned short>), DefineBehavior(ptr, ptr),
                  0, &vectorlEunsignedsPshortgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<unsigned short>) );
      instance.SetNew(&new_vectorlEunsignedsPshortgR);
      instance.SetNewArray(&newArray_vectorlEunsignedsPshortgR);
      instance.SetDelete(&delete_vectorlEunsignedsPshortgR);
      instance.SetDeleteArray(&deleteArray_vectorlEunsignedsPshortgR);
      instance.SetDestructor(&destruct_vectorlEunsignedsPshortgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<unsigned short> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<unsigned short>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEunsignedsPshortgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<unsigned short>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEunsignedsPshortgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned short> : new vector<unsigned short>;
   }
   static void *newArray_vectorlEunsignedsPshortgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned short>[nElements] : new vector<unsigned short>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEunsignedsPshortgR(void *p) {
      delete ((vector<unsigned short>*)p);
   }
   static void deleteArray_vectorlEunsignedsPshortgR(void *p) {
      delete [] ((vector<unsigned short>*)p);
   }
   static void destruct_vectorlEunsignedsPshortgR(void *p) {
      typedef vector<unsigned short> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<unsigned short>

/********************************************************
* src/SFramePlugIns_Dict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableSFramePlugIns_Dict();

extern "C" void G__set_cpp_environmentSFramePlugIns_Dict() {
  G__cpp_reset_tagtableSFramePlugIns_Dict();
}
#include <new>
extern "C" int G__cpp_dllrevSFramePlugIns_Dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* SH1<float> */
static int G__SFramePlugIns_Dict_205_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SH1<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SH1<float>[n];
     } else {
       p = new((void*) gvp) SH1<float>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SH1<float>;
     } else {
       p = new((void*) gvp) SH1<float>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_205_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SH1<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SH1<float>(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) SH1<float>(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SH1<float>(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) SH1<float>(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_205_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((SH1<float>*) G__getstructoffset())->Fill((Double_t) G__double(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((SH1<float>*) G__getstructoffset())->Fill((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_205_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SH1<float>*) G__getstructoffset())->GetNBins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_205_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SH1<float>*) G__getstructoffset())->FindBin((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_205_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SH1<float>*) G__getstructoffset())->GetBinContent((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_205_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SH1<float>*) G__getstructoffset())->SetBinContent((Int_t) G__int(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_205_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const SH1<float>*) G__getstructoffset())->GetBinError((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_205_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SH1<float>*) G__getstructoffset())->SetBinError((Int_t) G__int(libp->para[0]), (float) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_205_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SH1<float>*) G__getstructoffset())->GetEntries());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_205_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SH1<float>*) G__getstructoffset())->SetEntries((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_205_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SH1<float>*) G__getstructoffset())->ToHist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_205_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SH1<float>*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_205_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SH1<float>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_205_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SH1<float>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_205_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SH1<float>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_205_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SH1<float>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_205_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SH1<float>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_205_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SH1<float>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_205_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SH1<float>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_205_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SH1<float>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_205_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SH1<float>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFramePlugIns_Dict_205_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SH1<float>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SH1<float>(*(SH1<float>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SH1<float> G__TSH1lEfloatgR;
static int G__SFramePlugIns_Dict_205_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SH1<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SH1<float>*) (soff+(sizeof(SH1<float>)*i)))->~G__TSH1lEfloatgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SH1<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SH1<float>*) (soff))->~G__TSH1lEfloatgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SH1<double> */
static int G__SFramePlugIns_Dict_206_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SH1<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SH1<double>[n];
     } else {
       p = new((void*) gvp) SH1<double>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SH1<double>;
     } else {
       p = new((void*) gvp) SH1<double>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_206_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SH1<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SH1<double>(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) SH1<double>(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SH1<double>(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) SH1<double>(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_206_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((SH1<double>*) G__getstructoffset())->Fill((Double_t) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((SH1<double>*) G__getstructoffset())->Fill((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_206_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SH1<double>*) G__getstructoffset())->GetNBins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_206_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SH1<double>*) G__getstructoffset())->FindBin((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_206_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SH1<double>*) G__getstructoffset())->GetBinContent((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_206_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SH1<double>*) G__getstructoffset())->SetBinContent((Int_t) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_206_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SH1<double>*) G__getstructoffset())->GetBinError((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_206_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SH1<double>*) G__getstructoffset())->SetBinError((Int_t) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_206_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SH1<double>*) G__getstructoffset())->GetEntries());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_206_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SH1<double>*) G__getstructoffset())->SetEntries((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_206_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SH1<double>*) G__getstructoffset())->ToHist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_206_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SH1<double>*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_206_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SH1<double>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_206_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SH1<double>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_206_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SH1<double>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_206_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SH1<double>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_206_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SH1<double>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_206_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SH1<double>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_206_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SH1<double>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_206_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SH1<double>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_206_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SH1<double>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFramePlugIns_Dict_206_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SH1<double>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SH1<double>(*(SH1<double>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SH1<double> G__TSH1lEdoublegR;
static int G__SFramePlugIns_Dict_206_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SH1<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SH1<double>*) (soff+(sizeof(SH1<double>)*i)))->~G__TSH1lEdoublegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SH1<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SH1<double>*) (soff))->~G__TSH1lEdoublegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SH1<int> */
static int G__SFramePlugIns_Dict_207_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SH1<int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SH1<int>[n];
     } else {
       p = new((void*) gvp) SH1<int>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SH1<int>;
     } else {
       p = new((void*) gvp) SH1<int>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_207_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SH1<int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SH1<int>(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) SH1<int>(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Bool_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SH1<int>(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) SH1<int>(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_207_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((SH1<int>*) G__getstructoffset())->Fill((Double_t) G__double(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((SH1<int>*) G__getstructoffset())->Fill((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_207_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SH1<int>*) G__getstructoffset())->GetNBins());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_207_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SH1<int>*) G__getstructoffset())->FindBin((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_207_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SH1<int>*) G__getstructoffset())->GetBinContent((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_207_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SH1<int>*) G__getstructoffset())->SetBinContent((Int_t) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_207_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SH1<int>*) G__getstructoffset())->GetBinError((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_207_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SH1<int>*) G__getstructoffset())->SetBinError((Int_t) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_207_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SH1<int>*) G__getstructoffset())->GetEntries());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_207_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SH1<int>*) G__getstructoffset())->SetEntries((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_207_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SH1<int>*) G__getstructoffset())->ToHist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_207_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SH1<int>*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_207_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SH1<int>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_207_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SH1<int>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_207_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SH1<int>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_207_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SH1<int>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_207_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SH1<int>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_207_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SH1<int>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_207_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SH1<int>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_207_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SH1<int>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_207_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SH1<int>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFramePlugIns_Dict_207_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SH1<int>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SH1<int>(*(SH1<int>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SH1<int> G__TSH1lEintgR;
static int G__SFramePlugIns_Dict_207_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SH1<int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SH1<int>*) (soff+(sizeof(SH1<int>)*i)))->~G__TSH1lEintgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SH1<int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SH1<int>*) (soff))->~G__TSH1lEintgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SParticle */
static int G__SFramePlugIns_Dict_231_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SParticle[n];
     } else {
       p = new((void*) gvp) SParticle[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SParticle;
     } else {
       p = new((void*) gvp) SParticle;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_231_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SParticle(
(Double32_t) G__double(libp->para[0]), (Double32_t) G__double(libp->para[1])
, (Double32_t) G__double(libp->para[2]), (Double32_t) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) SParticle(
(Double32_t) G__double(libp->para[0]), (Double32_t) G__double(libp->para[1])
, (Double32_t) G__double(libp->para[2]), (Double32_t) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_231_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SParticle(*(SParticle*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) SParticle(*(SParticle*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_231_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SParticle::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_231_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SParticle::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_231_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SParticle::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_231_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SParticle::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_231_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SParticle*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_231_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SParticle::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_231_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SParticle::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_231_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SParticle::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_231_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SParticle::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SParticle G__TSParticle;
static int G__SFramePlugIns_Dict_231_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SParticle*) (soff+(sizeof(SParticle)*i)))->~G__TSParticle();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SParticle*) (soff))->~G__TSParticle();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFramePlugIns_Dict_231_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SParticle* dest = (SParticle*) G__getstructoffset();
   *dest = *(SParticle*) libp->para[0].ref;
   const SParticle& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<SParticle,allocator<SParticle> > */
static int G__SFramePlugIns_Dict_645_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SParticle,allocator<SParticle> >::reference obj = ((vector<SParticle,allocator<SParticle> >*) G__getstructoffset())->at((vector<SParticle,allocator<SParticle> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SParticle,allocator<SParticle> >::const_reference obj = ((const vector<SParticle,allocator<SParticle> >*) G__getstructoffset())->at((vector<SParticle,allocator<SParticle> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SParticle,allocator<SParticle> >::iterator* pobj;
         vector<SParticle,allocator<SParticle> >::iterator xobj = ((vector<SParticle,allocator<SParticle> >*) G__getstructoffset())->begin();
         pobj = new vector<SParticle,allocator<SParticle> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SParticle,allocator<SParticle> >::iterator* pobj;
         vector<SParticle,allocator<SParticle> >::iterator xobj = ((vector<SParticle,allocator<SParticle> >*) G__getstructoffset())->end();
         pobj = new vector<SParticle,allocator<SParticle> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SParticle,allocator<SParticle> >::reverse_iterator* pobj;
         vector<SParticle,allocator<SParticle> >::reverse_iterator xobj = ((vector<SParticle,allocator<SParticle> >*) G__getstructoffset())->rbegin();
         pobj = new vector<SParticle,allocator<SParticle> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SParticle,allocator<SParticle> >::reverse_iterator* pobj;
         vector<SParticle,allocator<SParticle> >::reverse_iterator xobj = ((vector<SParticle,allocator<SParticle> >*) G__getstructoffset())->rend();
         pobj = new vector<SParticle,allocator<SParticle> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SParticle,allocator<SParticle> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SParticle,allocator<SParticle> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SParticle,allocator<SParticle> >*) G__getstructoffset())->resize((vector<SParticle,allocator<SParticle> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SParticle,allocator<SParticle> >*) G__getstructoffset())->resize((vector<SParticle,allocator<SParticle> >::size_type) G__int(libp->para[0]), *((SParticle*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SParticle,allocator<SParticle> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<SParticle,allocator<SParticle> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SParticle,allocator<SParticle> >::reference obj = ((vector<SParticle,allocator<SParticle> >*) G__getstructoffset())->operator[]((vector<SParticle,allocator<SParticle> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SParticle,allocator<SParticle> >::const_reference obj = ((const vector<SParticle,allocator<SParticle> >*) G__getstructoffset())->operator[]((vector<SParticle,allocator<SParticle> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SParticle,allocator<SParticle> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SParticle,allocator<SParticle> >[n];
     } else {
       p = new((void*) gvp) vector<SParticle,allocator<SParticle> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SParticle,allocator<SParticle> >;
     } else {
       p = new((void*) gvp) vector<SParticle,allocator<SParticle> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SParticle,allocator<SParticle> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SParticle,allocator<SParticle> >((vector<SParticle,allocator<SParticle> >::size_type) G__int(libp->para[0]), *(SParticle*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<SParticle,allocator<SParticle> >((vector<SParticle,allocator<SParticle> >::size_type) G__int(libp->para[0]), *(SParticle*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SParticle,allocator<SParticle> >((vector<SParticle,allocator<SParticle> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<SParticle,allocator<SParticle> >((vector<SParticle,allocator<SParticle> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SParticle,allocator<SParticle> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SParticle,allocator<SParticle> >(*(vector<SParticle,allocator<SParticle> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<SParticle,allocator<SParticle> >(*(vector<SParticle,allocator<SParticle> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SParticle,allocator<SParticle> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SParticle,allocator<SParticle> >(*((vector<SParticle,allocator<SParticle> >::const_iterator*) G__int(libp->para[0])), *((vector<SParticle,allocator<SParticle> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<SParticle,allocator<SParticle> >(*((vector<SParticle,allocator<SParticle> >::const_iterator*) G__int(libp->para[0])), *((vector<SParticle,allocator<SParticle> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SParticle,allocator<SParticle> >& obj = ((vector<SParticle,allocator<SParticle> >*) G__getstructoffset())->operator=(*(vector<SParticle,allocator<SParticle> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SParticle,allocator<SParticle> >*) G__getstructoffset())->reserve((vector<SParticle,allocator<SParticle> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SParticle& obj = ((vector<SParticle,allocator<SParticle> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SParticle& obj = ((vector<SParticle,allocator<SParticle> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SParticle,allocator<SParticle> >*) G__getstructoffset())->push_back(*(SParticle*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SParticle,allocator<SParticle> >*) G__getstructoffset())->swap(*(vector<SParticle,allocator<SParticle> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SParticle,allocator<SParticle> >::iterator* pobj;
         vector<SParticle,allocator<SParticle> >::iterator xobj = ((vector<SParticle,allocator<SParticle> >*) G__getstructoffset())->insert(*((vector<SParticle,allocator<SParticle> >::iterator*) G__int(libp->para[0])), *(SParticle*) libp->para[1].ref);
         pobj = new vector<SParticle,allocator<SParticle> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SParticle,allocator<SParticle> >*) G__getstructoffset())->insert(*((vector<SParticle,allocator<SParticle> >::iterator*) G__int(libp->para[0])), *((vector<SParticle,allocator<SParticle> >::const_iterator*) G__int(libp->para[1]))
, *((vector<SParticle,allocator<SParticle> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SParticle,allocator<SParticle> >*) G__getstructoffset())->insert(*((vector<SParticle,allocator<SParticle> >::iterator*) G__int(libp->para[0])), (vector<SParticle,allocator<SParticle> >::size_type) G__int(libp->para[1])
, *(SParticle*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SParticle,allocator<SParticle> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SParticle,allocator<SParticle> >*) G__getstructoffset())->erase(*((vector<SParticle,allocator<SParticle> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SParticle,allocator<SParticle> >*) G__getstructoffset())->erase(*((vector<SParticle,allocator<SParticle> >::iterator*) G__int(libp->para[0])), *((vector<SParticle,allocator<SParticle> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_645_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SParticle,allocator<SParticle> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<SParticle,allocator<SParticle> > G__TvectorlESParticlecOallocatorlESParticlegRsPgR;
static int G__SFramePlugIns_Dict_645_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<SParticle,allocator<SParticle> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<SParticle,allocator<SParticle> >*) (soff+(sizeof(vector<SParticle,allocator<SParticle> >)*i)))->~G__TvectorlESParticlecOallocatorlESParticlegRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<SParticle,allocator<SParticle> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<SParticle,allocator<SParticle> >*) (soff))->~G__TvectorlESParticlecOallocatorlESParticlegRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ProofSummedVar<short> */
static int G__SFramePlugIns_Dict_648_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<short>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<short>((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ProofSummedVar<short>((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<short>((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ProofSummedVar<short>((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<short>[n];
       } else {
         p = new((void*) gvp) ProofSummedVar<short>[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<short>;
       } else {
         p = new((void*) gvp) ProofSummedVar<short>;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEshortgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_648_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ProofSummedVar<short>*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_648_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ProofSummedVar<short>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_648_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<short>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_648_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ProofSummedVar<short>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_648_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ProofSummedVar<short>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_648_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProofSummedVar<short>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_648_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<short>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_648_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<short>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_648_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<short>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_648_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<short>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFramePlugIns_Dict_648_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ProofSummedVar<short>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ProofSummedVar<short>(*(ProofSummedVar<short>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEshortgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ProofSummedVar<short> G__TProofSummedVarlEshortgR;
static int G__SFramePlugIns_Dict_648_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ProofSummedVar<short>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ProofSummedVar<short>*) (soff+(sizeof(ProofSummedVar<short>)*i)))->~G__TProofSummedVarlEshortgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ProofSummedVar<short>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ProofSummedVar<short>*) (soff))->~G__TProofSummedVarlEshortgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFramePlugIns_Dict_648_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<short>* dest = (ProofSummedVar<short>*) G__getstructoffset();
   *dest = *(ProofSummedVar<short>*) libp->para[0].ref;
   const ProofSummedVar<short>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ProofSummedVar<unsigned short> */
static int G__SFramePlugIns_Dict_649_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<unsigned short>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<unsigned short>((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ProofSummedVar<unsigned short>((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<unsigned short>((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ProofSummedVar<unsigned short>((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<unsigned short>[n];
       } else {
         p = new((void*) gvp) ProofSummedVar<unsigned short>[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<unsigned short>;
       } else {
         p = new((void*) gvp) ProofSummedVar<unsigned short>;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPshortgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_649_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ProofSummedVar<unsigned short>*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_649_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ProofSummedVar<unsigned short>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_649_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<unsigned short>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_649_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ProofSummedVar<unsigned short>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_649_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ProofSummedVar<unsigned short>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_649_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProofSummedVar<unsigned short>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_649_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<unsigned short>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_649_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<unsigned short>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_649_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<unsigned short>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_649_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<unsigned short>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFramePlugIns_Dict_649_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ProofSummedVar<unsigned short>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ProofSummedVar<unsigned short>(*(ProofSummedVar<unsigned short>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPshortgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ProofSummedVar<unsigned short> G__TProofSummedVarlEunsignedsPshortgR;
static int G__SFramePlugIns_Dict_649_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ProofSummedVar<unsigned short>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ProofSummedVar<unsigned short>*) (soff+(sizeof(ProofSummedVar<unsigned short>)*i)))->~G__TProofSummedVarlEunsignedsPshortgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ProofSummedVar<unsigned short>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ProofSummedVar<unsigned short>*) (soff))->~G__TProofSummedVarlEunsignedsPshortgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFramePlugIns_Dict_649_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<unsigned short>* dest = (ProofSummedVar<unsigned short>*) G__getstructoffset();
   *dest = *(ProofSummedVar<unsigned short>*) libp->para[0].ref;
   const ProofSummedVar<unsigned short>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ProofSummedVar<int> */
static int G__SFramePlugIns_Dict_650_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<int>((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ProofSummedVar<int>((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<int>((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ProofSummedVar<int>((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<int>[n];
       } else {
         p = new((void*) gvp) ProofSummedVar<int>[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<int>;
       } else {
         p = new((void*) gvp) ProofSummedVar<int>;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_650_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ProofSummedVar<int>*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_650_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ProofSummedVar<int>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_650_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<int>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_650_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ProofSummedVar<int>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_650_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ProofSummedVar<int>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_650_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProofSummedVar<int>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_650_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<int>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_650_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<int>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_650_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<int>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_650_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<int>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFramePlugIns_Dict_650_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ProofSummedVar<int>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ProofSummedVar<int>(*(ProofSummedVar<int>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ProofSummedVar<int> G__TProofSummedVarlEintgR;
static int G__SFramePlugIns_Dict_650_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ProofSummedVar<int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ProofSummedVar<int>*) (soff+(sizeof(ProofSummedVar<int>)*i)))->~G__TProofSummedVarlEintgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ProofSummedVar<int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ProofSummedVar<int>*) (soff))->~G__TProofSummedVarlEintgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFramePlugIns_Dict_650_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<int>* dest = (ProofSummedVar<int>*) G__getstructoffset();
   *dest = *(ProofSummedVar<int>*) libp->para[0].ref;
   const ProofSummedVar<int>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ProofSummedVar<unsigned int> */
static int G__SFramePlugIns_Dict_651_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<unsigned int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<unsigned int>((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ProofSummedVar<unsigned int>((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<unsigned int>((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ProofSummedVar<unsigned int>((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<unsigned int>[n];
       } else {
         p = new((void*) gvp) ProofSummedVar<unsigned int>[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<unsigned int>;
       } else {
         p = new((void*) gvp) ProofSummedVar<unsigned int>;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_651_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ProofSummedVar<unsigned int>*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_651_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ProofSummedVar<unsigned int>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_651_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<unsigned int>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_651_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ProofSummedVar<unsigned int>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_651_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ProofSummedVar<unsigned int>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_651_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProofSummedVar<unsigned int>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_651_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<unsigned int>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_651_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<unsigned int>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_651_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<unsigned int>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_651_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<unsigned int>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFramePlugIns_Dict_651_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ProofSummedVar<unsigned int>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ProofSummedVar<unsigned int>(*(ProofSummedVar<unsigned int>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ProofSummedVar<unsigned int> G__TProofSummedVarlEunsignedsPintgR;
static int G__SFramePlugIns_Dict_651_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ProofSummedVar<unsigned int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ProofSummedVar<unsigned int>*) (soff+(sizeof(ProofSummedVar<unsigned int>)*i)))->~G__TProofSummedVarlEunsignedsPintgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ProofSummedVar<unsigned int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ProofSummedVar<unsigned int>*) (soff))->~G__TProofSummedVarlEunsignedsPintgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFramePlugIns_Dict_651_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<unsigned int>* dest = (ProofSummedVar<unsigned int>*) G__getstructoffset();
   *dest = *(ProofSummedVar<unsigned int>*) libp->para[0].ref;
   const ProofSummedVar<unsigned int>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ProofSummedVar<long> */
static int G__SFramePlugIns_Dict_652_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<long>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<long>((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ProofSummedVar<long>((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<long>((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ProofSummedVar<long>((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<long>[n];
       } else {
         p = new((void*) gvp) ProofSummedVar<long>[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<long>;
       } else {
         p = new((void*) gvp) ProofSummedVar<long>;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlElonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_652_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ProofSummedVar<long>*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_652_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ProofSummedVar<long>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_652_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<long>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_652_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ProofSummedVar<long>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_652_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ProofSummedVar<long>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_652_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProofSummedVar<long>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_652_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<long>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_652_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<long>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_652_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<long>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_652_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<long>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFramePlugIns_Dict_652_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ProofSummedVar<long>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ProofSummedVar<long>(*(ProofSummedVar<long>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlElonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ProofSummedVar<long> G__TProofSummedVarlElonggR;
static int G__SFramePlugIns_Dict_652_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ProofSummedVar<long>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ProofSummedVar<long>*) (soff+(sizeof(ProofSummedVar<long>)*i)))->~G__TProofSummedVarlElonggR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ProofSummedVar<long>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ProofSummedVar<long>*) (soff))->~G__TProofSummedVarlElonggR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFramePlugIns_Dict_652_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<long>* dest = (ProofSummedVar<long>*) G__getstructoffset();
   *dest = *(ProofSummedVar<long>*) libp->para[0].ref;
   const ProofSummedVar<long>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ProofSummedVar<unsigned long> */
static int G__SFramePlugIns_Dict_653_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<unsigned long>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<unsigned long>((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ProofSummedVar<unsigned long>((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<unsigned long>((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ProofSummedVar<unsigned long>((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<unsigned long>[n];
       } else {
         p = new((void*) gvp) ProofSummedVar<unsigned long>[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<unsigned long>;
       } else {
         p = new((void*) gvp) ProofSummedVar<unsigned long>;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPlonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_653_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ProofSummedVar<unsigned long>*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_653_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ProofSummedVar<unsigned long>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_653_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<unsigned long>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_653_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ProofSummedVar<unsigned long>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_653_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ProofSummedVar<unsigned long>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_653_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProofSummedVar<unsigned long>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_653_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<unsigned long>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_653_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<unsigned long>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_653_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<unsigned long>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_653_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<unsigned long>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFramePlugIns_Dict_653_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ProofSummedVar<unsigned long>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ProofSummedVar<unsigned long>(*(ProofSummedVar<unsigned long>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPlonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ProofSummedVar<unsigned long> G__TProofSummedVarlEunsignedsPlonggR;
static int G__SFramePlugIns_Dict_653_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ProofSummedVar<unsigned long>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ProofSummedVar<unsigned long>*) (soff+(sizeof(ProofSummedVar<unsigned long>)*i)))->~G__TProofSummedVarlEunsignedsPlonggR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ProofSummedVar<unsigned long>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ProofSummedVar<unsigned long>*) (soff))->~G__TProofSummedVarlEunsignedsPlonggR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFramePlugIns_Dict_653_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<unsigned long>* dest = (ProofSummedVar<unsigned long>*) G__getstructoffset();
   *dest = *(ProofSummedVar<unsigned long>*) libp->para[0].ref;
   const ProofSummedVar<unsigned long>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ProofSummedVar<long long> */
static int G__SFramePlugIns_Dict_654_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<long long>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<long long>((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ProofSummedVar<long long>((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<long long>((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ProofSummedVar<long long>((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<long long>[n];
       } else {
         p = new((void*) gvp) ProofSummedVar<long long>[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<long long>;
       } else {
         p = new((void*) gvp) ProofSummedVar<long long>;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlElongsPlonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_654_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ProofSummedVar<long long>*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_654_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ProofSummedVar<long long>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_654_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<long long>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_654_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ProofSummedVar<long long>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_654_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ProofSummedVar<long long>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_654_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProofSummedVar<long long>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_654_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<long long>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_654_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<long long>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_654_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<long long>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_654_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<long long>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFramePlugIns_Dict_654_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ProofSummedVar<long long>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ProofSummedVar<long long>(*(ProofSummedVar<long long>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlElongsPlonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ProofSummedVar<long long> G__TProofSummedVarlElongsPlonggR;
static int G__SFramePlugIns_Dict_654_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ProofSummedVar<long long>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ProofSummedVar<long long>*) (soff+(sizeof(ProofSummedVar<long long>)*i)))->~G__TProofSummedVarlElongsPlonggR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ProofSummedVar<long long>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ProofSummedVar<long long>*) (soff))->~G__TProofSummedVarlElongsPlonggR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFramePlugIns_Dict_654_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<long long>* dest = (ProofSummedVar<long long>*) G__getstructoffset();
   *dest = *(ProofSummedVar<long long>*) libp->para[0].ref;
   const ProofSummedVar<long long>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ProofSummedVar<unsigned long long> */
static int G__SFramePlugIns_Dict_655_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<unsigned long long>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<unsigned long long>((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ProofSummedVar<unsigned long long>((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<unsigned long long>((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ProofSummedVar<unsigned long long>((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<unsigned long long>[n];
       } else {
         p = new((void*) gvp) ProofSummedVar<unsigned long long>[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<unsigned long long>;
       } else {
         p = new((void*) gvp) ProofSummedVar<unsigned long long>;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPlongsPlonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_655_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ProofSummedVar<unsigned long long>*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_655_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ProofSummedVar<unsigned long long>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_655_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<unsigned long long>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_655_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ProofSummedVar<unsigned long long>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_655_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ProofSummedVar<unsigned long long>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_655_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProofSummedVar<unsigned long long>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_655_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<unsigned long long>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_655_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<unsigned long long>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_655_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<unsigned long long>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_655_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<unsigned long long>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFramePlugIns_Dict_655_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ProofSummedVar<unsigned long long>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ProofSummedVar<unsigned long long>(*(ProofSummedVar<unsigned long long>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPlongsPlonggR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ProofSummedVar<unsigned long long> G__TProofSummedVarlEunsignedsPlongsPlonggR;
static int G__SFramePlugIns_Dict_655_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ProofSummedVar<unsigned long long>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ProofSummedVar<unsigned long long>*) (soff+(sizeof(ProofSummedVar<unsigned long long>)*i)))->~G__TProofSummedVarlEunsignedsPlongsPlonggR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ProofSummedVar<unsigned long long>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ProofSummedVar<unsigned long long>*) (soff))->~G__TProofSummedVarlEunsignedsPlongsPlonggR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFramePlugIns_Dict_655_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<unsigned long long>* dest = (ProofSummedVar<unsigned long long>*) G__getstructoffset();
   *dest = *(ProofSummedVar<unsigned long long>*) libp->para[0].ref;
   const ProofSummedVar<unsigned long long>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ProofSummedVar<float> */
static int G__SFramePlugIns_Dict_656_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<float>((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ProofSummedVar<float>((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<float>((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ProofSummedVar<float>((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<float>[n];
       } else {
         p = new((void*) gvp) ProofSummedVar<float>[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<float>;
       } else {
         p = new((void*) gvp) ProofSummedVar<float>;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_656_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ProofSummedVar<float>*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_656_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ProofSummedVar<float>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_656_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<float>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_656_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ProofSummedVar<float>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_656_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ProofSummedVar<float>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_656_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProofSummedVar<float>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_656_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<float>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_656_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<float>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_656_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<float>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_656_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<float>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFramePlugIns_Dict_656_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ProofSummedVar<float>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ProofSummedVar<float>(*(ProofSummedVar<float>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ProofSummedVar<float> G__TProofSummedVarlEfloatgR;
static int G__SFramePlugIns_Dict_656_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ProofSummedVar<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ProofSummedVar<float>*) (soff+(sizeof(ProofSummedVar<float>)*i)))->~G__TProofSummedVarlEfloatgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ProofSummedVar<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ProofSummedVar<float>*) (soff))->~G__TProofSummedVarlEfloatgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFramePlugIns_Dict_656_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<float>* dest = (ProofSummedVar<float>*) G__getstructoffset();
   *dest = *(ProofSummedVar<float>*) libp->para[0].ref;
   const ProofSummedVar<float>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ProofSummedVar<double> */
static int G__SFramePlugIns_Dict_657_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<double>((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ProofSummedVar<double>((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<double>((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ProofSummedVar<double>((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<double>[n];
       } else {
         p = new((void*) gvp) ProofSummedVar<double>[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<double>;
       } else {
         p = new((void*) gvp) ProofSummedVar<double>;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_657_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ProofSummedVar<double>*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_657_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ProofSummedVar<double>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_657_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<double>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_657_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ProofSummedVar<double>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_657_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ProofSummedVar<double>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_657_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProofSummedVar<double>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_657_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<double>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_657_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<double>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_657_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<double>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_657_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<double>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFramePlugIns_Dict_657_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ProofSummedVar<double>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ProofSummedVar<double>(*(ProofSummedVar<double>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ProofSummedVar<double> G__TProofSummedVarlEdoublegR;
static int G__SFramePlugIns_Dict_657_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ProofSummedVar<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ProofSummedVar<double>*) (soff+(sizeof(ProofSummedVar<double>)*i)))->~G__TProofSummedVarlEdoublegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ProofSummedVar<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ProofSummedVar<double>*) (soff))->~G__TProofSummedVarlEdoublegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFramePlugIns_Dict_657_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<double>* dest = (ProofSummedVar<double>*) G__getstructoffset();
   *dest = *(ProofSummedVar<double>*) libp->para[0].ref;
   const ProofSummedVar<double>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ProofSummedVar<vector<short,allocator<short> > > */
static int G__SFramePlugIns_Dict_658_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<vector<short,allocator<short> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<vector<short,allocator<short> > >((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ProofSummedVar<vector<short,allocator<short> > >((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<vector<short,allocator<short> > >((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ProofSummedVar<vector<short,allocator<short> > >((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<vector<short,allocator<short> > >[n];
       } else {
         p = new((void*) gvp) ProofSummedVar<vector<short,allocator<short> > >[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<vector<short,allocator<short> > >;
       } else {
         p = new((void*) gvp) ProofSummedVar<vector<short,allocator<short> > >;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_658_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ProofSummedVar<vector<short,allocator<short> > >*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_658_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ProofSummedVar<vector<short,allocator<short> > >::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_658_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<short,allocator<short> > >::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_658_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ProofSummedVar<vector<short,allocator<short> > >::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_658_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ProofSummedVar<vector<short,allocator<short> > >::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_658_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProofSummedVar<vector<short,allocator<short> > >*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_658_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<short,allocator<short> > >::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_658_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<vector<short,allocator<short> > >::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_658_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<short,allocator<short> > >::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_658_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<vector<short,allocator<short> > >::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFramePlugIns_Dict_658_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ProofSummedVar<vector<short,allocator<short> > >* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ProofSummedVar<vector<short,allocator<short> > >(*(ProofSummedVar<vector<short,allocator<short> > >*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ProofSummedVar<vector<short,allocator<short> > > G__TProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR;
static int G__SFramePlugIns_Dict_658_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ProofSummedVar<vector<short,allocator<short> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ProofSummedVar<vector<short,allocator<short> > >*) (soff+(sizeof(ProofSummedVar<vector<short,allocator<short> > >)*i)))->~G__TProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ProofSummedVar<vector<short,allocator<short> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ProofSummedVar<vector<short,allocator<short> > >*) (soff))->~G__TProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFramePlugIns_Dict_658_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<vector<short,allocator<short> > >* dest = (ProofSummedVar<vector<short,allocator<short> > >*) G__getstructoffset();
   *dest = *(ProofSummedVar<vector<short,allocator<short> > >*) libp->para[0].ref;
   const ProofSummedVar<vector<short,allocator<short> > >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ProofSummedVar<vector<unsigned short,allocator<unsigned short> > > */
static int G__SFramePlugIns_Dict_659_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >[n];
       } else {
         p = new((void*) gvp) ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >;
       } else {
         p = new((void*) gvp) ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_659_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_659_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_659_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_659_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_659_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_659_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_659_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_659_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_659_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_659_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFramePlugIns_Dict_659_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >(*(ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ProofSummedVar<vector<unsigned short,allocator<unsigned short> > > G__TProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR;
static int G__SFramePlugIns_Dict_659_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >*) (soff+(sizeof(ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >)*i)))->~G__TProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >*) (soff))->~G__TProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFramePlugIns_Dict_659_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >* dest = (ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >*) G__getstructoffset();
   *dest = *(ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >*) libp->para[0].ref;
   const ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ProofSummedVar<vector<int,allocator<int> > > */
static int G__SFramePlugIns_Dict_660_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<vector<int,allocator<int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<vector<int,allocator<int> > >((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ProofSummedVar<vector<int,allocator<int> > >((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<vector<int,allocator<int> > >((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ProofSummedVar<vector<int,allocator<int> > >((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<vector<int,allocator<int> > >[n];
       } else {
         p = new((void*) gvp) ProofSummedVar<vector<int,allocator<int> > >[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<vector<int,allocator<int> > >;
       } else {
         p = new((void*) gvp) ProofSummedVar<vector<int,allocator<int> > >;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_660_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ProofSummedVar<vector<int,allocator<int> > >*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_660_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ProofSummedVar<vector<int,allocator<int> > >::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_660_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<int,allocator<int> > >::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_660_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ProofSummedVar<vector<int,allocator<int> > >::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_660_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ProofSummedVar<vector<int,allocator<int> > >::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_660_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProofSummedVar<vector<int,allocator<int> > >*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_660_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<int,allocator<int> > >::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_660_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<vector<int,allocator<int> > >::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_660_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<int,allocator<int> > >::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_660_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<vector<int,allocator<int> > >::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFramePlugIns_Dict_660_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ProofSummedVar<vector<int,allocator<int> > >* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ProofSummedVar<vector<int,allocator<int> > >(*(ProofSummedVar<vector<int,allocator<int> > >*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ProofSummedVar<vector<int,allocator<int> > > G__TProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR;
static int G__SFramePlugIns_Dict_660_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ProofSummedVar<vector<int,allocator<int> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ProofSummedVar<vector<int,allocator<int> > >*) (soff+(sizeof(ProofSummedVar<vector<int,allocator<int> > >)*i)))->~G__TProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ProofSummedVar<vector<int,allocator<int> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ProofSummedVar<vector<int,allocator<int> > >*) (soff))->~G__TProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFramePlugIns_Dict_660_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<vector<int,allocator<int> > >* dest = (ProofSummedVar<vector<int,allocator<int> > >*) G__getstructoffset();
   *dest = *(ProofSummedVar<vector<int,allocator<int> > >*) libp->para[0].ref;
   const ProofSummedVar<vector<int,allocator<int> > >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ProofSummedVar<vector<unsigned int,allocator<unsigned int> > > */
static int G__SFramePlugIns_Dict_661_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >[n];
       } else {
         p = new((void*) gvp) ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >;
       } else {
         p = new((void*) gvp) ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_661_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_661_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_661_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_661_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_661_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_661_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_661_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_661_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_661_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_661_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFramePlugIns_Dict_661_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >(*(ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ProofSummedVar<vector<unsigned int,allocator<unsigned int> > > G__TProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR;
static int G__SFramePlugIns_Dict_661_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >*) (soff+(sizeof(ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >)*i)))->~G__TProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >*) (soff))->~G__TProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFramePlugIns_Dict_661_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >* dest = (ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >*) G__getstructoffset();
   *dest = *(ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >*) libp->para[0].ref;
   const ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ProofSummedVar<vector<long,allocator<long> > > */
static int G__SFramePlugIns_Dict_662_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<vector<long,allocator<long> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<vector<long,allocator<long> > >((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ProofSummedVar<vector<long,allocator<long> > >((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<vector<long,allocator<long> > >((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ProofSummedVar<vector<long,allocator<long> > >((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<vector<long,allocator<long> > >[n];
       } else {
         p = new((void*) gvp) ProofSummedVar<vector<long,allocator<long> > >[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<vector<long,allocator<long> > >;
       } else {
         p = new((void*) gvp) ProofSummedVar<vector<long,allocator<long> > >;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_662_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ProofSummedVar<vector<long,allocator<long> > >*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_662_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ProofSummedVar<vector<long,allocator<long> > >::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_662_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<long,allocator<long> > >::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_662_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ProofSummedVar<vector<long,allocator<long> > >::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_662_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ProofSummedVar<vector<long,allocator<long> > >::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_662_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProofSummedVar<vector<long,allocator<long> > >*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_662_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<long,allocator<long> > >::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_662_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<vector<long,allocator<long> > >::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_662_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<long,allocator<long> > >::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_662_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<vector<long,allocator<long> > >::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFramePlugIns_Dict_662_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ProofSummedVar<vector<long,allocator<long> > >* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ProofSummedVar<vector<long,allocator<long> > >(*(ProofSummedVar<vector<long,allocator<long> > >*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ProofSummedVar<vector<long,allocator<long> > > G__TProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR;
static int G__SFramePlugIns_Dict_662_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ProofSummedVar<vector<long,allocator<long> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ProofSummedVar<vector<long,allocator<long> > >*) (soff+(sizeof(ProofSummedVar<vector<long,allocator<long> > >)*i)))->~G__TProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ProofSummedVar<vector<long,allocator<long> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ProofSummedVar<vector<long,allocator<long> > >*) (soff))->~G__TProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFramePlugIns_Dict_662_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<vector<long,allocator<long> > >* dest = (ProofSummedVar<vector<long,allocator<long> > >*) G__getstructoffset();
   *dest = *(ProofSummedVar<vector<long,allocator<long> > >*) libp->para[0].ref;
   const ProofSummedVar<vector<long,allocator<long> > >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ProofSummedVar<vector<unsigned long,allocator<unsigned long> > > */
static int G__SFramePlugIns_Dict_663_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >[n];
       } else {
         p = new((void*) gvp) ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >;
       } else {
         p = new((void*) gvp) ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_663_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_663_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_663_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_663_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_663_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_663_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_663_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_663_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_663_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_663_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFramePlugIns_Dict_663_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >(*(ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ProofSummedVar<vector<unsigned long,allocator<unsigned long> > > G__TProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR;
static int G__SFramePlugIns_Dict_663_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >*) (soff+(sizeof(ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >)*i)))->~G__TProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >*) (soff))->~G__TProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFramePlugIns_Dict_663_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >* dest = (ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >*) G__getstructoffset();
   *dest = *(ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >*) libp->para[0].ref;
   const ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ProofSummedVar<vector<long long,allocator<long long> > > */
static int G__SFramePlugIns_Dict_664_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<vector<long long,allocator<long long> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<vector<long long,allocator<long long> > >((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ProofSummedVar<vector<long long,allocator<long long> > >((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<vector<long long,allocator<long long> > >((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ProofSummedVar<vector<long long,allocator<long long> > >((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<vector<long long,allocator<long long> > >[n];
       } else {
         p = new((void*) gvp) ProofSummedVar<vector<long long,allocator<long long> > >[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<vector<long long,allocator<long long> > >;
       } else {
         p = new((void*) gvp) ProofSummedVar<vector<long long,allocator<long long> > >;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_664_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ProofSummedVar<vector<long long,allocator<long long> > >*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_664_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ProofSummedVar<vector<long long,allocator<long long> > >::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_664_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<long long,allocator<long long> > >::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_664_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ProofSummedVar<vector<long long,allocator<long long> > >::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_664_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ProofSummedVar<vector<long long,allocator<long long> > >::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_664_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProofSummedVar<vector<long long,allocator<long long> > >*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_664_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<long long,allocator<long long> > >::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_664_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<vector<long long,allocator<long long> > >::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_664_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<long long,allocator<long long> > >::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_664_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<vector<long long,allocator<long long> > >::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFramePlugIns_Dict_664_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ProofSummedVar<vector<long long,allocator<long long> > >* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ProofSummedVar<vector<long long,allocator<long long> > >(*(ProofSummedVar<vector<long long,allocator<long long> > >*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ProofSummedVar<vector<long long,allocator<long long> > > G__TProofSummedVarlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgR;
static int G__SFramePlugIns_Dict_664_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ProofSummedVar<vector<long long,allocator<long long> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ProofSummedVar<vector<long long,allocator<long long> > >*) (soff+(sizeof(ProofSummedVar<vector<long long,allocator<long long> > >)*i)))->~G__TProofSummedVarlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ProofSummedVar<vector<long long,allocator<long long> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ProofSummedVar<vector<long long,allocator<long long> > >*) (soff))->~G__TProofSummedVarlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFramePlugIns_Dict_664_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<vector<long long,allocator<long long> > >* dest = (ProofSummedVar<vector<long long,allocator<long long> > >*) G__getstructoffset();
   *dest = *(ProofSummedVar<vector<long long,allocator<long long> > >*) libp->para[0].ref;
   const ProofSummedVar<vector<long long,allocator<long long> > >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > > */
static int G__SFramePlugIns_Dict_665_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >[n];
       } else {
         p = new((void*) gvp) ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >;
       } else {
         p = new((void*) gvp) ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_665_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_665_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_665_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_665_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_665_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_665_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_665_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_665_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_665_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_665_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFramePlugIns_Dict_665_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >(*(ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > > G__TProofSummedVarlEvectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgRsPgR;
static int G__SFramePlugIns_Dict_665_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >*) (soff+(sizeof(ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >)*i)))->~G__TProofSummedVarlEvectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >*) (soff))->~G__TProofSummedVarlEvectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFramePlugIns_Dict_665_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >* dest = (ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >*) G__getstructoffset();
   *dest = *(ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >*) libp->para[0].ref;
   const ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ProofSummedVar<vector<float,allocator<float> > > */
static int G__SFramePlugIns_Dict_666_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<vector<float,allocator<float> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<vector<float,allocator<float> > >((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ProofSummedVar<vector<float,allocator<float> > >((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<vector<float,allocator<float> > >((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ProofSummedVar<vector<float,allocator<float> > >((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<vector<float,allocator<float> > >[n];
       } else {
         p = new((void*) gvp) ProofSummedVar<vector<float,allocator<float> > >[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<vector<float,allocator<float> > >;
       } else {
         p = new((void*) gvp) ProofSummedVar<vector<float,allocator<float> > >;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_666_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ProofSummedVar<vector<float,allocator<float> > >*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_666_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ProofSummedVar<vector<float,allocator<float> > >::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_666_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<float,allocator<float> > >::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_666_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ProofSummedVar<vector<float,allocator<float> > >::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_666_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ProofSummedVar<vector<float,allocator<float> > >::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_666_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProofSummedVar<vector<float,allocator<float> > >*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_666_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<float,allocator<float> > >::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_666_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<vector<float,allocator<float> > >::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_666_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<float,allocator<float> > >::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_666_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<vector<float,allocator<float> > >::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFramePlugIns_Dict_666_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ProofSummedVar<vector<float,allocator<float> > >* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ProofSummedVar<vector<float,allocator<float> > >(*(ProofSummedVar<vector<float,allocator<float> > >*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ProofSummedVar<vector<float,allocator<float> > > G__TProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR;
static int G__SFramePlugIns_Dict_666_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ProofSummedVar<vector<float,allocator<float> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ProofSummedVar<vector<float,allocator<float> > >*) (soff+(sizeof(ProofSummedVar<vector<float,allocator<float> > >)*i)))->~G__TProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ProofSummedVar<vector<float,allocator<float> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ProofSummedVar<vector<float,allocator<float> > >*) (soff))->~G__TProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFramePlugIns_Dict_666_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<vector<float,allocator<float> > >* dest = (ProofSummedVar<vector<float,allocator<float> > >*) G__getstructoffset();
   *dest = *(ProofSummedVar<vector<float,allocator<float> > >*) libp->para[0].ref;
   const ProofSummedVar<vector<float,allocator<float> > >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ProofSummedVar<vector<double,allocator<double> > > */
static int G__SFramePlugIns_Dict_667_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<vector<double,allocator<double> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<vector<double,allocator<double> > >((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ProofSummedVar<vector<double,allocator<double> > >((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<vector<double,allocator<double> > >((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ProofSummedVar<vector<double,allocator<double> > >((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<vector<double,allocator<double> > >[n];
       } else {
         p = new((void*) gvp) ProofSummedVar<vector<double,allocator<double> > >[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<vector<double,allocator<double> > >;
       } else {
         p = new((void*) gvp) ProofSummedVar<vector<double,allocator<double> > >;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_667_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ProofSummedVar<vector<double,allocator<double> > >*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_667_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ProofSummedVar<vector<double,allocator<double> > >::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_667_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<double,allocator<double> > >::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_667_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ProofSummedVar<vector<double,allocator<double> > >::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_667_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ProofSummedVar<vector<double,allocator<double> > >::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_667_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProofSummedVar<vector<double,allocator<double> > >*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_667_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<double,allocator<double> > >::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_667_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<vector<double,allocator<double> > >::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_667_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<vector<double,allocator<double> > >::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_667_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<vector<double,allocator<double> > >::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFramePlugIns_Dict_667_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ProofSummedVar<vector<double,allocator<double> > >* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ProofSummedVar<vector<double,allocator<double> > >(*(ProofSummedVar<vector<double,allocator<double> > >*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ProofSummedVar<vector<double,allocator<double> > > G__TProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR;
static int G__SFramePlugIns_Dict_667_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ProofSummedVar<vector<double,allocator<double> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ProofSummedVar<vector<double,allocator<double> > >*) (soff+(sizeof(ProofSummedVar<vector<double,allocator<double> > >)*i)))->~G__TProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ProofSummedVar<vector<double,allocator<double> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ProofSummedVar<vector<double,allocator<double> > >*) (soff))->~G__TProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFramePlugIns_Dict_667_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<vector<double,allocator<double> > >* dest = (ProofSummedVar<vector<double,allocator<double> > >*) G__getstructoffset();
   *dest = *(ProofSummedVar<vector<double,allocator<double> > >*) libp->para[0].ref;
   const ProofSummedVar<vector<double,allocator<double> > >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<string,unsigned int> */
static int G__SFramePlugIns_Dict_668_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<string,unsigned int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<string,unsigned int>[n];
     } else {
       p = new((void*) gvp) pair<string,unsigned int>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<string,unsigned int>;
     } else {
       p = new((void*) gvp) pair<string,unsigned int>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_pairlEstringcOunsignedsPintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_668_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<string,unsigned int>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<string,unsigned int>(*(string*) libp->para[0].ref, *(unsigned int*) G__UIntref(&libp->para[1]));
   } else {
     p = new((void*) gvp) pair<string,unsigned int>(*(string*) libp->para[0].ref, *(unsigned int*) G__UIntref(&libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_pairlEstringcOunsignedsPintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFramePlugIns_Dict_668_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<string,unsigned int>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<string,unsigned int>(*(pair<string,unsigned int>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_pairlEstringcOunsignedsPintgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<string,unsigned int> G__TpairlEstringcOunsignedsPintgR;
static int G__SFramePlugIns_Dict_668_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<string,unsigned int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<string,unsigned int>*) (soff+(sizeof(pair<string,unsigned int>)*i)))->~G__TpairlEstringcOunsignedsPintgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<string,unsigned int>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<string,unsigned int>*) (soff))->~G__TpairlEstringcOunsignedsPintgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > */
static int G__SFramePlugIns_Dict_671_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >[n];
     } else {
       p = new((void*) gvp) map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >;
     } else {
       p = new((void*) gvp) map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_671_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >(*((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator*) G__int(libp->para[0])), *((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >(*((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator*) G__int(libp->para[0])), *((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_671_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >(*((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >(*((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_671_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >(*(map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >(*(map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_671_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >& obj = ((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) G__getstructoffset())->operator=(*(map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_671_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator* pobj;
         map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator xobj = ((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) G__getstructoffset())->begin();
         pobj = new map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_671_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator* pobj;
         map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator xobj = ((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) G__getstructoffset())->end();
         pobj = new map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_671_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::reverse_iterator* pobj;
         map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::reverse_iterator xobj = ((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) G__getstructoffset())->rbegin();
         pobj = new map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_671_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::reverse_iterator* pobj;
         map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::reverse_iterator xobj = ((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) G__getstructoffset())->rend();
         pobj = new map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_671_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_671_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_671_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_671_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const unsigned int& obj = ((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) G__getstructoffset())->operator[](*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         G__letint(result7, 'h', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_671_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator,bool>* pobj;
         pair<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator,bool> xobj = ((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) G__getstructoffset())->insert(*(map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_671_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator* pobj;
         map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator xobj = ((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) G__getstructoffset())->insert(*((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator*) G__int(libp->para[0])), *(map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::value_type*) libp->para[1].ref);
         pobj = new map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_671_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) G__getstructoffset())->insert(*((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator*) G__int(libp->para[0])), *((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_671_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) G__getstructoffset())->insert(*((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_671_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) G__getstructoffset())->erase(*((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_671_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) G__getstructoffset())->erase(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_671_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) G__getstructoffset())->erase(*((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator*) G__int(libp->para[0])), *((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_671_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) G__getstructoffset())->swap(*(map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_671_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_671_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator* pobj;
         map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator xobj = ((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) G__getstructoffset())->find(*(string*) libp->para[0].ref);
         pobj = new map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_671_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) G__getstructoffset())->count(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_671_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator* pobj;
         map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator xobj = ((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) G__getstructoffset())->lower_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_671_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator* pobj;
         map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator xobj = ((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) G__getstructoffset())->upper_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > G__TmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR;
static int G__SFramePlugIns_Dict_671_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) (soff+(sizeof(map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >)*i)))->~G__TmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*) (soff))->~G__TmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > > */
static int G__SFramePlugIns_Dict_675_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >[n];
       } else {
         p = new((void*) gvp) ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >;
       } else {
         p = new((void*) gvp) ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_675_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_675_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_675_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_675_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_675_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_675_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_675_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_675_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_675_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_675_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFramePlugIns_Dict_675_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >(*(ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > > G__TProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR;
static int G__SFramePlugIns_Dict_675_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >*) (soff+(sizeof(ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >)*i)))->~G__TProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >*) (soff))->~G__TProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFramePlugIns_Dict_675_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >* dest = (ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >*) G__getstructoffset();
   *dest = *(ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >*) libp->para[0].ref;
   const ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > > */
static int G__SFramePlugIns_Dict_676_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >[n];
       } else {
         p = new((void*) gvp) ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >;
       } else {
         p = new((void*) gvp) ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_676_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_676_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_676_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_676_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_676_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_676_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_676_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_676_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_676_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_676_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFramePlugIns_Dict_676_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >(*(ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > > G__TProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR;
static int G__SFramePlugIns_Dict_676_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >*) (soff+(sizeof(ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >)*i)))->~G__TProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >*) (soff))->~G__TProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFramePlugIns_Dict_676_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >* dest = (ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >*) G__getstructoffset();
   *dest = *(ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >*) libp->para[0].ref;
   const ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > > */
static int G__SFramePlugIns_Dict_677_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >[n];
       } else {
         p = new((void*) gvp) ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >;
       } else {
         p = new((void*) gvp) ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_677_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_677_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_677_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_677_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_677_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_677_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_677_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_677_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_677_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_677_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFramePlugIns_Dict_677_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >(*(ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > > G__TProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR;
static int G__SFramePlugIns_Dict_677_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >*) (soff+(sizeof(ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >)*i)))->~G__TProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >*) (soff))->~G__TProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFramePlugIns_Dict_677_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >* dest = (ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >*) G__getstructoffset();
   *dest = *(ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >*) libp->para[0].ref;
   const ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > > */
static int G__SFramePlugIns_Dict_678_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >[n];
       } else {
         p = new((void*) gvp) ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >;
       } else {
         p = new((void*) gvp) ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_678_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_678_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_678_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_678_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_678_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_678_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_678_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_678_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_678_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFramePlugIns_Dict_678_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFramePlugIns_Dict_678_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >(*(ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > > G__TProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR;
static int G__SFramePlugIns_Dict_678_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >*) (soff+(sizeof(ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >)*i)))->~G__TProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >*) (soff))->~G__TProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFramePlugIns_Dict_678_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >* dest = (ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >*) G__getstructoffset();
   *dest = *(ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >*) libp->para[0].ref;
   const ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* SH1<float> */

/* SH1<double> */

/* SH1<int> */

/* SParticle */

/* vector<SParticle,allocator<SParticle> > */

/* ProofSummedVar<short> */

/* ProofSummedVar<unsigned short> */

/* ProofSummedVar<int> */

/* ProofSummedVar<unsigned int> */

/* ProofSummedVar<long> */

/* ProofSummedVar<unsigned long> */

/* ProofSummedVar<long long> */

/* ProofSummedVar<unsigned long long> */

/* ProofSummedVar<float> */

/* ProofSummedVar<double> */

/* ProofSummedVar<vector<short,allocator<short> > > */

/* ProofSummedVar<vector<unsigned short,allocator<unsigned short> > > */

/* ProofSummedVar<vector<int,allocator<int> > > */

/* ProofSummedVar<vector<unsigned int,allocator<unsigned int> > > */

/* ProofSummedVar<vector<long,allocator<long> > > */

/* ProofSummedVar<vector<unsigned long,allocator<unsigned long> > > */

/* ProofSummedVar<vector<long long,allocator<long long> > > */

/* ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > > */

/* ProofSummedVar<vector<float,allocator<float> > > */

/* ProofSummedVar<vector<double,allocator<double> > > */

/* pair<string,unsigned int> */

/* map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > */

/* ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > > */

/* ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > > */

/* ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > > */

/* ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > > */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncSFramePlugIns_Dict {
 public:
  G__Sizep2memfuncSFramePlugIns_Dict(): p(&G__Sizep2memfuncSFramePlugIns_Dict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncSFramePlugIns_Dict::*p)();
};

size_t G__get_sizep2memfuncSFramePlugIns_Dict()
{
  G__Sizep2memfuncSFramePlugIns_Dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceSFramePlugIns_Dict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEfloatgR))) {
     SH1<float> *G__Lderived;
     G__Lderived=(SH1<float>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEfloatgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEfloatgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEdoublegR))) {
     SH1<double> *G__Lderived;
     G__Lderived=(SH1<double>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEdoublegR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEdoublegR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEintgR))) {
     SH1<int> *G__Lderived;
     G__Lderived=(SH1<int>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEintgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEintgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SParticle))) {
     SParticle *G__Lderived;
     G__Lderived=(SParticle*)0x1000;
     {
       ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<Double32_t> > *G__Lpbase=(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<Double32_t> >*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SParticle),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPtEtaPhiE4DlEDouble32_tgRsPgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SParticle),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEshortgR))) {
     ProofSummedVar<short> *G__Lderived;
     G__Lderived=(ProofSummedVar<short>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEshortgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEshortgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPshortgR))) {
     ProofSummedVar<unsigned short> *G__Lderived;
     G__Lderived=(ProofSummedVar<unsigned short>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPshortgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPshortgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEintgR))) {
     ProofSummedVar<int> *G__Lderived;
     G__Lderived=(ProofSummedVar<int>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEintgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEintgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPintgR))) {
     ProofSummedVar<unsigned int> *G__Lderived;
     G__Lderived=(ProofSummedVar<unsigned int>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPintgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPintgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlElonggR))) {
     ProofSummedVar<long> *G__Lderived;
     G__Lderived=(ProofSummedVar<long>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlElonggR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlElonggR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPlonggR))) {
     ProofSummedVar<unsigned long> *G__Lderived;
     G__Lderived=(ProofSummedVar<unsigned long>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPlonggR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPlonggR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlElongsPlonggR))) {
     ProofSummedVar<long long> *G__Lderived;
     G__Lderived=(ProofSummedVar<long long>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlElongsPlonggR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlElongsPlonggR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPlongsPlonggR))) {
     ProofSummedVar<unsigned long long> *G__Lderived;
     G__Lderived=(ProofSummedVar<unsigned long long>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPlongsPlonggR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPlongsPlonggR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEfloatgR))) {
     ProofSummedVar<float> *G__Lderived;
     G__Lderived=(ProofSummedVar<float>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEfloatgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEfloatgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEdoublegR))) {
     ProofSummedVar<double> *G__Lderived;
     G__Lderived=(ProofSummedVar<double>*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEdoublegR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEdoublegR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR))) {
     ProofSummedVar<vector<short,allocator<short> > > *G__Lderived;
     G__Lderived=(ProofSummedVar<vector<short,allocator<short> > >*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR))) {
     ProofSummedVar<vector<unsigned short,allocator<unsigned short> > > *G__Lderived;
     G__Lderived=(ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR))) {
     ProofSummedVar<vector<int,allocator<int> > > *G__Lderived;
     G__Lderived=(ProofSummedVar<vector<int,allocator<int> > >*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR))) {
     ProofSummedVar<vector<unsigned int,allocator<unsigned int> > > *G__Lderived;
     G__Lderived=(ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR))) {
     ProofSummedVar<vector<long,allocator<long> > > *G__Lderived;
     G__Lderived=(ProofSummedVar<vector<long,allocator<long> > >*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR))) {
     ProofSummedVar<vector<unsigned long,allocator<unsigned long> > > *G__Lderived;
     G__Lderived=(ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgR))) {
     ProofSummedVar<vector<long long,allocator<long long> > > *G__Lderived;
     G__Lderived=(ProofSummedVar<vector<long long,allocator<long long> > >*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgRsPgR))) {
     ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > > *G__Lderived;
     G__Lderived=(ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgRsPgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgRsPgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR))) {
     ProofSummedVar<vector<float,allocator<float> > > *G__Lderived;
     G__Lderived=(ProofSummedVar<vector<float,allocator<float> > >*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR))) {
     ProofSummedVar<vector<double,allocator<double> > > *G__Lderived;
     G__Lderived=(ProofSummedVar<vector<double,allocator<double> > >*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR))) {
     ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > > *G__Lderived;
     G__Lderived=(ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR))) {
     ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > > *G__Lderived;
     G__Lderived=(ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR))) {
     ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > > *G__Lderived;
     G__Lderived=(ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR))) {
     ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > > *G__Lderived;
     G__Lderived=(ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR),G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableSFramePlugIns_Dict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Double32_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes in memory, written as a 4 bytes float",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("SH1<Float_t>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("SH1<Double_t>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("SH1<Int_t>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Cartesian3D<Scalar>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ROOTcLcLMathcLcLCartesian3DlEdoublegR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPtEtaPhiE4DlEDouble32_tgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Cartesian3D",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ROOTcLcLMathcLcLCartesian3DlEdoublegR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPtEtaPhiE4DlEDouble32_tgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("::ROOT::Math::DisplacementVector3D<Cartesian3D<Scalar> >",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ROOTcLcLMathcLcLDisplacementVector3DlEROOTcLcLMathcLcLCartesian3DlEdoublegRcOROOTcLcLMathcLcLDefaultCoordinateSystemTaggR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPtEtaPhiE4DlEDouble32_tgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("::ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double> >",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ROOTcLcLMathcLcLDisplacementVector3DlEROOTcLcLMathcLcLCartesian3DlEdoublegRcOROOTcLcLMathcLcLDefaultCoordinateSystemTaggR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPtEtaPhiE4DlEDouble32_tgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("DisplacementVector3D<Cartesian3D<Scalar> >",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ROOTcLcLMathcLcLDisplacementVector3DlEROOTcLcLMathcLcLCartesian3DlEdoublegRcOROOTcLcLMathcLcLDefaultCoordinateSystemTaggR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPtEtaPhiE4DlEDouble32_tgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("DisplacementVector3D<ROOT::Math::Cartesian3D<double> >",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ROOTcLcLMathcLcLDisplacementVector3DlEROOTcLcLMathcLcLCartesian3DlEdoublegRcOROOTcLcLMathcLcLDefaultCoordinateSystemTaggR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPtEtaPhiE4DlEDouble32_tgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<SMsgType,std::string>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplESMsgTypecOstringcOlesslESMsgTypegRcOallocatorlEpairlEconstsPSMsgTypecOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<SMsgType,string>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplESMsgTypecOstringcOlesslESMsgTypegRcOallocatorlEpairlEconstsPSMsgTypecOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<SMsgType,string,less<SMsgType> >",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplESMsgTypecOstringcOlesslESMsgTypegRcOallocatorlEpairlEconstsPSMsgTypecOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TTree*>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlETTreemUcOallocatorlETTreemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlETTreemUcOallocatorlETTreemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlETTreemUcOallocatorlETTreemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlETTreemUcOallocatorlETTreemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlETTreemUcOallocatorlETTreemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TBranch*>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlETBranchmUcOallocatorlETBranchmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlETBranchmUcOallocatorlETBranchmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlETBranchmUcOallocatorlETBranchmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlETBranchmUcOallocatorlETBranchmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlETBranchmUcOallocatorlETBranchmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<TObject*>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_listlETObjectmUcOallocatorlETObjectmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SGeneratorCut>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SFile>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESFilecOallocatorlESFilegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESFilecOallocatorlESFilegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESFilecOallocatorlESFilegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESFilecOallocatorlESFilegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESFilecOallocatorlESFilegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<STree>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESTreecOallocatorlESTreegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESTreecOallocatorlESTreegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESTreecOallocatorlESTreegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESTreecOallocatorlESTreegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESTreecOallocatorlESTreegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,std::vector<STree> >",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<STree,allocator<STree> > >",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<STree,allocator<STree> >,less<int> >",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SDataSet>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESDataSetcOallocatorlESDataSetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESDataSetcOallocatorlESDataSetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<std::string,std::string>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_pairlEstringcOstringgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<string,std::string>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_pairlEstringcOstringgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<std::string,std::string> >",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<string,std::string> >",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<string,string> >",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SInputData>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESInputDatacOallocatorlESInputDatagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESInputDatacOallocatorlESInputDatagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SParticle>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SParticle),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SParticle),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SParticle),256,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SParticle),1,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SParticle),257,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESParticlecOallocatorlESParticlegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESParticlecOallocatorlESParticlegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESParticlecOallocatorlESParticlegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESParticlecOallocatorlESParticlegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ProofSummedVar<Short_t>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEshortgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ProofSummedVar<UShort_t>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPshortgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ProofSummedVar<Int_t>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ProofSummedVar<UInt_t>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ProofSummedVar<Long_t>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlElonggR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ProofSummedVar<ULong_t>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPlonggR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ProofSummedVar<Long64_t>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlElongsPlonggR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ProofSummedVar<ULong64_t>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPlongsPlonggR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ProofSummedVar<Float_t>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ProofSummedVar<Double_t>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ProofSummedVar<vector<short> >",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ProofSummedVar<vector<unsigned short> >",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ProofSummedVar<vector<int> >",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ProofSummedVar<vector<unsigned int> >",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ProofSummedVar<vector<long> >",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ProofSummedVar<vector<unsigned long> >",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ProofSummedVar<vector<long long> >",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ProofSummedVar<vector<unsigned long long> >",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ProofSummedVar<vector<float> >",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ProofSummedVar<vector<double> >",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,unsigned int>",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_string),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",104,-1,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_pairlEstringcOunsignedsPintgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_lesslEstringgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_allocatorlEpairlEconstsPstringcOunsignedsPintgRsPgR),0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,unsigned int,less<string> >",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ProofSummedVar<map<string,int> >",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ProofSummedVar<map<string,unsigned int> >",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ProofSummedVar<map<string,float> >",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ProofSummedVar<map<string,double> >",117,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* SH1<float> */
static void G__setup_memvarSH1lEfloatgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEfloatgR));
   { SH1<float> *p; p=(SH1<float>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("Int_t"),-1,4,"m_arraySize=",0,(char*)NULL);
   G__memvar_setup((void*)0,70,0,0,-1,-1,-1,4,"m_content=",0,"[m_arraySize]");
   G__memvar_setup((void*)0,70,0,0,-1,-1,-1,4,"m_errors=",0,"[m_arraySize]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_entries=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("Int_t"),-1,4,"m_bins=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Double_t"),-1,4,"m_low=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Double_t"),-1,4,"m_high=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,1,-1,G__defined_typename("Bool_t"),-1,4,"m_computeErrors=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SH1<double> */
static void G__setup_memvarSH1lEdoublegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEdoublegR));
   { SH1<double> *p; p=(SH1<double>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("Int_t"),-1,4,"m_arraySize=",0,(char*)NULL);
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"m_content=",0,"[m_arraySize]");
   G__memvar_setup((void*)0,68,0,0,-1,-1,-1,4,"m_errors=",0,"[m_arraySize]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_entries=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("Int_t"),-1,4,"m_bins=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Double_t"),-1,4,"m_low=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Double_t"),-1,4,"m_high=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,1,-1,G__defined_typename("Bool_t"),-1,4,"m_computeErrors=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SH1<int> */
static void G__setup_memvarSH1lEintgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEintgR));
   { SH1<int> *p; p=(SH1<int>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("Int_t"),-1,4,"m_arraySize=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,-1,-1,4,"m_content=",0,"[m_arraySize]");
   G__memvar_setup((void*)0,73,0,0,-1,-1,-1,4,"m_errors=",0,"[m_arraySize]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_entries=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("Int_t"),-1,4,"m_bins=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Double_t"),-1,4,"m_low=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Double_t"),-1,4,"m_high=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,1,-1,G__defined_typename("Bool_t"),-1,4,"m_computeErrors=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SParticle */
static void G__setup_memvarSParticle(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SParticle));
   { SParticle *p; p=(SParticle*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<SParticle,allocator<SParticle> > */
static void G__setup_memvarvectorlESParticlecOallocatorlESParticlegRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgR));
   { vector<SParticle,allocator<SParticle> > *p; p=(vector<SParticle,allocator<SParticle> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* ProofSummedVar<short> */
static void G__setup_memvarProofSummedVarlEshortgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEshortgR));
   { ProofSummedVar<short> *p; p=(ProofSummedVar<short>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_member)-(long)(p)),115,0,0,-1,-1,-1,1,"m_member=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ProofSummedVar<unsigned short> */
static void G__setup_memvarProofSummedVarlEunsignedsPshortgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPshortgR));
   { ProofSummedVar<unsigned short> *p; p=(ProofSummedVar<unsigned short>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_member)-(long)(p)),114,0,0,-1,-1,-1,1,"m_member=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ProofSummedVar<int> */
static void G__setup_memvarProofSummedVarlEintgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEintgR));
   { ProofSummedVar<int> *p; p=(ProofSummedVar<int>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_member)-(long)(p)),105,0,0,-1,-1,-1,1,"m_member=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ProofSummedVar<unsigned int> */
static void G__setup_memvarProofSummedVarlEunsignedsPintgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPintgR));
   { ProofSummedVar<unsigned int> *p; p=(ProofSummedVar<unsigned int>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_member)-(long)(p)),104,0,0,-1,-1,-1,1,"m_member=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ProofSummedVar<long> */
static void G__setup_memvarProofSummedVarlElonggR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlElonggR));
   { ProofSummedVar<long> *p; p=(ProofSummedVar<long>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_member)-(long)(p)),108,0,0,-1,-1,-1,1,"m_member=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ProofSummedVar<unsigned long> */
static void G__setup_memvarProofSummedVarlEunsignedsPlonggR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPlonggR));
   { ProofSummedVar<unsigned long> *p; p=(ProofSummedVar<unsigned long>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_member)-(long)(p)),107,0,0,-1,-1,-1,1,"m_member=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ProofSummedVar<long long> */
static void G__setup_memvarProofSummedVarlElongsPlonggR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlElongsPlonggR));
   { ProofSummedVar<long long> *p; p=(ProofSummedVar<long long>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_member)-(long)(p)),110,0,0,-1,-1,-1,1,"m_member=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ProofSummedVar<unsigned long long> */
static void G__setup_memvarProofSummedVarlEunsignedsPlongsPlonggR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPlongsPlonggR));
   { ProofSummedVar<unsigned long long> *p; p=(ProofSummedVar<unsigned long long>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_member)-(long)(p)),109,0,0,-1,-1,-1,1,"m_member=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ProofSummedVar<float> */
static void G__setup_memvarProofSummedVarlEfloatgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEfloatgR));
   { ProofSummedVar<float> *p; p=(ProofSummedVar<float>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_member)-(long)(p)),102,0,0,-1,-1,-1,1,"m_member=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ProofSummedVar<double> */
static void G__setup_memvarProofSummedVarlEdoublegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEdoublegR));
   { ProofSummedVar<double> *p; p=(ProofSummedVar<double>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_member)-(long)(p)),100,0,0,-1,-1,-1,1,"m_member=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ProofSummedVar<vector<short,allocator<short> > > */
static void G__setup_memvarProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR));
   { ProofSummedVar<vector<short,allocator<short> > > *p; p=(ProofSummedVar<vector<short,allocator<short> > >*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_member)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlEshortcOallocatorlEshortgRsPgR),-1,-1,1,"m_member=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ProofSummedVar<vector<unsigned short,allocator<unsigned short> > > */
static void G__setup_memvarProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR));
   { ProofSummedVar<vector<unsigned short,allocator<unsigned short> > > *p; p=(ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_member)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR),-1,-1,1,"m_member=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ProofSummedVar<vector<int,allocator<int> > > */
static void G__setup_memvarProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR));
   { ProofSummedVar<vector<int,allocator<int> > > *p; p=(ProofSummedVar<vector<int,allocator<int> > >*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_member)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlEintcOallocatorlEintgRsPgR),-1,-1,1,"m_member=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ProofSummedVar<vector<unsigned int,allocator<unsigned int> > > */
static void G__setup_memvarProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR));
   { ProofSummedVar<vector<unsigned int,allocator<unsigned int> > > *p; p=(ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_member)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),-1,-1,1,"m_member=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ProofSummedVar<vector<long,allocator<long> > > */
static void G__setup_memvarProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR));
   { ProofSummedVar<vector<long,allocator<long> > > *p; p=(ProofSummedVar<vector<long,allocator<long> > >*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_member)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlElongcOallocatorlElonggRsPgR),-1,-1,1,"m_member=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ProofSummedVar<vector<unsigned long,allocator<unsigned long> > > */
static void G__setup_memvarProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR));
   { ProofSummedVar<vector<unsigned long,allocator<unsigned long> > > *p; p=(ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_member)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgR),-1,-1,1,"m_member=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ProofSummedVar<vector<long long,allocator<long long> > > */
static void G__setup_memvarProofSummedVarlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgR));
   { ProofSummedVar<vector<long long,allocator<long long> > > *p; p=(ProofSummedVar<vector<long long,allocator<long long> > >*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_member)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlElongsPlongcOallocatorlElongsPlonggRsPgR),-1,-1,1,"m_member=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > > */
static void G__setup_memvarProofSummedVarlEvectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgRsPgR));
   { ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > > *p; p=(ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_member)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR),-1,-1,1,"m_member=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ProofSummedVar<vector<float,allocator<float> > > */
static void G__setup_memvarProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR));
   { ProofSummedVar<vector<float,allocator<float> > > *p; p=(ProofSummedVar<vector<float,allocator<float> > >*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_member)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),-1,-1,1,"m_member=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ProofSummedVar<vector<double,allocator<double> > > */
static void G__setup_memvarProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR));
   { ProofSummedVar<vector<double,allocator<double> > > *p; p=(ProofSummedVar<vector<double,allocator<double> > >*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_member)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),-1,-1,1,"m_member=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* pair<string,unsigned int> */
static void G__setup_memvarpairlEstringcOunsignedsPintgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_pairlEstringcOunsignedsPintgR));
   { pair<string,unsigned int> *p; p=(pair<string,unsigned int>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_string),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),104,0,0,-1,-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > */
static void G__setup_memvarmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR));
   { map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > *p; p=(map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > > */
static void G__setup_memvarProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR));
   { ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > > *p; p=(ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_member)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),-1,-1,1,"m_member=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > > */
static void G__setup_memvarProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR));
   { ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > > *p; p=(ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_member)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),-1,-1,1,"m_member=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > > */
static void G__setup_memvarProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR));
   { ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > > *p; p=(ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_member)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR),-1,-1,1,"m_member=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > > */
static void G__setup_memvarProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR));
   { ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > > *p; p=(ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_member)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR),-1,-1,1,"m_member=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarSFramePlugIns_Dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncSH1lEfloatgR(void) {
   /* SH1<float> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEfloatgR));
   G__memfunc_setup("SH1<float>",860,G__SFramePlugIns_Dict_205_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEfloatgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SH1<float>",860,G__SFramePlugIns_Dict_205_0_2, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEfloatgR), -1, 0, 6, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"i - 'Int_t' 0 - bins d - 'Double_t' 0 - low "
"d - 'Double_t' 0 - high g - 'Bool_t' 0 'kTRUE' computeErrors", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__SFramePlugIns_Dict_205_0_3, 121, -1, -1, 0, 2, 1, 1, 32, 
"d - 'Double_t' 0 - pos f - - 0 '1' weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNBins",762,G__SFramePlugIns_Dict_205_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindBin",666,G__SFramePlugIns_Dict_205_0_5, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBinContent",1300,G__SFramePlugIns_Dict_205_0_6, 102, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - bin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBinContent",1312,G__SFramePlugIns_Dict_205_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - bin f - - 0 - content", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBinError",1091,G__SFramePlugIns_Dict_205_0_8, 102, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - bin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBinError",1103,G__SFramePlugIns_Dict_205_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - bin f - - 0 - error", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntries",1018,G__SFramePlugIns_Dict_205_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEntries",1030,G__SFramePlugIns_Dict_205_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - entries", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ToHist",603,G__SFramePlugIns_Dict_205_0_12, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TH1), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFramePlugIns_Dict_205_0_13, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - coll", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Write",523,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 8, 
"C - - 10 '0' name i - 'Int_t' 0 '0' option "
"i - 'Int_t' 0 '0' bufsize", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Write",523,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"C - - 10 '0' name i - 'Int_t' 0 '0' option "
"i - 'Int_t' 0 '0' bufsize", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFramePlugIns_Dict_205_0_16, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SH1<float>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFramePlugIns_Dict_205_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SH1<float>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFramePlugIns_Dict_205_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SH1<float>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFramePlugIns_Dict_205_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SH1<float>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFramePlugIns_Dict_205_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFramePlugIns_Dict_205_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SH1<float>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFramePlugIns_Dict_205_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SH1<float>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFramePlugIns_Dict_205_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SH1<float>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFramePlugIns_Dict_205_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SH1<float>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SH1<float>", 860, G__SFramePlugIns_Dict_205_0_28, (int) ('i'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEfloatgR), -1, 0, 1, 1, 1, 0, "u 'SH1<float>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SH1<float>", 986, G__SFramePlugIns_Dict_205_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSH1lEdoublegR(void) {
   /* SH1<double> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEdoublegR));
   G__memfunc_setup("SH1<double>",961,G__SFramePlugIns_Dict_206_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEdoublegR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SH1<double>",961,G__SFramePlugIns_Dict_206_0_2, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEdoublegR), -1, 0, 6, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"i - 'Int_t' 0 - bins d - 'Double_t' 0 - low "
"d - 'Double_t' 0 - high g - 'Bool_t' 0 'kTRUE' computeErrors", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__SFramePlugIns_Dict_206_0_3, 121, -1, -1, 0, 2, 1, 1, 32, 
"d - 'Double_t' 0 - pos d - - 0 '1' weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNBins",762,G__SFramePlugIns_Dict_206_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindBin",666,G__SFramePlugIns_Dict_206_0_5, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBinContent",1300,G__SFramePlugIns_Dict_206_0_6, 100, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - bin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBinContent",1312,G__SFramePlugIns_Dict_206_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - bin d - - 0 - content", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBinError",1091,G__SFramePlugIns_Dict_206_0_8, 100, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - bin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBinError",1103,G__SFramePlugIns_Dict_206_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - bin d - - 0 - error", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntries",1018,G__SFramePlugIns_Dict_206_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEntries",1030,G__SFramePlugIns_Dict_206_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - entries", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ToHist",603,G__SFramePlugIns_Dict_206_0_12, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TH1), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFramePlugIns_Dict_206_0_13, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - coll", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Write",523,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 8, 
"C - - 10 '0' name i - 'Int_t' 0 '0' option "
"i - 'Int_t' 0 '0' bufsize", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Write",523,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"C - - 10 '0' name i - 'Int_t' 0 '0' option "
"i - 'Int_t' 0 '0' bufsize", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFramePlugIns_Dict_206_0_16, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SH1<double>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFramePlugIns_Dict_206_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SH1<double>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFramePlugIns_Dict_206_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SH1<double>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFramePlugIns_Dict_206_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SH1<double>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFramePlugIns_Dict_206_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFramePlugIns_Dict_206_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SH1<double>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFramePlugIns_Dict_206_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SH1<double>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFramePlugIns_Dict_206_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SH1<double>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFramePlugIns_Dict_206_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SH1<double>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SH1<double>", 961, G__SFramePlugIns_Dict_206_0_28, (int) ('i'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEdoublegR), -1, 0, 1, 1, 1, 0, "u 'SH1<double>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SH1<double>", 1087, G__SFramePlugIns_Dict_206_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSH1lEintgR(void) {
   /* SH1<int> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEintgR));
   G__memfunc_setup("SH1<int>",657,G__SFramePlugIns_Dict_207_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEintgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SH1<int>",657,G__SFramePlugIns_Dict_207_0_2, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEintgR), -1, 0, 6, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"i - 'Int_t' 0 - bins d - 'Double_t' 0 - low "
"d - 'Double_t' 0 - high g - 'Bool_t' 0 'kTRUE' computeErrors", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fill",391,G__SFramePlugIns_Dict_207_0_3, 121, -1, -1, 0, 2, 1, 1, 32, 
"d - 'Double_t' 0 - pos i - - 0 '1' weight", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNBins",762,G__SFramePlugIns_Dict_207_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindBin",666,G__SFramePlugIns_Dict_207_0_5, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBinContent",1300,G__SFramePlugIns_Dict_207_0_6, 105, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - bin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBinContent",1312,G__SFramePlugIns_Dict_207_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - bin i - - 0 - content", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBinError",1091,G__SFramePlugIns_Dict_207_0_8, 105, -1, -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - bin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBinError",1103,G__SFramePlugIns_Dict_207_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - bin i - - 0 - error", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntries",1018,G__SFramePlugIns_Dict_207_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEntries",1030,G__SFramePlugIns_Dict_207_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - entries", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ToHist",603,G__SFramePlugIns_Dict_207_0_12, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TH1), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFramePlugIns_Dict_207_0_13, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - coll", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Write",523,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 8, 
"C - - 10 '0' name i - 'Int_t' 0 '0' option "
"i - 'Int_t' 0 '0' bufsize", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Write",523,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"C - - 10 '0' name i - 'Int_t' 0 '0' option "
"i - 'Int_t' 0 '0' bufsize", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFramePlugIns_Dict_207_0_16, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SH1<int>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFramePlugIns_Dict_207_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SH1<int>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFramePlugIns_Dict_207_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SH1<int>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFramePlugIns_Dict_207_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SH1<int>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFramePlugIns_Dict_207_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFramePlugIns_Dict_207_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SH1<int>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFramePlugIns_Dict_207_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SH1<int>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFramePlugIns_Dict_207_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SH1<int>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFramePlugIns_Dict_207_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SH1<int>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SH1<int>", 657, G__SFramePlugIns_Dict_207_0_28, (int) ('i'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SH1lEintgR), -1, 0, 1, 1, 1, 0, "u 'SH1<int>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SH1<int>", 783, G__SFramePlugIns_Dict_207_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSParticle(void) {
   /* SParticle */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SParticle));
   G__memfunc_setup("SParticle",903,G__SFramePlugIns_Dict_231_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SParticle), -1, 0, 0, 5, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SParticle",903,G__SFramePlugIns_Dict_231_0_2, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SParticle), -1, 0, 4, 1, 1, 0, 
"d - 'Double32_t' 0 - pt d - 'Double32_t' 0 - eta "
"d - 'Double32_t' 0 - phi d - 'Double32_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SParticle",903,G__SFramePlugIns_Dict_231_0_3, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SParticle), -1, 0, 1, 1, 1, 0, "u 'SParticle' - 11 - parent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SFramePlugIns_Dict_231_0_4, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SParticle::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFramePlugIns_Dict_231_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SParticle::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFramePlugIns_Dict_231_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SParticle::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFramePlugIns_Dict_231_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SParticle::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFramePlugIns_Dict_231_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFramePlugIns_Dict_231_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SParticle::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFramePlugIns_Dict_231_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SParticle::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFramePlugIns_Dict_231_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SParticle::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFramePlugIns_Dict_231_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SParticle::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SParticle", 1029, G__SFramePlugIns_Dict_231_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFramePlugIns_Dict_231_0_17, (int) ('u'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SParticle), -1, 1, 1, 1, 1, 0, "u 'SParticle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlESParticlecOallocatorlESParticlegRsPgR(void) {
   /* vector<SParticle,allocator<SParticle> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgR));
   G__memfunc_setup("at",213,G__SFramePlugIns_Dict_645_0_1, 117, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SParticle), G__defined_typename("vector<SParticle,allocator<SParticle> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<SParticle,allocator<SParticle> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__SFramePlugIns_Dict_645_0_2, 117, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SParticle), G__defined_typename("vector<SParticle,allocator<SParticle> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<SParticle,allocator<SParticle> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__SFramePlugIns_Dict_645_0_3, 117, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__SFramePlugIns_Dict_645_0_4, 117, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__SFramePlugIns_Dict_645_0_5, 117, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESParticlecOallocatorlESParticlegRsPgRcLcLiteratorgR), G__defined_typename("vector<SParticle,allocator<SParticle> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__SFramePlugIns_Dict_645_0_6, 117, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESParticlecOallocatorlESParticlegRsPgRcLcLiteratorgR), G__defined_typename("vector<SParticle,allocator<SParticle> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__SFramePlugIns_Dict_645_0_7, 107, -1, G__defined_typename("vector<SParticle,allocator<SParticle> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__SFramePlugIns_Dict_645_0_8, 107, -1, G__defined_typename("vector<SParticle,allocator<SParticle> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__SFramePlugIns_Dict_645_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<SParticle,allocator<SParticle> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__SFramePlugIns_Dict_645_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<SParticle,allocator<SParticle> >::size_type' 0 - sz u 'SParticle' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__SFramePlugIns_Dict_645_0_11, 107, -1, G__defined_typename("vector<SParticle,allocator<SParticle> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__SFramePlugIns_Dict_645_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SFramePlugIns_Dict_645_0_13, 117, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SParticle), G__defined_typename("vector<SParticle,allocator<SParticle> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<SParticle,allocator<SParticle> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SFramePlugIns_Dict_645_0_14, 117, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SParticle), G__defined_typename("vector<SParticle,allocator<SParticle> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<SParticle,allocator<SParticle> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SParticle,allocator<SParticle> >",3746,G__SFramePlugIns_Dict_645_0_15, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SParticle,allocator<SParticle> >",3746,G__SFramePlugIns_Dict_645_0_16, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<SParticle,allocator<SParticle> >::size_type' 0 - n u 'SParticle' - 11 'SParticle()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SParticle,allocator<SParticle> >",3746,G__SFramePlugIns_Dict_645_0_17, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<SParticle,allocator<SParticle> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SParticle,allocator<SParticle> >",3746,G__SFramePlugIns_Dict_645_0_18, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<SParticle,allocator<SParticle> >::iterator' 'vector<SParticle,allocator<SParticle> >::const_iterator' 10 - first u 'vector<SParticle,allocator<SParticle> >::iterator' 'vector<SParticle,allocator<SParticle> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__SFramePlugIns_Dict_645_0_19, 117, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<SParticle,allocator<SParticle> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__SFramePlugIns_Dict_645_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<SParticle,allocator<SParticle> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__SFramePlugIns_Dict_645_0_21, 117, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SParticle), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__SFramePlugIns_Dict_645_0_22, 117, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_SParticle), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__SFramePlugIns_Dict_645_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SParticle' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__SFramePlugIns_Dict_645_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SParticle,allocator<SParticle> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFramePlugIns_Dict_645_0_25, 117, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<SParticle,allocator<SParticle> >::iterator' - 0 - position u 'SParticle' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFramePlugIns_Dict_645_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<SParticle,allocator<SParticle> >::iterator' - 0 - position u 'vector<SParticle,allocator<SParticle> >::iterator' 'vector<SParticle,allocator<SParticle> >::const_iterator' 10 - first "
"u 'vector<SParticle,allocator<SParticle> >::iterator' 'vector<SParticle,allocator<SParticle> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFramePlugIns_Dict_645_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<SParticle,allocator<SParticle> >::iterator' - 0 - position k - 'vector<SParticle,allocator<SParticle> >::size_type' 0 - n "
"u 'SParticle' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__SFramePlugIns_Dict_645_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SFramePlugIns_Dict_645_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SParticle,allocator<SParticle> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SFramePlugIns_Dict_645_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<SParticle,allocator<SParticle> >::iterator' - 0 - first u 'vector<SParticle,allocator<SParticle> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__SFramePlugIns_Dict_645_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<SParticle,allocator<SParticle> >", 3872, G__SFramePlugIns_Dict_645_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncProofSummedVarlEshortgR(void) {
   /* ProofSummedVar<short> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEshortgR));
   G__memfunc_setup("ProofSummedVar<short>",2116,G__SFramePlugIns_Dict_648_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEshortgR), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFramePlugIns_Dict_648_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - coll", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFramePlugIns_Dict_648_0_3, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ProofSummedVar<short>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFramePlugIns_Dict_648_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<short>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFramePlugIns_Dict_648_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ProofSummedVar<short>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFramePlugIns_Dict_648_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ProofSummedVar<short>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFramePlugIns_Dict_648_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFramePlugIns_Dict_648_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<short>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFramePlugIns_Dict_648_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<short>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFramePlugIns_Dict_648_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<short>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFramePlugIns_Dict_648_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<short>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ProofSummedVar<short>", 2116, G__SFramePlugIns_Dict_648_0_15, (int) ('i'), 
G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEshortgR), -1, 0, 1, 1, 1, 0, "u 'ProofSummedVar<short>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ProofSummedVar<short>", 2242, G__SFramePlugIns_Dict_648_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFramePlugIns_Dict_648_0_17, (int) ('u'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEshortgR), -1, 1, 1, 1, 1, 0, "u 'ProofSummedVar<short>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncProofSummedVarlEunsignedsPshortgR(void) {
   /* ProofSummedVar<unsigned short> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPshortgR));
   G__memfunc_setup("ProofSummedVar<unsigned short>",3009,G__SFramePlugIns_Dict_649_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPshortgR), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFramePlugIns_Dict_649_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - coll", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFramePlugIns_Dict_649_0_3, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ProofSummedVar<unsigned short>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFramePlugIns_Dict_649_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<unsigned short>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFramePlugIns_Dict_649_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ProofSummedVar<unsigned short>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFramePlugIns_Dict_649_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ProofSummedVar<unsigned short>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFramePlugIns_Dict_649_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFramePlugIns_Dict_649_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<unsigned short>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFramePlugIns_Dict_649_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<unsigned short>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFramePlugIns_Dict_649_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<unsigned short>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFramePlugIns_Dict_649_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<unsigned short>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ProofSummedVar<unsigned short>", 3009, G__SFramePlugIns_Dict_649_0_15, (int) ('i'), 
G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPshortgR), -1, 0, 1, 1, 1, 0, "u 'ProofSummedVar<unsigned short>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ProofSummedVar<unsigned short>", 3135, G__SFramePlugIns_Dict_649_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFramePlugIns_Dict_649_0_17, (int) ('u'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPshortgR), -1, 1, 1, 1, 1, 0, "u 'ProofSummedVar<unsigned short>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncProofSummedVarlEintgR(void) {
   /* ProofSummedVar<int> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEintgR));
   G__memfunc_setup("ProofSummedVar<int>",1887,G__SFramePlugIns_Dict_650_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEintgR), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFramePlugIns_Dict_650_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - coll", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFramePlugIns_Dict_650_0_3, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ProofSummedVar<int>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFramePlugIns_Dict_650_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<int>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFramePlugIns_Dict_650_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ProofSummedVar<int>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFramePlugIns_Dict_650_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ProofSummedVar<int>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFramePlugIns_Dict_650_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFramePlugIns_Dict_650_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<int>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFramePlugIns_Dict_650_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<int>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFramePlugIns_Dict_650_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<int>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFramePlugIns_Dict_650_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<int>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ProofSummedVar<int>", 1887, G__SFramePlugIns_Dict_650_0_15, (int) ('i'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEintgR), -1, 0, 1, 1, 1, 0, "u 'ProofSummedVar<int>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ProofSummedVar<int>", 2013, G__SFramePlugIns_Dict_650_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFramePlugIns_Dict_650_0_17, (int) ('u'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEintgR), -1, 1, 1, 1, 1, 0, "u 'ProofSummedVar<int>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncProofSummedVarlEunsignedsPintgR(void) {
   /* ProofSummedVar<unsigned int> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPintgR));
   G__memfunc_setup("ProofSummedVar<unsigned int>",2780,G__SFramePlugIns_Dict_651_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPintgR), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFramePlugIns_Dict_651_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - coll", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFramePlugIns_Dict_651_0_3, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ProofSummedVar<unsigned int>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFramePlugIns_Dict_651_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<unsigned int>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFramePlugIns_Dict_651_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ProofSummedVar<unsigned int>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFramePlugIns_Dict_651_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ProofSummedVar<unsigned int>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFramePlugIns_Dict_651_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFramePlugIns_Dict_651_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<unsigned int>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFramePlugIns_Dict_651_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<unsigned int>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFramePlugIns_Dict_651_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<unsigned int>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFramePlugIns_Dict_651_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<unsigned int>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ProofSummedVar<unsigned int>", 2780, G__SFramePlugIns_Dict_651_0_15, (int) ('i'), 
G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPintgR), -1, 0, 1, 1, 1, 0, "u 'ProofSummedVar<unsigned int>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ProofSummedVar<unsigned int>", 2906, G__SFramePlugIns_Dict_651_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFramePlugIns_Dict_651_0_17, (int) ('u'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPintgR), -1, 1, 1, 1, 1, 0, "u 'ProofSummedVar<unsigned int>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncProofSummedVarlElonggR(void) {
   /* ProofSummedVar<long> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlElonggR));
   G__memfunc_setup("ProofSummedVar<long>",1988,G__SFramePlugIns_Dict_652_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlElonggR), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFramePlugIns_Dict_652_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - coll", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFramePlugIns_Dict_652_0_3, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ProofSummedVar<long>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFramePlugIns_Dict_652_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<long>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFramePlugIns_Dict_652_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ProofSummedVar<long>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFramePlugIns_Dict_652_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ProofSummedVar<long>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFramePlugIns_Dict_652_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFramePlugIns_Dict_652_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<long>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFramePlugIns_Dict_652_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<long>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFramePlugIns_Dict_652_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<long>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFramePlugIns_Dict_652_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<long>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ProofSummedVar<long>", 1988, G__SFramePlugIns_Dict_652_0_15, (int) ('i'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlElonggR), -1, 0, 1, 1, 1, 0, "u 'ProofSummedVar<long>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ProofSummedVar<long>", 2114, G__SFramePlugIns_Dict_652_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFramePlugIns_Dict_652_0_17, (int) ('u'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlElonggR), -1, 1, 1, 1, 1, 0, "u 'ProofSummedVar<long>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncProofSummedVarlEunsignedsPlonggR(void) {
   /* ProofSummedVar<unsigned long> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPlonggR));
   G__memfunc_setup("ProofSummedVar<unsigned long>",2881,G__SFramePlugIns_Dict_653_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPlonggR), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFramePlugIns_Dict_653_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - coll", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFramePlugIns_Dict_653_0_3, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ProofSummedVar<unsigned long>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFramePlugIns_Dict_653_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<unsigned long>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFramePlugIns_Dict_653_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ProofSummedVar<unsigned long>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFramePlugIns_Dict_653_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ProofSummedVar<unsigned long>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFramePlugIns_Dict_653_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFramePlugIns_Dict_653_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<unsigned long>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFramePlugIns_Dict_653_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<unsigned long>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFramePlugIns_Dict_653_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<unsigned long>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFramePlugIns_Dict_653_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<unsigned long>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ProofSummedVar<unsigned long>", 2881, G__SFramePlugIns_Dict_653_0_15, (int) ('i'), 
G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPlonggR), -1, 0, 1, 1, 1, 0, "u 'ProofSummedVar<unsigned long>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ProofSummedVar<unsigned long>", 3007, G__SFramePlugIns_Dict_653_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFramePlugIns_Dict_653_0_17, (int) ('u'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPlonggR), -1, 1, 1, 1, 1, 0, "u 'ProofSummedVar<unsigned long>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncProofSummedVarlElongsPlonggR(void) {
   /* ProofSummedVar<long long> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlElongsPlonggR));
   G__memfunc_setup("ProofSummedVar<long long>",2452,G__SFramePlugIns_Dict_654_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlElongsPlonggR), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFramePlugIns_Dict_654_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - coll", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFramePlugIns_Dict_654_0_3, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ProofSummedVar<long long>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFramePlugIns_Dict_654_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<long long>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFramePlugIns_Dict_654_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ProofSummedVar<long long>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFramePlugIns_Dict_654_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ProofSummedVar<long long>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFramePlugIns_Dict_654_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFramePlugIns_Dict_654_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<long long>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFramePlugIns_Dict_654_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<long long>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFramePlugIns_Dict_654_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<long long>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFramePlugIns_Dict_654_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<long long>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ProofSummedVar<long long>", 2452, G__SFramePlugIns_Dict_654_0_15, (int) ('i'), 
G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlElongsPlonggR), -1, 0, 1, 1, 1, 0, "u 'ProofSummedVar<long long>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ProofSummedVar<long long>", 2578, G__SFramePlugIns_Dict_654_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFramePlugIns_Dict_654_0_17, (int) ('u'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlElongsPlonggR), -1, 1, 1, 1, 1, 0, "u 'ProofSummedVar<long long>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncProofSummedVarlEunsignedsPlongsPlonggR(void) {
   /* ProofSummedVar<unsigned long long> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPlongsPlonggR));
   G__memfunc_setup("ProofSummedVar<unsigned long long>",3345,G__SFramePlugIns_Dict_655_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPlongsPlonggR), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFramePlugIns_Dict_655_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - coll", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFramePlugIns_Dict_655_0_3, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ProofSummedVar<unsigned long long>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFramePlugIns_Dict_655_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<unsigned long long>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFramePlugIns_Dict_655_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ProofSummedVar<unsigned long long>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFramePlugIns_Dict_655_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ProofSummedVar<unsigned long long>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFramePlugIns_Dict_655_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFramePlugIns_Dict_655_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<unsigned long long>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFramePlugIns_Dict_655_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<unsigned long long>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFramePlugIns_Dict_655_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<unsigned long long>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFramePlugIns_Dict_655_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<unsigned long long>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ProofSummedVar<unsigned long long>", 3345, G__SFramePlugIns_Dict_655_0_15, (int) ('i'), 
G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPlongsPlonggR), -1, 0, 1, 1, 1, 0, "u 'ProofSummedVar<unsigned long long>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ProofSummedVar<unsigned long long>", 3471, G__SFramePlugIns_Dict_655_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFramePlugIns_Dict_655_0_17, (int) ('u'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPlongsPlonggR), -1, 1, 1, 1, 1, 0, "u 'ProofSummedVar<unsigned long long>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncProofSummedVarlEfloatgR(void) {
   /* ProofSummedVar<float> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEfloatgR));
   G__memfunc_setup("ProofSummedVar<float>",2090,G__SFramePlugIns_Dict_656_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEfloatgR), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFramePlugIns_Dict_656_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - coll", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFramePlugIns_Dict_656_0_3, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ProofSummedVar<float>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFramePlugIns_Dict_656_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<float>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFramePlugIns_Dict_656_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ProofSummedVar<float>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFramePlugIns_Dict_656_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ProofSummedVar<float>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFramePlugIns_Dict_656_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFramePlugIns_Dict_656_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<float>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFramePlugIns_Dict_656_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<float>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFramePlugIns_Dict_656_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<float>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFramePlugIns_Dict_656_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<float>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ProofSummedVar<float>", 2090, G__SFramePlugIns_Dict_656_0_15, (int) ('i'), 
G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEfloatgR), -1, 0, 1, 1, 1, 0, "u 'ProofSummedVar<float>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ProofSummedVar<float>", 2216, G__SFramePlugIns_Dict_656_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFramePlugIns_Dict_656_0_17, (int) ('u'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEfloatgR), -1, 1, 1, 1, 1, 0, "u 'ProofSummedVar<float>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncProofSummedVarlEdoublegR(void) {
   /* ProofSummedVar<double> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEdoublegR));
   G__memfunc_setup("ProofSummedVar<double>",2191,G__SFramePlugIns_Dict_657_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEdoublegR), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFramePlugIns_Dict_657_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - coll", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFramePlugIns_Dict_657_0_3, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ProofSummedVar<double>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFramePlugIns_Dict_657_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<double>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFramePlugIns_Dict_657_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ProofSummedVar<double>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFramePlugIns_Dict_657_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ProofSummedVar<double>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFramePlugIns_Dict_657_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFramePlugIns_Dict_657_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<double>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFramePlugIns_Dict_657_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<double>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFramePlugIns_Dict_657_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<double>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFramePlugIns_Dict_657_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<double>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ProofSummedVar<double>", 2191, G__SFramePlugIns_Dict_657_0_15, (int) ('i'), 
G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEdoublegR), -1, 0, 1, 1, 1, 0, "u 'ProofSummedVar<double>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ProofSummedVar<double>", 2317, G__SFramePlugIns_Dict_657_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFramePlugIns_Dict_657_0_17, (int) ('u'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEdoublegR), -1, 1, 1, 1, 1, 0, "u 'ProofSummedVar<double>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR(void) {
   /* ProofSummedVar<vector<short,allocator<short> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR));
   G__memfunc_setup("ProofSummedVar<vector<short,allocator<short> > >",4648,G__SFramePlugIns_Dict_658_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFramePlugIns_Dict_658_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - coll", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFramePlugIns_Dict_658_0_3, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ProofSummedVar<vector<short,allocator<short> > >::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFramePlugIns_Dict_658_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<short,allocator<short> > >::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFramePlugIns_Dict_658_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ProofSummedVar<vector<short,allocator<short> > >::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFramePlugIns_Dict_658_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ProofSummedVar<vector<short,allocator<short> > >::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFramePlugIns_Dict_658_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFramePlugIns_Dict_658_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<short,allocator<short> > >::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFramePlugIns_Dict_658_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<vector<short,allocator<short> > >::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFramePlugIns_Dict_658_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<short,allocator<short> > >::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFramePlugIns_Dict_658_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<vector<short,allocator<short> > >::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ProofSummedVar<vector<short,allocator<short> > >", 4648, G__SFramePlugIns_Dict_658_0_15, (int) ('i'), 
G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'ProofSummedVar<vector<short,allocator<short> > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ProofSummedVar<vector<short,allocator<short> > >", 4774, G__SFramePlugIns_Dict_658_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFramePlugIns_Dict_658_0_17, (int) ('u'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'ProofSummedVar<vector<short,allocator<short> > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR(void) {
   /* ProofSummedVar<vector<unsigned short,allocator<unsigned short> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR));
   G__memfunc_setup("ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >",6434,G__SFramePlugIns_Dict_659_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFramePlugIns_Dict_659_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - coll", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFramePlugIns_Dict_659_0_3, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFramePlugIns_Dict_659_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFramePlugIns_Dict_659_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFramePlugIns_Dict_659_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFramePlugIns_Dict_659_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFramePlugIns_Dict_659_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFramePlugIns_Dict_659_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFramePlugIns_Dict_659_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFramePlugIns_Dict_659_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >", 6434, G__SFramePlugIns_Dict_659_0_15, (int) ('i'), 
G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >", 6560, G__SFramePlugIns_Dict_659_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFramePlugIns_Dict_659_0_17, (int) ('u'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR(void) {
   /* ProofSummedVar<vector<int,allocator<int> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR));
   G__memfunc_setup("ProofSummedVar<vector<int,allocator<int> > >",4190,G__SFramePlugIns_Dict_660_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFramePlugIns_Dict_660_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - coll", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFramePlugIns_Dict_660_0_3, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ProofSummedVar<vector<int,allocator<int> > >::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFramePlugIns_Dict_660_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<int,allocator<int> > >::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFramePlugIns_Dict_660_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ProofSummedVar<vector<int,allocator<int> > >::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFramePlugIns_Dict_660_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ProofSummedVar<vector<int,allocator<int> > >::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFramePlugIns_Dict_660_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFramePlugIns_Dict_660_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<int,allocator<int> > >::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFramePlugIns_Dict_660_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<vector<int,allocator<int> > >::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFramePlugIns_Dict_660_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<int,allocator<int> > >::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFramePlugIns_Dict_660_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<vector<int,allocator<int> > >::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ProofSummedVar<vector<int,allocator<int> > >", 4190, G__SFramePlugIns_Dict_660_0_15, (int) ('i'), 
G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'ProofSummedVar<vector<int,allocator<int> > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ProofSummedVar<vector<int,allocator<int> > >", 4316, G__SFramePlugIns_Dict_660_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFramePlugIns_Dict_660_0_17, (int) ('u'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'ProofSummedVar<vector<int,allocator<int> > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR(void) {
   /* ProofSummedVar<vector<unsigned int,allocator<unsigned int> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR));
   G__memfunc_setup("ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >",5976,G__SFramePlugIns_Dict_661_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFramePlugIns_Dict_661_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - coll", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFramePlugIns_Dict_661_0_3, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFramePlugIns_Dict_661_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFramePlugIns_Dict_661_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFramePlugIns_Dict_661_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFramePlugIns_Dict_661_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFramePlugIns_Dict_661_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFramePlugIns_Dict_661_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFramePlugIns_Dict_661_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFramePlugIns_Dict_661_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >", 5976, G__SFramePlugIns_Dict_661_0_15, (int) ('i'), 
G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >", 6102, G__SFramePlugIns_Dict_661_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFramePlugIns_Dict_661_0_17, (int) ('u'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR(void) {
   /* ProofSummedVar<vector<long,allocator<long> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR));
   G__memfunc_setup("ProofSummedVar<vector<long,allocator<long> > >",4392,G__SFramePlugIns_Dict_662_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFramePlugIns_Dict_662_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - coll", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFramePlugIns_Dict_662_0_3, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ProofSummedVar<vector<long,allocator<long> > >::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFramePlugIns_Dict_662_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<long,allocator<long> > >::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFramePlugIns_Dict_662_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ProofSummedVar<vector<long,allocator<long> > >::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFramePlugIns_Dict_662_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ProofSummedVar<vector<long,allocator<long> > >::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFramePlugIns_Dict_662_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFramePlugIns_Dict_662_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<long,allocator<long> > >::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFramePlugIns_Dict_662_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<vector<long,allocator<long> > >::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFramePlugIns_Dict_662_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<long,allocator<long> > >::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFramePlugIns_Dict_662_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<vector<long,allocator<long> > >::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ProofSummedVar<vector<long,allocator<long> > >", 4392, G__SFramePlugIns_Dict_662_0_15, (int) ('i'), 
G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'ProofSummedVar<vector<long,allocator<long> > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ProofSummedVar<vector<long,allocator<long> > >", 4518, G__SFramePlugIns_Dict_662_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFramePlugIns_Dict_662_0_17, (int) ('u'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'ProofSummedVar<vector<long,allocator<long> > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR(void) {
   /* ProofSummedVar<vector<unsigned long,allocator<unsigned long> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR));
   G__memfunc_setup("ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >",6178,G__SFramePlugIns_Dict_663_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFramePlugIns_Dict_663_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - coll", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFramePlugIns_Dict_663_0_3, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFramePlugIns_Dict_663_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFramePlugIns_Dict_663_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFramePlugIns_Dict_663_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFramePlugIns_Dict_663_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFramePlugIns_Dict_663_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFramePlugIns_Dict_663_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFramePlugIns_Dict_663_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFramePlugIns_Dict_663_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >", 6178, G__SFramePlugIns_Dict_663_0_15, (int) ('i'), 
G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >", 6304, G__SFramePlugIns_Dict_663_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFramePlugIns_Dict_663_0_17, (int) ('u'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncProofSummedVarlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgR(void) {
   /* ProofSummedVar<vector<long long,allocator<long long> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgR));
   G__memfunc_setup("ProofSummedVar<vector<long long,allocator<long long> > >",5320,G__SFramePlugIns_Dict_664_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFramePlugIns_Dict_664_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - coll", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFramePlugIns_Dict_664_0_3, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ProofSummedVar<vector<long long,allocator<long long> > >::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFramePlugIns_Dict_664_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<long long,allocator<long long> > >::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFramePlugIns_Dict_664_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ProofSummedVar<vector<long long,allocator<long long> > >::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFramePlugIns_Dict_664_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ProofSummedVar<vector<long long,allocator<long long> > >::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFramePlugIns_Dict_664_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFramePlugIns_Dict_664_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<long long,allocator<long long> > >::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFramePlugIns_Dict_664_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<vector<long long,allocator<long long> > >::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFramePlugIns_Dict_664_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<long long,allocator<long long> > >::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFramePlugIns_Dict_664_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<vector<long long,allocator<long long> > >::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ProofSummedVar<vector<long long,allocator<long long> > >", 5320, G__SFramePlugIns_Dict_664_0_15, (int) ('i'), 
G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'ProofSummedVar<vector<long long,allocator<long long> > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ProofSummedVar<vector<long long,allocator<long long> > >", 5446, G__SFramePlugIns_Dict_664_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFramePlugIns_Dict_664_0_17, (int) ('u'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'ProofSummedVar<vector<long long,allocator<long long> > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncProofSummedVarlEvectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgRsPgR(void) {
   /* ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgRsPgR));
   G__memfunc_setup("ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >",7106,G__SFramePlugIns_Dict_665_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFramePlugIns_Dict_665_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - coll", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFramePlugIns_Dict_665_0_3, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFramePlugIns_Dict_665_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFramePlugIns_Dict_665_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFramePlugIns_Dict_665_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFramePlugIns_Dict_665_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFramePlugIns_Dict_665_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFramePlugIns_Dict_665_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFramePlugIns_Dict_665_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFramePlugIns_Dict_665_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >", 7106, G__SFramePlugIns_Dict_665_0_15, (int) ('i'), 
G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >", 7232, G__SFramePlugIns_Dict_665_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFramePlugIns_Dict_665_0_17, (int) ('u'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR(void) {
   /* ProofSummedVar<vector<float,allocator<float> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR));
   G__memfunc_setup("ProofSummedVar<vector<float,allocator<float> > >",4596,G__SFramePlugIns_Dict_666_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFramePlugIns_Dict_666_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - coll", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFramePlugIns_Dict_666_0_3, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ProofSummedVar<vector<float,allocator<float> > >::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFramePlugIns_Dict_666_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<float,allocator<float> > >::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFramePlugIns_Dict_666_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ProofSummedVar<vector<float,allocator<float> > >::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFramePlugIns_Dict_666_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ProofSummedVar<vector<float,allocator<float> > >::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFramePlugIns_Dict_666_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFramePlugIns_Dict_666_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<float,allocator<float> > >::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFramePlugIns_Dict_666_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<vector<float,allocator<float> > >::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFramePlugIns_Dict_666_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<float,allocator<float> > >::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFramePlugIns_Dict_666_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<vector<float,allocator<float> > >::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ProofSummedVar<vector<float,allocator<float> > >", 4596, G__SFramePlugIns_Dict_666_0_15, (int) ('i'), 
G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'ProofSummedVar<vector<float,allocator<float> > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ProofSummedVar<vector<float,allocator<float> > >", 4722, G__SFramePlugIns_Dict_666_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFramePlugIns_Dict_666_0_17, (int) ('u'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'ProofSummedVar<vector<float,allocator<float> > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR(void) {
   /* ProofSummedVar<vector<double,allocator<double> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR));
   G__memfunc_setup("ProofSummedVar<vector<double,allocator<double> > >",4798,G__SFramePlugIns_Dict_667_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFramePlugIns_Dict_667_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - coll", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFramePlugIns_Dict_667_0_3, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ProofSummedVar<vector<double,allocator<double> > >::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFramePlugIns_Dict_667_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<double,allocator<double> > >::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFramePlugIns_Dict_667_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ProofSummedVar<vector<double,allocator<double> > >::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFramePlugIns_Dict_667_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ProofSummedVar<vector<double,allocator<double> > >::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFramePlugIns_Dict_667_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFramePlugIns_Dict_667_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<double,allocator<double> > >::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFramePlugIns_Dict_667_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<vector<double,allocator<double> > >::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFramePlugIns_Dict_667_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<vector<double,allocator<double> > >::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFramePlugIns_Dict_667_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<vector<double,allocator<double> > >::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ProofSummedVar<vector<double,allocator<double> > >", 4798, G__SFramePlugIns_Dict_667_0_15, (int) ('i'), 
G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'ProofSummedVar<vector<double,allocator<double> > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ProofSummedVar<vector<double,allocator<double> > >", 4924, G__SFramePlugIns_Dict_667_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFramePlugIns_Dict_667_0_17, (int) ('u'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'ProofSummedVar<vector<double,allocator<double> > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEstringcOunsignedsPintgR(void) {
   /* pair<string,unsigned int> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_pairlEstringcOunsignedsPintgR));
   G__memfunc_setup("pair<string,unsigned int>",2481,G__SFramePlugIns_Dict_668_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_pairlEstringcOunsignedsPintgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<string,unsigned int>",2481,G__SFramePlugIns_Dict_668_0_2, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_pairlEstringcOunsignedsPintgR), -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - a h - - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_pairlEstringcOunsignedsPintgR), -1, 1, 1, 1, 4, 0, "u 'pair<string,unsigned int>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<string,unsigned int>", 2481, G__SFramePlugIns_Dict_668_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__SFramePlugIns_DictLN_pairlEstringcOunsignedsPintgR), -1, 0, 1, 1, 1, 0, "u 'pair<string,unsigned int>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<string,unsigned int>", 2607, G__SFramePlugIns_Dict_668_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR(void) {
   /* map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR));
   G__memfunc_setup("map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >",7894,G__SFramePlugIns_Dict_671_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >",7894,G__SFramePlugIns_Dict_671_0_2, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator' - 0 - first u 'map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >",7894,G__SFramePlugIns_Dict_671_0_3, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::reverse_iterator' - 0 - first u 'map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >",7894,G__SFramePlugIns_Dict_671_0_4, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__SFramePlugIns_Dict_671_0_5, 117, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__SFramePlugIns_Dict_671_0_6, 117, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__SFramePlugIns_Dict_671_0_7, 117, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__SFramePlugIns_Dict_671_0_8, 117, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__SFramePlugIns_Dict_671_0_9, 117, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__SFramePlugIns_Dict_671_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__SFramePlugIns_Dict_671_0_11, 107, -1, G__defined_typename("map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__SFramePlugIns_Dict_671_0_12, 107, -1, G__defined_typename("map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SFramePlugIns_Dict_671_0_13, 104, -1, -1, 1, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFramePlugIns_Dict_671_0_14, 117, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_pairlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<string,unsigned int>' 'map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFramePlugIns_Dict_671_0_15, 117, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator' - 0 - position u 'pair<string,unsigned int>' 'map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFramePlugIns_Dict_671_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator' - 0 - first u 'map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFramePlugIns_Dict_671_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::reverse_iterator' - 0 - first u 'map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SFramePlugIns_Dict_671_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SFramePlugIns_Dict_671_0_19, 107, -1, G__defined_typename("map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::size_type"), 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SFramePlugIns_Dict_671_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator' - 0 - first u 'map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__SFramePlugIns_Dict_671_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__SFramePlugIns_Dict_671_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__SFramePlugIns_Dict_671_0_23, 117, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__SFramePlugIns_Dict_671_0_24, 107, -1, G__defined_typename("map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::size_type"), 0, 1, 1, 1, 8, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__SFramePlugIns_Dict_671_0_25, 117, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__SFramePlugIns_Dict_671_0_26, 117, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >", 8020, G__SFramePlugIns_Dict_671_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR(void) {
   /* ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR));
   G__memfunc_setup("ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >",7696,G__SFramePlugIns_Dict_675_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFramePlugIns_Dict_675_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - coll", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFramePlugIns_Dict_675_0_3, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFramePlugIns_Dict_675_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFramePlugIns_Dict_675_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFramePlugIns_Dict_675_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFramePlugIns_Dict_675_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFramePlugIns_Dict_675_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFramePlugIns_Dict_675_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFramePlugIns_Dict_675_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFramePlugIns_Dict_675_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >", 7696, G__SFramePlugIns_Dict_675_0_15, (int) ('i'), 
G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >", 7822, G__SFramePlugIns_Dict_675_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFramePlugIns_Dict_675_0_17, (int) ('u'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR(void) {
   /* ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR));
   G__memfunc_setup("ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >",9482,G__SFramePlugIns_Dict_676_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFramePlugIns_Dict_676_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - coll", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFramePlugIns_Dict_676_0_3, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFramePlugIns_Dict_676_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFramePlugIns_Dict_676_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFramePlugIns_Dict_676_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFramePlugIns_Dict_676_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFramePlugIns_Dict_676_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFramePlugIns_Dict_676_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFramePlugIns_Dict_676_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFramePlugIns_Dict_676_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >", 9482, G__SFramePlugIns_Dict_676_0_15, (int) ('i'), 
G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >", 9608, G__SFramePlugIns_Dict_676_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFramePlugIns_Dict_676_0_17, (int) ('u'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR(void) {
   /* ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR));
   G__memfunc_setup("ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >",8102,G__SFramePlugIns_Dict_677_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFramePlugIns_Dict_677_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - coll", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFramePlugIns_Dict_677_0_3, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFramePlugIns_Dict_677_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFramePlugIns_Dict_677_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFramePlugIns_Dict_677_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFramePlugIns_Dict_677_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFramePlugIns_Dict_677_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFramePlugIns_Dict_677_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFramePlugIns_Dict_677_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFramePlugIns_Dict_677_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >", 8102, G__SFramePlugIns_Dict_677_0_15, (int) ('i'), 
G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >", 8228, G__SFramePlugIns_Dict_677_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFramePlugIns_Dict_677_0_17, (int) ('u'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR(void) {
   /* ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR));
   G__memfunc_setup("ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >",8304,G__SFramePlugIns_Dict_678_0_1, 105, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"C - - 10 '0' name C - - 10 '0' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFramePlugIns_Dict_678_0_2, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - coll", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFramePlugIns_Dict_678_0_3, 85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFramePlugIns_Dict_678_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFramePlugIns_Dict_678_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFramePlugIns_Dict_678_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFramePlugIns_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFramePlugIns_Dict_678_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFramePlugIns_Dict_678_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFramePlugIns_Dict_678_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFramePlugIns_Dict_678_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFramePlugIns_Dict_678_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >", 8304, G__SFramePlugIns_Dict_678_0_15, (int) ('i'), 
G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >", 8430, G__SFramePlugIns_Dict_678_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFramePlugIns_Dict_678_0_17, (int) ('u'), G__get_linked_tagnum(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncSFramePlugIns_Dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalSFramePlugIns_Dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
}

static void G__cpp_setup_func29() {
}

static void G__cpp_setup_func30() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcSFramePlugIns_Dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
  G__cpp_setup_func30();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__SFramePlugIns_DictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_TCollection = { "TCollection" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ROOT = { "ROOT" , 110 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_vectorlEshortcOallocatorlEshortgRsPgR = { "vector<short,allocator<short> >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_vectorlElongcOallocatorlElonggRsPgR = { "vector<long,allocator<long> >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_vectorlElongsPlongcOallocatorlElongsPlonggRsPgR = { "vector<long long,allocator<long long> >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR = { "vector<unsigned short,allocator<unsigned short> >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_vectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgR = { "vector<unsigned long,allocator<unsigned long> >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR = { "vector<unsigned long long,allocator<unsigned long long> >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_SH1lEfloatgR = { "SH1<float>" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_SH1lEdoublegR = { "SH1<double>" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_SH1lEintgR = { "SH1<int>" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ROOTcLcLMath = { "ROOT::Math" , 110 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_SParticle = { "SParticle" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPtEtaPhiE4DlEDouble32_tgRsPgR = { "ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<Double32_t> >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ROOTcLcLMathcLcLCartesian3DlEdoublegR = { "ROOT::Math::Cartesian3D<double>" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ROOTcLcLMathcLcLDisplacementVector3DlEROOTcLcLMathcLcLCartesian3DlEdoublegRcOROOTcLcLMathcLcLDefaultCoordinateSystemTaggR = { "ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_lesslEstringgR = { "less<string>" , 115 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR = { "map<string,int,less<string>,allocator<pair<const string,int> > >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR = { "map<string,float,less<string>,allocator<pair<const string,float> > >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR = { "map<string,double,less<string>,allocator<pair<const string,double> > >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_maplESMsgTypecOstringcOlesslESMsgTypegRcOallocatorlEpairlEconstsPSMsgTypecOstringgRsPgRsPgR = { "map<SMsgType,string,less<SMsgType>,allocator<pair<const SMsgType,string> > >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_vectorlETTreemUcOallocatorlETTreemUgRsPgR = { "vector<TTree*,allocator<TTree*> >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlETTreemUcOallocatorlETTreemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TTree*,allocator<TTree*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_vectorlETBranchmUcOallocatorlETBranchmUgRsPgR = { "vector<TBranch*,allocator<TBranch*> >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlETBranchmUcOallocatorlETBranchmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TBranch*,allocator<TBranch*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_listlETObjectmUcOallocatorlETObjectmUgRsPgR = { "list<TObject*,allocator<TObject*> >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR = { "vector<SGeneratorCut,allocator<SGeneratorCut> >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SGeneratorCut,allocator<SGeneratorCut> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_vectorlESFilecOallocatorlESFilegRsPgR = { "vector<SFile,allocator<SFile> >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESFilecOallocatorlESFilegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SFile,allocator<SFile> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_vectorlESTreecOallocatorlESTreegRsPgR = { "vector<STree,allocator<STree> >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESTreecOallocatorlESTreegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<STree,allocator<STree> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR = { "map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR = { "vector<SDataSet,allocator<SDataSet> >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESDataSetcOallocatorlESDataSetgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SDataSet,allocator<SDataSet> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_pairlEstringcOstringgR = { "pair<string,string>" , 115 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR = { "vector<pair<string,string>,allocator<pair<string,string> > >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<string,string>,allocator<pair<string,string> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR = { "vector<SInputData,allocator<SInputData> >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESInputDatacOallocatorlESInputDatagRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SInputData,allocator<SInputData> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgR = { "vector<SParticle,allocator<SParticle> >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgRcLcLiterator = { "vector<SParticle,allocator<SParticle> >::iterator" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESParticlecOallocatorlESParticlegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SParticle,allocator<SParticle> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ProofSummedVarlEshortgR = { "ProofSummedVar<short>" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPshortgR = { "ProofSummedVar<unsigned short>" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ProofSummedVarlEintgR = { "ProofSummedVar<int>" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPintgR = { "ProofSummedVar<unsigned int>" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ProofSummedVarlElonggR = { "ProofSummedVar<long>" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPlonggR = { "ProofSummedVar<unsigned long>" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ProofSummedVarlElongsPlonggR = { "ProofSummedVar<long long>" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPlongsPlonggR = { "ProofSummedVar<unsigned long long>" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ProofSummedVarlEfloatgR = { "ProofSummedVar<float>" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ProofSummedVarlEdoublegR = { "ProofSummedVar<double>" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR = { "ProofSummedVar<vector<short,allocator<short> > >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR = { "ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR = { "ProofSummedVar<vector<int,allocator<int> > >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR = { "ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR = { "ProofSummedVar<vector<long,allocator<long> > >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR = { "ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgR = { "ProofSummedVar<vector<long long,allocator<long long> > >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgRsPgR = { "ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR = { "ProofSummedVar<vector<float,allocator<float> > >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR = { "ProofSummedVar<vector<double,allocator<double> > >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_pairlEstringcOunsignedsPintgR = { "pair<string,unsigned int>" , 115 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_allocatorlEpairlEconstsPstringcOunsignedsPintgRsPgR = { "allocator<pair<const string,unsigned int> >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR = { "map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRcLcLiterator = { "map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRcLcLreverse_iterator = { "map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_pairlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR = { "ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR = { "ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR = { "ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >" , 99 , -1 };
G__linked_taginfo G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR = { "ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableSFramePlugIns_Dict() {
  G__SFramePlugIns_DictLN_TClass.tagnum = -1 ;
  G__SFramePlugIns_DictLN_TBuffer.tagnum = -1 ;
  G__SFramePlugIns_DictLN_TMemberInspector.tagnum = -1 ;
  G__SFramePlugIns_DictLN_TObject.tagnum = -1 ;
  G__SFramePlugIns_DictLN_TNamed.tagnum = -1 ;
  G__SFramePlugIns_DictLN_TCollection.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ROOT.tagnum = -1 ;
  G__SFramePlugIns_DictLN_vectorlEshortcOallocatorlEshortgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_vectorlElongcOallocatorlElonggRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_vectorlElongsPlongcOallocatorlElongsPlonggRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_vectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_string.tagnum = -1 ;
  G__SFramePlugIns_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_TH1.tagnum = -1 ;
  G__SFramePlugIns_DictLN_SH1lEfloatgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_SH1lEdoublegR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_SH1lEintgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ROOTcLcLMath.tagnum = -1 ;
  G__SFramePlugIns_DictLN_SParticle.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPtEtaPhiE4DlEDouble32_tgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ROOTcLcLMathcLcLCartesian3DlEdoublegR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ROOTcLcLMathcLcLDisplacementVector3DlEROOTcLcLMathcLcLCartesian3DlEdoublegRcOROOTcLcLMathcLcLDefaultCoordinateSystemTaggR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_lesslEstringgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_maplESMsgTypecOstringcOlesslESMsgTypegRcOallocatorlEpairlEconstsPSMsgTypecOstringgRsPgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_vectorlETTreemUcOallocatorlETTreemUgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlETTreemUcOallocatorlETTreemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_vectorlETBranchmUcOallocatorlETBranchmUgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlETBranchmUcOallocatorlETBranchmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_listlETObjectmUcOallocatorlETObjectmUgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_vectorlESFilecOallocatorlESFilegRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESFilecOallocatorlESFilegRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_vectorlESTreecOallocatorlESTreegRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESTreecOallocatorlESTreegRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESDataSetcOallocatorlESDataSetgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_pairlEstringcOstringgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESInputDatacOallocatorlESInputDatagRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgRcLcLiterator.tagnum = -1 ;
  G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESParticlecOallocatorlESParticlegRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ProofSummedVarlEshortgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPshortgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ProofSummedVarlEintgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPintgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ProofSummedVarlElonggR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPlonggR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ProofSummedVarlElongsPlonggR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPlongsPlonggR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ProofSummedVarlEfloatgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ProofSummedVarlEdoublegR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_pairlEstringcOunsignedsPintgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_allocatorlEpairlEconstsPstringcOunsignedsPintgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__SFramePlugIns_DictLN_pairlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR.tagnum = -1 ;
  G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableSFramePlugIns_Dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_TClass);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_TObject);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_TCollection);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ROOT);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_vectorlEshortcOallocatorlEshortgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_vectorlElongcOallocatorlElonggRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_vectorlElongsPlongcOallocatorlElongsPlonggRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_vectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_vectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_string);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_TH1);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_SH1lEfloatgR),sizeof(SH1<float>),-1,324864,(char*)NULL,G__setup_memvarSH1lEfloatgR,G__setup_memfuncSH1lEfloatgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_SH1lEdoublegR),sizeof(SH1<double>),-1,324864,(char*)NULL,G__setup_memvarSH1lEdoublegR,G__setup_memfuncSH1lEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_SH1lEintgR),sizeof(SH1<int>),-1,324864,(char*)NULL,G__setup_memvarSH1lEintgR,G__setup_memfuncSH1lEintgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ROOTcLcLMath);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_SParticle),sizeof(SParticle),-1,324352,(char*)NULL,G__setup_memvarSParticle,G__setup_memfuncSParticle);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ROOTcLcLMathcLcLLorentzVectorlEROOTcLcLMathcLcLPtEtaPhiE4DlEDouble32_tgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ROOTcLcLMathcLcLCartesian3DlEdoublegR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ROOTcLcLMathcLcLDisplacementVector3DlEROOTcLcLMathcLcLCartesian3DlEdoublegRcOROOTcLcLMathcLcLDefaultCoordinateSystemTaggR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_lesslEstringgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_maplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_maplESMsgTypecOstringcOlesslESMsgTypegRcOallocatorlEpairlEconstsPSMsgTypecOstringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_vectorlETTreemUcOallocatorlETTreemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlETTreemUcOallocatorlETTreemUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_vectorlETBranchmUcOallocatorlETBranchmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlETBranchmUcOallocatorlETBranchmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_listlETObjectmUcOallocatorlETObjectmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_vectorlESFilecOallocatorlESFilegRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESFilecOallocatorlESFilegRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_vectorlESTreecOallocatorlESTreegRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESTreecOallocatorlESTreegRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESDataSetcOallocatorlESDataSetgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_pairlEstringcOstringgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESInputDatacOallocatorlESInputDatagRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgR),sizeof(vector<SParticle,allocator<SParticle> >),-1,298752,(char*)NULL,G__setup_memvarvectorlESParticlecOallocatorlESParticlegRsPgR,G__setup_memfuncvectorlESParticlecOallocatorlESParticlegRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_vectorlESParticlecOallocatorlESParticlegRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_reverse_iteratorlEvectorlESParticlecOallocatorlESParticlegRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ProofSummedVarlEshortgR),sizeof(ProofSummedVar<short>),-1,323840,(char*)NULL,G__setup_memvarProofSummedVarlEshortgR,G__setup_memfuncProofSummedVarlEshortgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPshortgR),sizeof(ProofSummedVar<unsigned short>),-1,323840,(char*)NULL,G__setup_memvarProofSummedVarlEunsignedsPshortgR,G__setup_memfuncProofSummedVarlEunsignedsPshortgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ProofSummedVarlEintgR),sizeof(ProofSummedVar<int>),-1,323840,(char*)NULL,G__setup_memvarProofSummedVarlEintgR,G__setup_memfuncProofSummedVarlEintgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPintgR),sizeof(ProofSummedVar<unsigned int>),-1,323840,(char*)NULL,G__setup_memvarProofSummedVarlEunsignedsPintgR,G__setup_memfuncProofSummedVarlEunsignedsPintgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ProofSummedVarlElonggR),sizeof(ProofSummedVar<long>),-1,323840,(char*)NULL,G__setup_memvarProofSummedVarlElonggR,G__setup_memfuncProofSummedVarlElonggR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPlonggR),sizeof(ProofSummedVar<unsigned long>),-1,323840,(char*)NULL,G__setup_memvarProofSummedVarlEunsignedsPlonggR,G__setup_memfuncProofSummedVarlEunsignedsPlonggR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ProofSummedVarlElongsPlonggR),sizeof(ProofSummedVar<long long>),-1,323840,(char*)NULL,G__setup_memvarProofSummedVarlElongsPlonggR,G__setup_memfuncProofSummedVarlElongsPlonggR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ProofSummedVarlEunsignedsPlongsPlonggR),sizeof(ProofSummedVar<unsigned long long>),-1,323840,(char*)NULL,G__setup_memvarProofSummedVarlEunsignedsPlongsPlonggR,G__setup_memfuncProofSummedVarlEunsignedsPlongsPlonggR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ProofSummedVarlEfloatgR),sizeof(ProofSummedVar<float>),-1,323840,(char*)NULL,G__setup_memvarProofSummedVarlEfloatgR,G__setup_memfuncProofSummedVarlEfloatgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ProofSummedVarlEdoublegR),sizeof(ProofSummedVar<double>),-1,323840,(char*)NULL,G__setup_memvarProofSummedVarlEdoublegR,G__setup_memfuncProofSummedVarlEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR),sizeof(ProofSummedVar<vector<short,allocator<short> > >),-1,323840,(char*)NULL,G__setup_memvarProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR,G__setup_memfuncProofSummedVarlEvectorlEshortcOallocatorlEshortgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR),sizeof(ProofSummedVar<vector<unsigned short,allocator<unsigned short> > >),-1,323840,(char*)NULL,G__setup_memvarProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR,G__setup_memfuncProofSummedVarlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR),sizeof(ProofSummedVar<vector<int,allocator<int> > >),-1,323840,(char*)NULL,G__setup_memvarProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR,G__setup_memfuncProofSummedVarlEvectorlEintcOallocatorlEintgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR),sizeof(ProofSummedVar<vector<unsigned int,allocator<unsigned int> > >),-1,323840,(char*)NULL,G__setup_memvarProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR,G__setup_memfuncProofSummedVarlEvectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR),sizeof(ProofSummedVar<vector<long,allocator<long> > >),-1,323840,(char*)NULL,G__setup_memvarProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR,G__setup_memfuncProofSummedVarlEvectorlElongcOallocatorlElonggRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR),sizeof(ProofSummedVar<vector<unsigned long,allocator<unsigned long> > >),-1,323840,(char*)NULL,G__setup_memvarProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR,G__setup_memfuncProofSummedVarlEvectorlEunsignedsPlongcOallocatorlEunsignedsPlonggRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgR),sizeof(ProofSummedVar<vector<long long,allocator<long long> > >),-1,323840,(char*)NULL,G__setup_memvarProofSummedVarlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgR,G__setup_memfuncProofSummedVarlEvectorlElongsPlongcOallocatorlElongsPlonggRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgRsPgR),sizeof(ProofSummedVar<vector<unsigned long long,allocator<unsigned long long> > >),-1,323840,(char*)NULL,G__setup_memvarProofSummedVarlEvectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgRsPgR,G__setup_memfuncProofSummedVarlEvectorlEunsignedsPlongsPlongcOallocatorlEunsignedsPlongsPlonggRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR),sizeof(ProofSummedVar<vector<float,allocator<float> > >),-1,323840,(char*)NULL,G__setup_memvarProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR,G__setup_memfuncProofSummedVarlEvectorlEfloatcOallocatorlEfloatgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR),sizeof(ProofSummedVar<vector<double,allocator<double> > >),-1,323840,(char*)NULL,G__setup_memvarProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR,G__setup_memfuncProofSummedVarlEvectorlEdoublecOallocatorlEdoublegRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_pairlEstringcOunsignedsPintgR),sizeof(pair<string,unsigned int>),-1,297216,(char*)NULL,G__setup_memvarpairlEstringcOunsignedsPintgR,G__setup_memfuncpairlEstringcOunsignedsPintgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_allocatorlEpairlEconstsPstringcOunsignedsPintgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR),sizeof(map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > >),-1,298752,(char*)NULL,G__setup_memvarmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR,G__setup_memfuncmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_maplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRcLcLreverse_iterator);
   G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_pairlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRcLcLiteratorcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR),sizeof(ProofSummedVar<map<string,int,less<string>,allocator<pair<const string,int> > > >),-1,323840,(char*)NULL,G__setup_memvarProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR,G__setup_memfuncProofSummedVarlEmaplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR),sizeof(ProofSummedVar<map<string,unsigned int,less<string>,allocator<pair<const string,unsigned int> > > >),-1,323840,(char*)NULL,G__setup_memvarProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR,G__setup_memfuncProofSummedVarlEmaplEstringcOunsignedsPintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOunsignedsPintgRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR),sizeof(ProofSummedVar<map<string,float,less<string>,allocator<pair<const string,float> > > >),-1,323840,(char*)NULL,G__setup_memvarProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR,G__setup_memfuncProofSummedVarlEmaplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFramePlugIns_DictLN_ProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR),sizeof(ProofSummedVar<map<string,double,less<string>,allocator<pair<const string,double> > > >),-1,323840,(char*)NULL,G__setup_memvarProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR,G__setup_memfuncProofSummedVarlEmaplEstringcOdoublecOlesslEstringgRcOallocatorlEpairlEconstsPstringcOdoublegRsPgRsPgRsPgR);
}
extern "C" void G__cpp_setupSFramePlugIns_Dict(void) {
  G__check_setup_version(30051515,"G__cpp_setupSFramePlugIns_Dict()");
  G__set_cpp_environmentSFramePlugIns_Dict();
  G__cpp_setup_tagtableSFramePlugIns_Dict();

  G__cpp_setup_inheritanceSFramePlugIns_Dict();

  G__cpp_setup_typetableSFramePlugIns_Dict();

  G__cpp_setup_memvarSFramePlugIns_Dict();

  G__cpp_setup_memfuncSFramePlugIns_Dict();
  G__cpp_setup_globalSFramePlugIns_Dict();
  G__cpp_setup_funcSFramePlugIns_Dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncSFramePlugIns_Dict();
  return;
}
class G__cpp_setup_initSFramePlugIns_Dict {
  public:
    G__cpp_setup_initSFramePlugIns_Dict() { G__add_setup_func("SFramePlugIns_Dict",(G__incsetup)(&G__cpp_setupSFramePlugIns_Dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initSFramePlugIns_Dict() { G__remove_setup_func("SFramePlugIns_Dict"); }
};
G__cpp_setup_initSFramePlugIns_Dict G__cpp_setup_initializerSFramePlugIns_Dict;

