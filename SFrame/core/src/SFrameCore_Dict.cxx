//
// File generated by /cvmfs/atlas.cern.ch/repo/sw/software/x86_64-slc6-gcc47-opt/17.8.0/LCGCMT/LCGCMT_65/InstallArea/x86_64-slc6-gcc47-opt/bin/../../../../../sw/lcg/app/releases/ROOT/5.34.07a/x86_64-slc6-gcc47-opt/root/bin/rootcint at Thu Feb  5 07:44:14 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME srcdISFrameCore_Dict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "SFrameCore_Dict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ISCycleBaseConfig ISCycleBaseConfig;
      #else
      class ISCycleBaseConfig  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ISCycleBaseConfig() throw() {};
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ISCycleBaseHist ISCycleBaseHist;
      #else
      class ISCycleBaseHist  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ISCycleBaseHist() throw() {};
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::ISCycleBaseNTuple ISCycleBaseNTuple;
      #else
      class ISCycleBaseNTuple  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~ISCycleBaseNTuple() throw() {};
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef pair< int, vector< ::STree, allocator< ::STree >  >  > pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR;
      #else
      class pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR  {
         public:
         //friend XX;
         int first; //
         vector< ::STree, allocator< ::STree >  > second; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef pair< ::string, ::string > pairlEstringcOstringgR;
      #else
      class pairlEstringcOstringgR  {
         public:
         //friend XX;
         string first; //
         string second; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void SCycleConfig_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SCycleConfig(void *p = 0);
   static void *newArray_SCycleConfig(Long_t size, void *p);
   static void delete_SCycleConfig(void *p);
   static void deleteArray_SCycleConfig(void *p);
   static void destruct_SCycleConfig(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SCycleConfig*)
   {
      ::SCycleConfig *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SCycleConfig >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SCycleConfig", ::SCycleConfig::Class_Version(), "./include/SCycleConfig.h", 42,
                  typeid(::SCycleConfig), DefineBehavior(ptr, ptr),
                  &::SCycleConfig::Dictionary, isa_proxy, 4,
                  sizeof(::SCycleConfig) );
      instance.SetNew(&new_SCycleConfig);
      instance.SetNewArray(&newArray_SCycleConfig);
      instance.SetDelete(&delete_SCycleConfig);
      instance.SetDeleteArray(&deleteArray_SCycleConfig);
      instance.SetDestructor(&destruct_SCycleConfig);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SCycleConfig*)
   {
      return GenerateInitInstanceLocal((::SCycleConfig*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SCycleConfig*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void ISCycleBaseConfig_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ISCycleBaseConfig_Dictionary();
   static void delete_ISCycleBaseConfig(void *p);
   static void deleteArray_ISCycleBaseConfig(void *p);
   static void destruct_ISCycleBaseConfig(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ISCycleBaseConfig*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ISCycleBaseConfig) == sizeof(::ROOT::Shadow::ISCycleBaseConfig));
      ::ISCycleBaseConfig *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::ISCycleBaseConfig),0);
      static ::ROOT::TGenericClassInfo 
         instance("ISCycleBaseConfig", "./include/ISCycleBaseConfig.h", 37,
                  typeid(::ISCycleBaseConfig), DefineBehavior(ptr, ptr),
                  &ISCycleBaseConfig_ShowMembers, &ISCycleBaseConfig_Dictionary, isa_proxy, 4,
                  sizeof(::ISCycleBaseConfig) );
      instance.SetDelete(&delete_ISCycleBaseConfig);
      instance.SetDeleteArray(&deleteArray_ISCycleBaseConfig);
      instance.SetDestructor(&destruct_ISCycleBaseConfig);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ISCycleBaseConfig*)
   {
      return GenerateInitInstanceLocal((::ISCycleBaseConfig*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ISCycleBaseConfig*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ISCycleBaseConfig_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ISCycleBaseConfig*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void ISCycleBaseHist_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ISCycleBaseHist_Dictionary();
   static void delete_ISCycleBaseHist(void *p);
   static void deleteArray_ISCycleBaseHist(void *p);
   static void destruct_ISCycleBaseHist(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ISCycleBaseHist*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ISCycleBaseHist) == sizeof(::ROOT::Shadow::ISCycleBaseHist));
      ::ISCycleBaseHist *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::ISCycleBaseHist),0);
      static ::ROOT::TGenericClassInfo 
         instance("ISCycleBaseHist", "./include/ISCycleBaseHist.h", 33,
                  typeid(::ISCycleBaseHist), DefineBehavior(ptr, ptr),
                  &ISCycleBaseHist_ShowMembers, &ISCycleBaseHist_Dictionary, isa_proxy, 4,
                  sizeof(::ISCycleBaseHist) );
      instance.SetDelete(&delete_ISCycleBaseHist);
      instance.SetDeleteArray(&deleteArray_ISCycleBaseHist);
      instance.SetDestructor(&destruct_ISCycleBaseHist);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ISCycleBaseHist*)
   {
      return GenerateInitInstanceLocal((::ISCycleBaseHist*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ISCycleBaseHist*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ISCycleBaseHist_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ISCycleBaseHist*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SInputData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SInputData(void *p = 0);
   static void *newArray_SInputData(Long_t size, void *p);
   static void delete_SInputData(void *p);
   static void deleteArray_SInputData(void *p);
   static void destruct_SInputData(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SInputData*)
   {
      ::SInputData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SInputData >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SInputData", ::SInputData::Class_Version(), "./include/SInputData.h", 202,
                  typeid(::SInputData), DefineBehavior(ptr, ptr),
                  &::SInputData::Dictionary, isa_proxy, 4,
                  sizeof(::SInputData) );
      instance.SetNew(&new_SInputData);
      instance.SetNewArray(&newArray_SInputData);
      instance.SetDelete(&delete_SInputData);
      instance.SetDeleteArray(&deleteArray_SInputData);
      instance.SetDestructor(&destruct_SInputData);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SInputData*)
   {
      return GenerateInitInstanceLocal((::SInputData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SInputData*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void ISCycleBaseNTuple_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void ISCycleBaseNTuple_Dictionary();
   static void delete_ISCycleBaseNTuple(void *p);
   static void deleteArray_ISCycleBaseNTuple(void *p);
   static void destruct_ISCycleBaseNTuple(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ISCycleBaseNTuple*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::ISCycleBaseNTuple) == sizeof(::ROOT::Shadow::ISCycleBaseNTuple));
      ::ISCycleBaseNTuple *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::ISCycleBaseNTuple),0);
      static ::ROOT::TGenericClassInfo 
         instance("ISCycleBaseNTuple", "./include/ISCycleBaseNTuple.h", 44,
                  typeid(::ISCycleBaseNTuple), DefineBehavior(ptr, ptr),
                  &ISCycleBaseNTuple_ShowMembers, &ISCycleBaseNTuple_Dictionary, isa_proxy, 4,
                  sizeof(::ISCycleBaseNTuple) );
      instance.SetDelete(&delete_ISCycleBaseNTuple);
      instance.SetDeleteArray(&deleteArray_ISCycleBaseNTuple);
      instance.SetDestructor(&destruct_ISCycleBaseNTuple);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ISCycleBaseNTuple*)
   {
      return GenerateInitInstanceLocal((::ISCycleBaseNTuple*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ISCycleBaseNTuple*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void ISCycleBaseNTuple_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::ISCycleBaseNTuple*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SCycleBaseBase_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SCycleBaseBase(void *p = 0);
   static void *newArray_SCycleBaseBase(Long_t size, void *p);
   static void delete_SCycleBaseBase(void *p);
   static void deleteArray_SCycleBaseBase(void *p);
   static void destruct_SCycleBaseBase(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SCycleBaseBase*)
   {
      ::SCycleBaseBase *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SCycleBaseBase >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SCycleBaseBase", ::SCycleBaseBase::Class_Version(), "./include/SCycleBaseBase.h", 32,
                  typeid(::SCycleBaseBase), DefineBehavior(ptr, ptr),
                  &::SCycleBaseBase::Dictionary, isa_proxy, 4,
                  sizeof(::SCycleBaseBase) );
      instance.SetNew(&new_SCycleBaseBase);
      instance.SetNewArray(&newArray_SCycleBaseBase);
      instance.SetDelete(&delete_SCycleBaseBase);
      instance.SetDeleteArray(&deleteArray_SCycleBaseBase);
      instance.SetDestructor(&destruct_SCycleBaseBase);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SCycleBaseBase*)
   {
      return GenerateInitInstanceLocal((::SCycleBaseBase*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SCycleBaseBase*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SCycleBaseExec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_SCycleBaseExec(void *p);
   static void deleteArray_SCycleBaseExec(void *p);
   static void destruct_SCycleBaseExec(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SCycleBaseExec*)
   {
      ::SCycleBaseExec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SCycleBaseExec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SCycleBaseExec", ::SCycleBaseExec::Class_Version(), "./include/SCycleBaseExec.h", 50,
                  typeid(::SCycleBaseExec), DefineBehavior(ptr, ptr),
                  &::SCycleBaseExec::Dictionary, isa_proxy, 4,
                  sizeof(::SCycleBaseExec) );
      instance.SetDelete(&delete_SCycleBaseExec);
      instance.SetDeleteArray(&deleteArray_SCycleBaseExec);
      instance.SetDestructor(&destruct_SCycleBaseExec);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SCycleBaseExec*)
   {
      return GenerateInitInstanceLocal((::SCycleBaseExec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SCycleBaseExec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void ISCycleBase_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_ISCycleBase(void *p);
   static void deleteArray_ISCycleBase(void *p);
   static void destruct_ISCycleBase(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ISCycleBase*)
   {
      ::ISCycleBase *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ISCycleBase >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ISCycleBase", ::ISCycleBase::Class_Version(), "./include/ISCycleBase.h", 38,
                  typeid(::ISCycleBase), DefineBehavior(ptr, ptr),
                  &::ISCycleBase::Dictionary, isa_proxy, 4,
                  sizeof(::ISCycleBase) );
      instance.SetDelete(&delete_ISCycleBase);
      instance.SetDeleteArray(&deleteArray_ISCycleBase);
      instance.SetDestructor(&destruct_ISCycleBase);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ISCycleBase*)
   {
      return GenerateInitInstanceLocal((::ISCycleBase*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ISCycleBase*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SCycleBaseNTuple_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_SCycleBaseNTuple(void *p);
   static void deleteArray_SCycleBaseNTuple(void *p);
   static void destruct_SCycleBaseNTuple(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SCycleBaseNTuple*)
   {
      ::SCycleBaseNTuple *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SCycleBaseNTuple >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SCycleBaseNTuple", ::SCycleBaseNTuple::Class_Version(), "./include/SCycleBaseNTuple.h", 49,
                  typeid(::SCycleBaseNTuple), DefineBehavior(ptr, ptr),
                  &::SCycleBaseNTuple::Dictionary, isa_proxy, 4,
                  sizeof(::SCycleBaseNTuple) );
      instance.SetDelete(&delete_SCycleBaseNTuple);
      instance.SetDeleteArray(&deleteArray_SCycleBaseNTuple);
      instance.SetDestructor(&destruct_SCycleBaseNTuple);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SCycleBaseNTuple*)
   {
      return GenerateInitInstanceLocal((::SCycleBaseNTuple*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SCycleBaseNTuple*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SCycleBaseHist_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_SCycleBaseHist(void *p);
   static void deleteArray_SCycleBaseHist(void *p);
   static void destruct_SCycleBaseHist(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SCycleBaseHist*)
   {
      ::SCycleBaseHist *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SCycleBaseHist >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SCycleBaseHist", ::SCycleBaseHist::Class_Version(), "./include/SCycleBaseHist.h", 50,
                  typeid(::SCycleBaseHist), DefineBehavior(ptr, ptr),
                  &::SCycleBaseHist::Dictionary, isa_proxy, 4,
                  sizeof(::SCycleBaseHist) );
      instance.SetDelete(&delete_SCycleBaseHist);
      instance.SetDeleteArray(&deleteArray_SCycleBaseHist);
      instance.SetDestructor(&destruct_SCycleBaseHist);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SCycleBaseHist*)
   {
      return GenerateInitInstanceLocal((::SCycleBaseHist*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SCycleBaseHist*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SGeneratorCut_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SGeneratorCut(void *p = 0);
   static void *newArray_SGeneratorCut(Long_t size, void *p);
   static void delete_SGeneratorCut(void *p);
   static void deleteArray_SGeneratorCut(void *p);
   static void destruct_SGeneratorCut(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SGeneratorCut*)
   {
      ::SGeneratorCut *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SGeneratorCut >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SGeneratorCut", ::SGeneratorCut::Class_Version(), "./include/SGeneratorCut.h", 30,
                  typeid(::SGeneratorCut), DefineBehavior(ptr, ptr),
                  &::SGeneratorCut::Dictionary, isa_proxy, 4,
                  sizeof(::SGeneratorCut) );
      instance.SetNew(&new_SGeneratorCut);
      instance.SetNewArray(&newArray_SGeneratorCut);
      instance.SetDelete(&delete_SGeneratorCut);
      instance.SetDeleteArray(&deleteArray_SGeneratorCut);
      instance.SetDestructor(&destruct_SGeneratorCut);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SGeneratorCut*)
   {
      return GenerateInitInstanceLocal((::SGeneratorCut*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SGeneratorCut*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SDataSet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SDataSet(void *p = 0);
   static void *newArray_SDataSet(Long_t size, void *p);
   static void delete_SDataSet(void *p);
   static void deleteArray_SDataSet(void *p);
   static void destruct_SDataSet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SDataSet*)
   {
      ::SDataSet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SDataSet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SDataSet", ::SDataSet::Class_Version(), "./include/SInputData.h", 45,
                  typeid(::SDataSet), DefineBehavior(ptr, ptr),
                  &::SDataSet::Dictionary, isa_proxy, 4,
                  sizeof(::SDataSet) );
      instance.SetNew(&new_SDataSet);
      instance.SetNewArray(&newArray_SDataSet);
      instance.SetDelete(&delete_SDataSet);
      instance.SetDeleteArray(&deleteArray_SDataSet);
      instance.SetDestructor(&destruct_SDataSet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SDataSet*)
   {
      return GenerateInitInstanceLocal((::SDataSet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SDataSet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SFile_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SFile(void *p = 0);
   static void *newArray_SFile(Long_t size, void *p);
   static void delete_SFile(void *p);
   static void deleteArray_SFile(void *p);
   static void destruct_SFile(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SFile*)
   {
      ::SFile *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SFile >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SFile", ::SFile::Class_Version(), "./include/SInputData.h", 94,
                  typeid(::SFile), DefineBehavior(ptr, ptr),
                  &::SFile::Dictionary, isa_proxy, 4,
                  sizeof(::SFile) );
      instance.SetNew(&new_SFile);
      instance.SetNewArray(&newArray_SFile);
      instance.SetDelete(&delete_SFile);
      instance.SetDeleteArray(&deleteArray_SFile);
      instance.SetDestructor(&destruct_SFile);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SFile*)
   {
      return GenerateInitInstanceLocal((::SFile*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SFile*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void STree_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_STree(void *p = 0);
   static void *newArray_STree(Long_t size, void *p);
   static void delete_STree(void *p);
   static void deleteArray_STree(void *p);
   static void destruct_STree(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::STree*)
   {
      ::STree *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::STree >(0);
      static ::ROOT::TGenericClassInfo 
         instance("STree", ::STree::Class_Version(), "./include/SInputData.h", 151,
                  typeid(::STree), DefineBehavior(ptr, ptr),
                  &::STree::Dictionary, isa_proxy, 4,
                  sizeof(::STree) );
      instance.SetNew(&new_STree);
      instance.SetNewArray(&newArray_STree);
      instance.SetDelete(&delete_STree);
      instance.SetDeleteArray(&deleteArray_STree);
      instance.SetDestructor(&destruct_STree);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::STree*)
   {
      return GenerateInitInstanceLocal((::STree*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::STree*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR_Dictionary();
   static void *new_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR(void *p = 0);
   static void *newArray_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR(Long_t size, void *p);
   static void delete_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR(void *p);
   static void deleteArray_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR(void *p);
   static void destruct_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const pair<int,vector<STree,allocator<STree> > >*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(pair<int,vector<STree,allocator<STree> > >) == sizeof(::ROOT::Shadow::pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR));
      pair<int,vector<STree,allocator<STree> > > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(pair<int,vector<STree,allocator<STree> > >),0);
      static ::ROOT::TGenericClassInfo 
         instance("pair<int,vector<STree,allocator<STree> > >", "/cvmfs/atlas.cern.ch/repo/sw/software/x86_64-slc6-gcc47-opt/17.8.0/sw/lcg/app/releases/ROOT/5.34.07a/x86_64-slc6-gcc47-opt/root/cint/cint/lib/prec_stl/utility", 17,
                  typeid(pair<int,vector<STree,allocator<STree> > >), DefineBehavior(ptr, ptr),
                  &pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR_ShowMembers, &pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(pair<int,vector<STree,allocator<STree> > >) );
      instance.SetNew(&new_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR);
      instance.SetNewArray(&newArray_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR);
      instance.SetDelete(&delete_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR);
      instance.SetDeleteArray(&deleteArray_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR);
      instance.SetDestructor(&destruct_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const pair<int,vector<STree,allocator<STree> > >*)
   {
      return GenerateInitInstanceLocal((pair<int,vector<STree,allocator<STree> > >*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const pair<int,vector<STree,allocator<STree> > >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const pair<int,vector<STree,allocator<STree> > >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void pairlEstringcOstringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void pairlEstringcOstringgR_Dictionary();
   static void *new_pairlEstringcOstringgR(void *p = 0);
   static void *newArray_pairlEstringcOstringgR(Long_t size, void *p);
   static void delete_pairlEstringcOstringgR(void *p);
   static void deleteArray_pairlEstringcOstringgR(void *p);
   static void destruct_pairlEstringcOstringgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const pair<string,string>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(pair<string,string>) == sizeof(::ROOT::Shadow::pairlEstringcOstringgR));
      pair<string,string> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(pair<string,string>),0);
      static ::ROOT::TGenericClassInfo 
         instance("pair<string,string>", "/cvmfs/atlas.cern.ch/repo/sw/software/x86_64-slc6-gcc47-opt/17.8.0/sw/lcg/app/releases/ROOT/5.34.07a/x86_64-slc6-gcc47-opt/root/cint/cint/lib/prec_stl/utility", 17,
                  typeid(pair<string,string>), DefineBehavior(ptr, ptr),
                  &pairlEstringcOstringgR_ShowMembers, &pairlEstringcOstringgR_Dictionary, isa_proxy, 4,
                  sizeof(pair<string,string>) );
      instance.SetNew(&new_pairlEstringcOstringgR);
      instance.SetNewArray(&newArray_pairlEstringcOstringgR);
      instance.SetDelete(&delete_pairlEstringcOstringgR);
      instance.SetDeleteArray(&deleteArray_pairlEstringcOstringgR);
      instance.SetDestructor(&destruct_pairlEstringcOstringgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const pair<string,string>*)
   {
      return GenerateInitInstanceLocal((pair<string,string>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const pair<string,string>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void pairlEstringcOstringgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const pair<string,string>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void SCycleBaseConfig_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SCycleBaseConfig(void *p = 0);
   static void *newArray_SCycleBaseConfig(Long_t size, void *p);
   static void delete_SCycleBaseConfig(void *p);
   static void deleteArray_SCycleBaseConfig(void *p);
   static void destruct_SCycleBaseConfig(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SCycleBaseConfig*)
   {
      ::SCycleBaseConfig *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SCycleBaseConfig >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SCycleBaseConfig", ::SCycleBaseConfig::Class_Version(), "./include/SCycleBaseConfig.h", 48,
                  typeid(::SCycleBaseConfig), DefineBehavior(ptr, ptr),
                  &::SCycleBaseConfig::Dictionary, isa_proxy, 4,
                  sizeof(::SCycleBaseConfig) );
      instance.SetNew(&new_SCycleBaseConfig);
      instance.SetNewArray(&newArray_SCycleBaseConfig);
      instance.SetDelete(&delete_SCycleBaseConfig);
      instance.SetDeleteArray(&deleteArray_SCycleBaseConfig);
      instance.SetDestructor(&destruct_SCycleBaseConfig);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SCycleBaseConfig*)
   {
      return GenerateInitInstanceLocal((::SCycleBaseConfig*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SCycleBaseConfig*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SCycleBase_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_SCycleBase(void *p);
   static void deleteArray_SCycleBase(void *p);
   static void destruct_SCycleBase(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SCycleBase*)
   {
      ::SCycleBase *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SCycleBase >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SCycleBase", ::SCycleBase::Class_Version(), "./include/SCycleBase.h", 51,
                  typeid(::SCycleBase), DefineBehavior(ptr, ptr),
                  &::SCycleBase::Dictionary, isa_proxy, 4,
                  sizeof(::SCycleBase) );
      instance.SetDelete(&delete_SCycleBase);
      instance.SetDeleteArray(&deleteArray_SCycleBase);
      instance.SetDestructor(&destruct_SCycleBase);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SCycleBase*)
   {
      return GenerateInitInstanceLocal((::SCycleBase*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SCycleBase*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SCycleOutput_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SCycleOutput(void *p = 0);
   static void *newArray_SCycleOutput(Long_t size, void *p);
   static void delete_SCycleOutput(void *p);
   static void deleteArray_SCycleOutput(void *p);
   static void destruct_SCycleOutput(void *p);
   static Long64_t merge_SCycleOutput(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SCycleOutput*)
   {
      ::SCycleOutput *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SCycleOutput >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SCycleOutput", ::SCycleOutput::Class_Version(), "./include/SCycleOutput.h", 43,
                  typeid(::SCycleOutput), DefineBehavior(ptr, ptr),
                  &::SCycleOutput::Dictionary, isa_proxy, 4,
                  sizeof(::SCycleOutput) );
      instance.SetNew(&new_SCycleOutput);
      instance.SetNewArray(&newArray_SCycleOutput);
      instance.SetDelete(&delete_SCycleOutput);
      instance.SetDeleteArray(&deleteArray_SCycleOutput);
      instance.SetDestructor(&destruct_SCycleOutput);
      instance.SetMerge(&merge_SCycleOutput);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SCycleOutput*)
   {
      return GenerateInitInstanceLocal((::SCycleOutput*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SCycleOutput*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SCycleStatistics_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SCycleStatistics(void *p = 0);
   static void *newArray_SCycleStatistics(Long_t size, void *p);
   static void delete_SCycleStatistics(void *p);
   static void deleteArray_SCycleStatistics(void *p);
   static void destruct_SCycleStatistics(void *p);
   static Long64_t merge_SCycleStatistics(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SCycleStatistics*)
   {
      ::SCycleStatistics *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SCycleStatistics >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SCycleStatistics", ::SCycleStatistics::Class_Version(), "./include/SCycleStatistics.h", 39,
                  typeid(::SCycleStatistics), DefineBehavior(ptr, ptr),
                  &::SCycleStatistics::Dictionary, isa_proxy, 4,
                  sizeof(::SCycleStatistics) );
      instance.SetNew(&new_SCycleStatistics);
      instance.SetNewArray(&newArray_SCycleStatistics);
      instance.SetDelete(&delete_SCycleStatistics);
      instance.SetDeleteArray(&deleteArray_SCycleStatistics);
      instance.SetDestructor(&destruct_SCycleStatistics);
      instance.SetMerge(&merge_SCycleStatistics);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SCycleStatistics*)
   {
      return GenerateInitInstanceLocal((::SCycleStatistics*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SCycleStatistics*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SOutputFile_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_SOutputFile(void *p);
   static void deleteArray_SOutputFile(void *p);
   static void destruct_SOutputFile(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SOutputFile*)
   {
      ::SOutputFile *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SOutputFile >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SOutputFile", ::SOutputFile::Class_Version(), "./include/SOutputFile.h", 32,
                  typeid(::SOutputFile), DefineBehavior(ptr, ptr),
                  &::SOutputFile::Dictionary, isa_proxy, 4,
                  sizeof(::SOutputFile) );
      instance.SetDelete(&delete_SOutputFile);
      instance.SetDeleteArray(&deleteArray_SOutputFile);
      instance.SetDestructor(&destruct_SOutputFile);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SOutputFile*)
   {
      return GenerateInitInstanceLocal((::SOutputFile*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SOutputFile*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *SCycleConfig::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SCycleConfig::Class_Name()
{
   return "SCycleConfig";
}

//______________________________________________________________________________
const char *SCycleConfig::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SCycleConfig*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SCycleConfig::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SCycleConfig*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SCycleConfig::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SCycleConfig*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SCycleConfig::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SCycleConfig*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *SInputData::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SInputData::Class_Name()
{
   return "SInputData";
}

//______________________________________________________________________________
const char *SInputData::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SInputData*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SInputData::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SInputData*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SInputData::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SInputData*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SInputData::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SInputData*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *SCycleBaseBase::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SCycleBaseBase::Class_Name()
{
   return "SCycleBaseBase";
}

//______________________________________________________________________________
const char *SCycleBaseBase::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SCycleBaseBase*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SCycleBaseBase::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SCycleBaseBase*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SCycleBaseBase::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SCycleBaseBase*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SCycleBaseBase::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SCycleBaseBase*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *SCycleBaseExec::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SCycleBaseExec::Class_Name()
{
   return "SCycleBaseExec";
}

//______________________________________________________________________________
const char *SCycleBaseExec::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SCycleBaseExec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SCycleBaseExec::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SCycleBaseExec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SCycleBaseExec::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SCycleBaseExec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SCycleBaseExec::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SCycleBaseExec*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *ISCycleBase::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *ISCycleBase::Class_Name()
{
   return "ISCycleBase";
}

//______________________________________________________________________________
const char *ISCycleBase::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ISCycleBase*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ISCycleBase::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ISCycleBase*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ISCycleBase::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ISCycleBase*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ISCycleBase::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ISCycleBase*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *SCycleBaseNTuple::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SCycleBaseNTuple::Class_Name()
{
   return "SCycleBaseNTuple";
}

//______________________________________________________________________________
const char *SCycleBaseNTuple::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SCycleBaseNTuple*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SCycleBaseNTuple::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SCycleBaseNTuple*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SCycleBaseNTuple::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SCycleBaseNTuple*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SCycleBaseNTuple::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SCycleBaseNTuple*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *SCycleBaseHist::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SCycleBaseHist::Class_Name()
{
   return "SCycleBaseHist";
}

//______________________________________________________________________________
const char *SCycleBaseHist::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SCycleBaseHist*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SCycleBaseHist::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SCycleBaseHist*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SCycleBaseHist::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SCycleBaseHist*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SCycleBaseHist::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SCycleBaseHist*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *SGeneratorCut::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SGeneratorCut::Class_Name()
{
   return "SGeneratorCut";
}

//______________________________________________________________________________
const char *SGeneratorCut::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SGeneratorCut*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SGeneratorCut::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SGeneratorCut*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SGeneratorCut::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SGeneratorCut*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SGeneratorCut::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SGeneratorCut*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *SDataSet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SDataSet::Class_Name()
{
   return "SDataSet";
}

//______________________________________________________________________________
const char *SDataSet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SDataSet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SDataSet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SDataSet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SDataSet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SDataSet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SDataSet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SDataSet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *SFile::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SFile::Class_Name()
{
   return "SFile";
}

//______________________________________________________________________________
const char *SFile::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SFile*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SFile::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SFile*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SFile::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SFile*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SFile::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SFile*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *STree::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *STree::Class_Name()
{
   return "STree";
}

//______________________________________________________________________________
const char *STree::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::STree*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int STree::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::STree*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void STree::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::STree*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *STree::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::STree*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *SCycleBaseConfig::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SCycleBaseConfig::Class_Name()
{
   return "SCycleBaseConfig";
}

//______________________________________________________________________________
const char *SCycleBaseConfig::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SCycleBaseConfig*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SCycleBaseConfig::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SCycleBaseConfig*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SCycleBaseConfig::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SCycleBaseConfig*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SCycleBaseConfig::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SCycleBaseConfig*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *SCycleBase::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SCycleBase::Class_Name()
{
   return "SCycleBase";
}

//______________________________________________________________________________
const char *SCycleBase::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SCycleBase*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SCycleBase::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SCycleBase*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SCycleBase::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SCycleBase*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SCycleBase::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SCycleBase*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *SCycleOutput::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SCycleOutput::Class_Name()
{
   return "SCycleOutput";
}

//______________________________________________________________________________
const char *SCycleOutput::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SCycleOutput*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SCycleOutput::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SCycleOutput*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SCycleOutput::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SCycleOutput*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SCycleOutput::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SCycleOutput*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *SCycleStatistics::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SCycleStatistics::Class_Name()
{
   return "SCycleStatistics";
}

//______________________________________________________________________________
const char *SCycleStatistics::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SCycleStatistics*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SCycleStatistics::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SCycleStatistics*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SCycleStatistics::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SCycleStatistics*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SCycleStatistics::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SCycleStatistics*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *SOutputFile::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SOutputFile::Class_Name()
{
   return "SOutputFile";
}

//______________________________________________________________________________
const char *SOutputFile::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SOutputFile*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SOutputFile::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SOutputFile*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SOutputFile::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SOutputFile*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SOutputFile::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SOutputFile*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void SGeneratorCut::Streamer(TBuffer &R__b)
{
   // Stream an object of class SGeneratorCut.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SGeneratorCut::Class(),this);
   } else {
      R__b.WriteClassBuffer(SGeneratorCut::Class(),this);
   }
}

//______________________________________________________________________________
void SGeneratorCut::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SGeneratorCut.
      TClass *R__cl = ::SGeneratorCut::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_tree", &m_tree);
      R__insp.InspectMember(m_tree, "m_tree.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_formula", &m_formula);
      R__insp.InspectMember(m_formula, "m_formula.");
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SGeneratorCut(void *p) {
      return  p ? new(p) ::SGeneratorCut : new ::SGeneratorCut;
   }
   static void *newArray_SGeneratorCut(Long_t nElements, void *p) {
      return p ? new(p) ::SGeneratorCut[nElements] : new ::SGeneratorCut[nElements];
   }
   // Wrapper around operator delete
   static void delete_SGeneratorCut(void *p) {
      delete ((::SGeneratorCut*)p);
   }
   static void deleteArray_SGeneratorCut(void *p) {
      delete [] ((::SGeneratorCut*)p);
   }
   static void destruct_SGeneratorCut(void *p) {
      typedef ::SGeneratorCut current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SGeneratorCut

//______________________________________________________________________________
void SDataSet::Streamer(TBuffer &R__b)
{
   // Stream an object of class SDataSet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SDataSet::Class(),this);
   } else {
      R__b.WriteClassBuffer(SDataSet::Class(),this);
   }
}

//______________________________________________________________________________
void SDataSet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SDataSet.
      TClass *R__cl = ::SDataSet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "name", &name);
      R__insp.InspectMember(name, "name.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lumi", &lumi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "events", &events);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SDataSet(void *p) {
      return  p ? new(p) ::SDataSet : new ::SDataSet;
   }
   static void *newArray_SDataSet(Long_t nElements, void *p) {
      return p ? new(p) ::SDataSet[nElements] : new ::SDataSet[nElements];
   }
   // Wrapper around operator delete
   static void delete_SDataSet(void *p) {
      delete ((::SDataSet*)p);
   }
   static void deleteArray_SDataSet(void *p) {
      delete [] ((::SDataSet*)p);
   }
   static void destruct_SDataSet(void *p) {
      typedef ::SDataSet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SDataSet

//______________________________________________________________________________
void SFile::Streamer(TBuffer &R__b)
{
   // Stream an object of class SFile.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SFile::Class(),this);
   } else {
      R__b.WriteClassBuffer(SFile::Class(),this);
   }
}

//______________________________________________________________________________
void SFile::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SFile.
      TClass *R__cl = ::SFile::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "file", &file);
      R__insp.InspectMember(file, "file.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lumi", &lumi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "events", &events);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SFile(void *p) {
      return  p ? new(p) ::SFile : new ::SFile;
   }
   static void *newArray_SFile(Long_t nElements, void *p) {
      return p ? new(p) ::SFile[nElements] : new ::SFile[nElements];
   }
   // Wrapper around operator delete
   static void delete_SFile(void *p) {
      delete ((::SFile*)p);
   }
   static void deleteArray_SFile(void *p) {
      delete [] ((::SFile*)p);
   }
   static void destruct_SFile(void *p) {
      typedef ::SFile current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SFile

//______________________________________________________________________________
void STree::Streamer(TBuffer &R__b)
{
   // Stream an object of class STree.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(STree::Class(),this);
   } else {
      R__b.WriteClassBuffer(STree::Class(),this);
   }
}

//______________________________________________________________________________
void STree::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class STree.
      TClass *R__cl = ::STree::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "treeName", &treeName);
      R__insp.InspectMember(treeName, "treeName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "type", &type);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_STree(void *p) {
      return  p ? new(p) ::STree : new ::STree;
   }
   static void *newArray_STree(Long_t nElements, void *p) {
      return p ? new(p) ::STree[nElements] : new ::STree[nElements];
   }
   // Wrapper around operator delete
   static void delete_STree(void *p) {
      delete ((::STree*)p);
   }
   static void deleteArray_STree(void *p) {
      delete [] ((::STree*)p);
   }
   static void destruct_STree(void *p) {
      typedef ::STree current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::STree

//______________________________________________________________________________
namespace ROOT {
   void pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class pair<int,vector<STree,allocator<STree> > >.
      typedef ::ROOT::Shadow::pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const pair<int,vector<STree,allocator<STree> > >*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "first", &sobj->first);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "second", (void*)&sobj->second);
      R__insp.InspectMember("vector<STree,allocator<STree> >", (void*)&sobj->second, "second.", false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) pair<int,vector<STree,allocator<STree> > > : new pair<int,vector<STree,allocator<STree> > >;
   }
   static void *newArray_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) pair<int,vector<STree,allocator<STree> > >[nElements] : new pair<int,vector<STree,allocator<STree> > >[nElements];
   }
   // Wrapper around operator delete
   static void delete_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR(void *p) {
      delete ((pair<int,vector<STree,allocator<STree> > >*)p);
   }
   static void deleteArray_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR(void *p) {
      delete [] ((pair<int,vector<STree,allocator<STree> > >*)p);
   }
   static void destruct_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR(void *p) {
      typedef pair<int,vector<STree,allocator<STree> > > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class pair<int,vector<STree,allocator<STree> > >

//______________________________________________________________________________
void SInputData::Streamer(TBuffer &R__b)
{
   // Stream an object of class SInputData.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SInputData::Class(),this);
   } else {
      R__b.WriteClassBuffer(SInputData::Class(),this);
   }
}

//______________________________________________________________________________
void SInputData::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SInputData.
      TClass *R__cl = ::SInputData::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_type", &m_type);
      R__insp.InspectMember(m_type, "m_type.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_version", &m_version);
      R__insp.InspectMember(m_version, "m_version.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_totalLumiGiven", &m_totalLumiGiven);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_gencuts", (void*)&m_gencuts);
      R__insp.InspectMember("vector<SGeneratorCut>", (void*)&m_gencuts, "m_gencuts.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_sfileIn", (void*)&m_sfileIn);
      R__insp.InspectMember("vector<SFile>", (void*)&m_sfileIn, "m_sfileIn.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_trees", (void*)&m_trees);
      R__insp.InspectMember("map<Int_t,std::vector<STree> >", (void*)&m_trees, "m_trees.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_dataSets", (void*)&m_dataSets);
      R__insp.InspectMember("vector<SDataSet>", (void*)&m_dataSets, "m_dataSets.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_totalLumiSum", &m_totalLumiSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_eventsTotal", &m_eventsTotal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_neventsmax", &m_neventsmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_neventsskip", &m_neventsskip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_cacheable", &m_cacheable);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_skipValid", &m_skipValid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_entry", &m_entry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_dset", &m_dset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_logger", (void*)&m_logger);
      R__insp.InspectMember("SLogger", (void*)&m_logger, "m_logger.", true);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SInputData(void *p) {
      return  p ? new(p) ::SInputData : new ::SInputData;
   }
   static void *newArray_SInputData(Long_t nElements, void *p) {
      return p ? new(p) ::SInputData[nElements] : new ::SInputData[nElements];
   }
   // Wrapper around operator delete
   static void delete_SInputData(void *p) {
      delete ((::SInputData*)p);
   }
   static void deleteArray_SInputData(void *p) {
      delete [] ((::SInputData*)p);
   }
   static void destruct_SInputData(void *p) {
      typedef ::SInputData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SInputData

//______________________________________________________________________________
namespace ROOT {
   void pairlEstringcOstringgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class pair<string,string>.
      typedef ::ROOT::Shadow::pairlEstringcOstringgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const pair<string,string>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "first", (void*)&sobj->first);
      R__insp.InspectMember("string", (void*)&sobj->first, "first.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "second", (void*)&sobj->second);
      R__insp.InspectMember("string", (void*)&sobj->second, "second.", false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_pairlEstringcOstringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) pair<string,string> : new pair<string,string>;
   }
   static void *newArray_pairlEstringcOstringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) pair<string,string>[nElements] : new pair<string,string>[nElements];
   }
   // Wrapper around operator delete
   static void delete_pairlEstringcOstringgR(void *p) {
      delete ((pair<string,string>*)p);
   }
   static void deleteArray_pairlEstringcOstringgR(void *p) {
      delete [] ((pair<string,string>*)p);
   }
   static void destruct_pairlEstringcOstringgR(void *p) {
      typedef pair<string,string> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class pair<string,string>

//______________________________________________________________________________
void SCycleConfig::Streamer(TBuffer &R__b)
{
   // Stream an object of class SCycleConfig.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SCycleConfig::Class(),this);
   } else {
      R__b.WriteClassBuffer(SCycleConfig::Class(),this);
   }
}

//______________________________________________________________________________
void SCycleConfig::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SCycleConfig.
      TClass *R__cl = ::SCycleConfig::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_cycleName", &m_cycleName);
      R__insp.InspectMember(m_cycleName, "m_cycleName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_mode", &m_mode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_server", &m_server);
      R__insp.InspectMember(m_server, "m_server.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_workdir", &m_workdir);
      R__insp.InspectMember(m_workdir, "m_workdir.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nodes", &m_nodes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_properties", (void*)&m_properties);
      R__insp.InspectMember("SCycleConfig::property_type", (void*)&m_properties, "m_properties.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_inputData", (void*)&m_inputData);
      R__insp.InspectMember("SCycleConfig::id_type", (void*)&m_inputData, "m_inputData.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_targetLumi", &m_targetLumi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_outputDirectory", &m_outputDirectory);
      R__insp.InspectMember(m_outputDirectory, "m_outputDirectory.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_postFix", &m_postFix);
      R__insp.InspectMember(m_postFix, "m_postFix.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_msgLevel", &m_msgLevel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_useTreeCache", &m_useTreeCache);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_cacheSize", &m_cacheSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_cacheLearnEntries", &m_cacheLearnEntries);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_processOnlyLocal", &m_processOnlyLocal);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SCycleConfig(void *p) {
      return  p ? new(p) ::SCycleConfig : new ::SCycleConfig;
   }
   static void *newArray_SCycleConfig(Long_t nElements, void *p) {
      return p ? new(p) ::SCycleConfig[nElements] : new ::SCycleConfig[nElements];
   }
   // Wrapper around operator delete
   static void delete_SCycleConfig(void *p) {
      delete ((::SCycleConfig*)p);
   }
   static void deleteArray_SCycleConfig(void *p) {
      delete [] ((::SCycleConfig*)p);
   }
   static void destruct_SCycleConfig(void *p) {
      typedef ::SCycleConfig current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SCycleConfig

//______________________________________________________________________________
void SCycleOutput::Streamer(TBuffer &R__b)
{
   // Stream an object of class SCycleOutput.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SCycleOutput::Class(),this);
   } else {
      R__b.WriteClassBuffer(SCycleOutput::Class(),this);
   }
}

//______________________________________________________________________________
void SCycleOutput::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SCycleOutput.
      TClass *R__cl = ::SCycleOutput::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_object", &m_object);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_path", &m_path);
      R__insp.InspectMember(m_path, "m_path.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_logger", (void*)&m_logger);
      R__insp.InspectMember("SLogger", (void*)&m_logger, "m_logger.", true);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SCycleOutput(void *p) {
      return  p ? new(p) ::SCycleOutput : new ::SCycleOutput;
   }
   static void *newArray_SCycleOutput(Long_t nElements, void *p) {
      return p ? new(p) ::SCycleOutput[nElements] : new ::SCycleOutput[nElements];
   }
   // Wrapper around operator delete
   static void delete_SCycleOutput(void *p) {
      delete ((::SCycleOutput*)p);
   }
   static void deleteArray_SCycleOutput(void *p) {
      delete [] ((::SCycleOutput*)p);
   }
   static void destruct_SCycleOutput(void *p) {
      typedef ::SCycleOutput current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_SCycleOutput(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::SCycleOutput*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::SCycleOutput

//______________________________________________________________________________
void SCycleStatistics::Streamer(TBuffer &R__b)
{
   // Stream an object of class SCycleStatistics.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SCycleStatistics::Class(),this);
   } else {
      R__b.WriteClassBuffer(SCycleStatistics::Class(),this);
   }
}

//______________________________________________________________________________
void SCycleStatistics::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SCycleStatistics.
      TClass *R__cl = ::SCycleStatistics::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_processedEvents", &m_processedEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_skippedEvents", &m_skippedEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_logger", (void*)&m_logger);
      R__insp.InspectMember("SLogger", (void*)&m_logger, "m_logger.", true);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SCycleStatistics(void *p) {
      return  p ? new(p) ::SCycleStatistics : new ::SCycleStatistics;
   }
   static void *newArray_SCycleStatistics(Long_t nElements, void *p) {
      return p ? new(p) ::SCycleStatistics[nElements] : new ::SCycleStatistics[nElements];
   }
   // Wrapper around operator delete
   static void delete_SCycleStatistics(void *p) {
      delete ((::SCycleStatistics*)p);
   }
   static void deleteArray_SCycleStatistics(void *p) {
      delete [] ((::SCycleStatistics*)p);
   }
   static void destruct_SCycleStatistics(void *p) {
      typedef ::SCycleStatistics current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_SCycleStatistics(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::SCycleStatistics*)obj)->Merge(coll);
   }
} // end of namespace ROOT for class ::SCycleStatistics

//______________________________________________________________________________
void SOutputFile::Streamer(TBuffer &R__b)
{
   // Stream an object of class SOutputFile.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SOutputFile::Class(),this);
   } else {
      R__b.WriteClassBuffer(SOutputFile::Class(),this);
   }
}

//______________________________________________________________________________
void SOutputFile::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SOutputFile.
      TClass *R__cl = ::SOutputFile::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fileName", &m_fileName);
      R__insp.InspectMember(m_fileName, "m_fileName.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_SOutputFile(void *p) {
      delete ((::SOutputFile*)p);
   }
   static void deleteArray_SOutputFile(void *p) {
      delete [] ((::SOutputFile*)p);
   }
   static void destruct_SOutputFile(void *p) {
      typedef ::SOutputFile current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SOutputFile

//______________________________________________________________________________
namespace ROOT {
   void ISCycleBaseConfig_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ISCycleBaseConfig.
      typedef ::ROOT::Shadow::ISCycleBaseConfig ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ISCycleBaseConfig*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_ISCycleBaseConfig(void *p) {
      delete ((::ISCycleBaseConfig*)p);
   }
   static void deleteArray_ISCycleBaseConfig(void *p) {
      delete [] ((::ISCycleBaseConfig*)p);
   }
   static void destruct_ISCycleBaseConfig(void *p) {
      typedef ::ISCycleBaseConfig current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::ISCycleBaseConfig

//______________________________________________________________________________
namespace ROOT {
   void ISCycleBaseHist_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ISCycleBaseHist.
      typedef ::ROOT::Shadow::ISCycleBaseHist ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ISCycleBaseHist*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_ISCycleBaseHist(void *p) {
      delete ((::ISCycleBaseHist*)p);
   }
   static void deleteArray_ISCycleBaseHist(void *p) {
      delete [] ((::ISCycleBaseHist*)p);
   }
   static void destruct_ISCycleBaseHist(void *p) {
      typedef ::ISCycleBaseHist current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::ISCycleBaseHist

//______________________________________________________________________________
namespace ROOT {
   void ISCycleBaseNTuple_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class ISCycleBaseNTuple.
      typedef ::ROOT::Shadow::ISCycleBaseNTuple ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::ISCycleBaseNTuple*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_ISCycleBaseNTuple(void *p) {
      delete ((::ISCycleBaseNTuple*)p);
   }
   static void deleteArray_ISCycleBaseNTuple(void *p) {
      delete [] ((::ISCycleBaseNTuple*)p);
   }
   static void destruct_ISCycleBaseNTuple(void *p) {
      typedef ::ISCycleBaseNTuple current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::ISCycleBaseNTuple

//______________________________________________________________________________
void SCycleBaseBase::Streamer(TBuffer &R__b)
{
   // Stream an object of class SCycleBaseBase.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SCycleBaseBase::Class(),this);
   } else {
      R__b.WriteClassBuffer(SCycleBaseBase::Class(),this);
   }
}

//______________________________________________________________________________
void SCycleBaseBase::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SCycleBaseBase.
      TClass *R__cl = ::SCycleBaseBase::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_logger", (void*)&m_logger);
      R__insp.InspectMember("SLogger", (void*)&m_logger, "m_logger.", false);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SCycleBaseBase(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SCycleBaseBase : new ::SCycleBaseBase;
   }
   static void *newArray_SCycleBaseBase(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SCycleBaseBase[nElements] : new ::SCycleBaseBase[nElements];
   }
   // Wrapper around operator delete
   static void delete_SCycleBaseBase(void *p) {
      delete ((::SCycleBaseBase*)p);
   }
   static void deleteArray_SCycleBaseBase(void *p) {
      delete [] ((::SCycleBaseBase*)p);
   }
   static void destruct_SCycleBaseBase(void *p) {
      typedef ::SCycleBaseBase current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SCycleBaseBase

//______________________________________________________________________________
void SCycleBaseConfig::Streamer(TBuffer &R__b)
{
   // Stream an object of class SCycleBaseConfig.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SCycleBaseConfig::Class(),this);
   } else {
      R__b.WriteClassBuffer(SCycleBaseConfig::Class(),this);
   }
}

//______________________________________________________________________________
void SCycleBaseConfig::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SCycleBaseConfig.
      TClass *R__cl = ::SCycleBaseConfig::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_config", &m_config);
      R__insp.InspectMember(m_config, "m_config.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_input", &m_input);
      R__insp.GenericShowMembers("ISCycleBaseConfig", ( ::ISCycleBaseConfig *) (this ), false);
      SCycleBaseBase::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SCycleBaseConfig(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SCycleBaseConfig : new ::SCycleBaseConfig;
   }
   static void *newArray_SCycleBaseConfig(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::SCycleBaseConfig[nElements] : new ::SCycleBaseConfig[nElements];
   }
   // Wrapper around operator delete
   static void delete_SCycleBaseConfig(void *p) {
      delete ((::SCycleBaseConfig*)p);
   }
   static void deleteArray_SCycleBaseConfig(void *p) {
      delete [] ((::SCycleBaseConfig*)p);
   }
   static void destruct_SCycleBaseConfig(void *p) {
      typedef ::SCycleBaseConfig current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SCycleBaseConfig

//______________________________________________________________________________
void SCycleBaseHist::Streamer(TBuffer &R__b)
{
   // Stream an object of class SCycleBaseHist.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SCycleBaseHist::Class(),this);
   } else {
      R__b.WriteClassBuffer(SCycleBaseHist::Class(),this);
   }
}

//______________________________________________________________________________
void SCycleBaseHist::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SCycleBaseHist.
      TClass *R__cl = ::SCycleBaseHist::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_proofOutput", &m_proofOutput);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_inputFile", &m_inputFile);
      R__insp.GenericShowMembers("ISCycleBaseHist", ( ::ISCycleBaseHist *) (this ), false);
      R__insp.GenericShowMembers("ISCycleBaseNTuple", ( ::ISCycleBaseNTuple *) (this ), false);
      SCycleBaseBase::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_SCycleBaseHist(void *p) {
      delete ((::SCycleBaseHist*)p);
   }
   static void deleteArray_SCycleBaseHist(void *p) {
      delete [] ((::SCycleBaseHist*)p);
   }
   static void destruct_SCycleBaseHist(void *p) {
      typedef ::SCycleBaseHist current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SCycleBaseHist

//______________________________________________________________________________
void SCycleBaseNTuple::Streamer(TBuffer &R__b)
{
   // Stream an object of class SCycleBaseNTuple.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SCycleBaseNTuple::Class(),this);
   } else {
      R__b.WriteClassBuffer(SCycleBaseNTuple::Class(),this);
   }
}

//______________________________________________________________________________
void SCycleBaseNTuple::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SCycleBaseNTuple.
      TClass *R__cl = ::SCycleBaseNTuple::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_inputTrees", (void*)&m_inputTrees);
      R__insp.InspectMember("vector<TTree*>", (void*)&m_inputTrees, "m_inputTrees.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_inputBranches", (void*)&m_inputBranches);
      R__insp.InspectMember("vector<TBranch*>", (void*)&m_inputBranches, "m_inputBranches.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_inputVarPointers", (void*)&m_inputVarPointers);
      R__insp.InspectMember("list<TObject*>", (void*)&m_inputVarPointers, "m_inputVarPointers.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_outputFile", &m_outputFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_outputTrees", (void*)&m_outputTrees);
      R__insp.InspectMember("vector<TTree*>", (void*)&m_outputTrees, "m_outputTrees.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_metaInputTrees", (void*)&m_metaInputTrees);
      R__insp.InspectMember("vector<TTree*>", (void*)&m_metaInputTrees, "m_metaInputTrees.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_metaOutputTrees", (void*)&m_metaOutputTrees);
      R__insp.InspectMember("vector<TTree*>", (void*)&m_metaOutputTrees, "m_metaOutputTrees.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_outputVarPointers", (void*)&m_outputVarPointers);
      R__insp.InspectMember("list<void*>", (void*)&m_outputVarPointers, "m_outputVarPointers.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_input", &m_input);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_output", &m_output);
      R__insp.GenericShowMembers("ISCycleBaseConfig", ( ::ISCycleBaseConfig *) (this ), false);
      R__insp.GenericShowMembers("ISCycleBaseNTuple", ( ::ISCycleBaseNTuple *) (this ), false);
      SCycleBaseBase::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_SCycleBaseNTuple(void *p) {
      delete ((::SCycleBaseNTuple*)p);
   }
   static void deleteArray_SCycleBaseNTuple(void *p) {
      delete [] ((::SCycleBaseNTuple*)p);
   }
   static void destruct_SCycleBaseNTuple(void *p) {
      typedef ::SCycleBaseNTuple current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SCycleBaseNTuple

//______________________________________________________________________________
void SCycleBaseExec::Streamer(TBuffer &R__b)
{
   // Stream an object of class SCycleBaseExec.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SCycleBaseExec::Class(),this);
   } else {
      R__b.WriteClassBuffer(SCycleBaseExec::Class(),this);
   }
}

//______________________________________________________________________________
void SCycleBaseExec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SCycleBaseExec.
      TClass *R__cl = ::SCycleBaseExec::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nProcessedEvents", &m_nProcessedEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nSkippedEvents", &m_nSkippedEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_firstInit", &m_firstInit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_inputTree", &m_inputTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_inputData", &m_inputData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_outputTrees", (void*)&m_outputTrees);
      R__insp.InspectMember("vector<TTree*>", (void*)&m_outputTrees, "m_outputTrees.", false);
      TSelector::ShowMembers(R__insp);
      R__insp.GenericShowMembers("ISCycleBaseConfig", ( ::ISCycleBaseConfig *) (this ), false);
      R__insp.GenericShowMembers("ISCycleBaseHist", ( ::ISCycleBaseHist *) (this ), false);
      R__insp.GenericShowMembers("ISCycleBaseNTuple", ( ::ISCycleBaseNTuple *) (this ), false);
      SCycleBaseBase::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_SCycleBaseExec(void *p) {
      delete ((::SCycleBaseExec*)p);
   }
   static void deleteArray_SCycleBaseExec(void *p) {
      delete [] ((::SCycleBaseExec*)p);
   }
   static void destruct_SCycleBaseExec(void *p) {
      typedef ::SCycleBaseExec current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SCycleBaseExec

//______________________________________________________________________________
void ISCycleBase::Streamer(TBuffer &R__b)
{
   // Stream an object of class ISCycleBase.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ISCycleBase::Class(),this);
   } else {
      R__b.WriteClassBuffer(ISCycleBase::Class(),this);
   }
}

//______________________________________________________________________________
void ISCycleBase::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ISCycleBase.
      TClass *R__cl = ::ISCycleBase::IsA();
      if (R__cl || R__insp.IsA()) { }
      SCycleBaseExec::ShowMembers(R__insp);
      R__insp.GenericShowMembers("ISCycleBaseConfig", ( ::ISCycleBaseConfig *) (this ), false);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_ISCycleBase(void *p) {
      delete ((::ISCycleBase*)p);
   }
   static void deleteArray_ISCycleBase(void *p) {
      delete [] ((::ISCycleBase*)p);
   }
   static void destruct_ISCycleBase(void *p) {
      typedef ::ISCycleBase current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::ISCycleBase

//______________________________________________________________________________
void SCycleBase::Streamer(TBuffer &R__b)
{
   // Stream an object of class SCycleBase.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SCycleBase::Class(),this);
   } else {
      R__b.WriteClassBuffer(SCycleBase::Class(),this);
   }
}

//______________________________________________________________________________
void SCycleBase::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SCycleBase.
      TClass *R__cl = ::SCycleBase::IsA();
      if (R__cl || R__insp.IsA()) { }
      ISCycleBase::ShowMembers(R__insp);
      SCycleBaseConfig::ShowMembers(R__insp);
      SCycleBaseHist::ShowMembers(R__insp);
      SCycleBaseNTuple::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_SCycleBase(void *p) {
      delete ((::SCycleBase*)p);
   }
   static void deleteArray_SCycleBase(void *p) {
      delete [] ((::SCycleBase*)p);
   }
   static void destruct_SCycleBase(void *p) {
      typedef ::SCycleBase current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SCycleBase

namespace ROOT {
   void maplEintcOvectorlESTreegRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEintcOvectorlESTreegRsPgR_Dictionary();
   static void *new_maplEintcOvectorlESTreegRsPgR(void *p = 0);
   static void *newArray_maplEintcOvectorlESTreegRsPgR(Long_t size, void *p);
   static void delete_maplEintcOvectorlESTreegRsPgR(void *p);
   static void deleteArray_maplEintcOvectorlESTreegRsPgR(void *p);
   static void destruct_maplEintcOvectorlESTreegRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<int,vector<STree> >*)
   {
      map<int,vector<STree> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<int,vector<STree> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<int,vector<STree> >", -2, "/cvmfs/atlas.cern.ch/repo/sw/software/x86_64-slc6-gcc47-opt/17.8.0/sw/lcg/app/releases/ROOT/5.34.07a/x86_64-slc6-gcc47-opt/root/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<int,vector<STree> >), DefineBehavior(ptr, ptr),
                  0, &maplEintcOvectorlESTreegRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(map<int,vector<STree> >) );
      instance.SetNew(&new_maplEintcOvectorlESTreegRsPgR);
      instance.SetNewArray(&newArray_maplEintcOvectorlESTreegRsPgR);
      instance.SetDelete(&delete_maplEintcOvectorlESTreegRsPgR);
      instance.SetDeleteArray(&deleteArray_maplEintcOvectorlESTreegRsPgR);
      instance.SetDestructor(&destruct_maplEintcOvectorlESTreegRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<int,vector<STree> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<int,vector<STree> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEintcOvectorlESTreegRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<int,vector<STree> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEintcOvectorlESTreegRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,vector<STree> > : new map<int,vector<STree> >;
   }
   static void *newArray_maplEintcOvectorlESTreegRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,vector<STree> >[nElements] : new map<int,vector<STree> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEintcOvectorlESTreegRsPgR(void *p) {
      delete ((map<int,vector<STree> >*)p);
   }
   static void deleteArray_maplEintcOvectorlESTreegRsPgR(void *p) {
      delete [] ((map<int,vector<STree> >*)p);
   }
   static void destruct_maplEintcOvectorlESTreegRsPgR(void *p) {
      typedef map<int,vector<STree> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<int,vector<STree> >

namespace ROOT {
   void vectorlESDataSetgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlESDataSetgR_Dictionary();
   static void *new_vectorlESDataSetgR(void *p = 0);
   static void *newArray_vectorlESDataSetgR(Long_t size, void *p);
   static void delete_vectorlESDataSetgR(void *p);
   static void deleteArray_vectorlESDataSetgR(void *p);
   static void destruct_vectorlESDataSetgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<SDataSet>*)
   {
      vector<SDataSet> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<SDataSet>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<SDataSet>", -2, "/cvmfs/atlas.cern.ch/repo/sw/software/x86_64-slc6-gcc47-opt/17.8.0/sw/lcg/app/releases/ROOT/5.34.07a/x86_64-slc6-gcc47-opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<SDataSet>), DefineBehavior(ptr, ptr),
                  0, &vectorlESDataSetgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<SDataSet>) );
      instance.SetNew(&new_vectorlESDataSetgR);
      instance.SetNewArray(&newArray_vectorlESDataSetgR);
      instance.SetDelete(&delete_vectorlESDataSetgR);
      instance.SetDeleteArray(&deleteArray_vectorlESDataSetgR);
      instance.SetDestructor(&destruct_vectorlESDataSetgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<SDataSet> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<SDataSet>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlESDataSetgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<SDataSet>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlESDataSetgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SDataSet> : new vector<SDataSet>;
   }
   static void *newArray_vectorlESDataSetgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SDataSet>[nElements] : new vector<SDataSet>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlESDataSetgR(void *p) {
      delete ((vector<SDataSet>*)p);
   }
   static void deleteArray_vectorlESDataSetgR(void *p) {
      delete [] ((vector<SDataSet>*)p);
   }
   static void destruct_vectorlESDataSetgR(void *p) {
      typedef vector<SDataSet> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<SDataSet>

namespace ROOT {
   void vectorlESFilegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlESFilegR_Dictionary();
   static void *new_vectorlESFilegR(void *p = 0);
   static void *newArray_vectorlESFilegR(Long_t size, void *p);
   static void delete_vectorlESFilegR(void *p);
   static void deleteArray_vectorlESFilegR(void *p);
   static void destruct_vectorlESFilegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<SFile>*)
   {
      vector<SFile> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<SFile>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<SFile>", -2, "/cvmfs/atlas.cern.ch/repo/sw/software/x86_64-slc6-gcc47-opt/17.8.0/sw/lcg/app/releases/ROOT/5.34.07a/x86_64-slc6-gcc47-opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<SFile>), DefineBehavior(ptr, ptr),
                  0, &vectorlESFilegR_Dictionary, isa_proxy, 4,
                  sizeof(vector<SFile>) );
      instance.SetNew(&new_vectorlESFilegR);
      instance.SetNewArray(&newArray_vectorlESFilegR);
      instance.SetDelete(&delete_vectorlESFilegR);
      instance.SetDeleteArray(&deleteArray_vectorlESFilegR);
      instance.SetDestructor(&destruct_vectorlESFilegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<SFile> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<SFile>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlESFilegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<SFile>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlESFilegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SFile> : new vector<SFile>;
   }
   static void *newArray_vectorlESFilegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SFile>[nElements] : new vector<SFile>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlESFilegR(void *p) {
      delete ((vector<SFile>*)p);
   }
   static void deleteArray_vectorlESFilegR(void *p) {
      delete [] ((vector<SFile>*)p);
   }
   static void destruct_vectorlESFilegR(void *p) {
      typedef vector<SFile> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<SFile>

namespace ROOT {
   void vectorlESGeneratorCutgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlESGeneratorCutgR_Dictionary();
   static void *new_vectorlESGeneratorCutgR(void *p = 0);
   static void *newArray_vectorlESGeneratorCutgR(Long_t size, void *p);
   static void delete_vectorlESGeneratorCutgR(void *p);
   static void deleteArray_vectorlESGeneratorCutgR(void *p);
   static void destruct_vectorlESGeneratorCutgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<SGeneratorCut>*)
   {
      vector<SGeneratorCut> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<SGeneratorCut>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<SGeneratorCut>", -2, "/cvmfs/atlas.cern.ch/repo/sw/software/x86_64-slc6-gcc47-opt/17.8.0/sw/lcg/app/releases/ROOT/5.34.07a/x86_64-slc6-gcc47-opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<SGeneratorCut>), DefineBehavior(ptr, ptr),
                  0, &vectorlESGeneratorCutgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<SGeneratorCut>) );
      instance.SetNew(&new_vectorlESGeneratorCutgR);
      instance.SetNewArray(&newArray_vectorlESGeneratorCutgR);
      instance.SetDelete(&delete_vectorlESGeneratorCutgR);
      instance.SetDeleteArray(&deleteArray_vectorlESGeneratorCutgR);
      instance.SetDestructor(&destruct_vectorlESGeneratorCutgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<SGeneratorCut> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<SGeneratorCut>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlESGeneratorCutgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<SGeneratorCut>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlESGeneratorCutgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SGeneratorCut> : new vector<SGeneratorCut>;
   }
   static void *newArray_vectorlESGeneratorCutgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SGeneratorCut>[nElements] : new vector<SGeneratorCut>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlESGeneratorCutgR(void *p) {
      delete ((vector<SGeneratorCut>*)p);
   }
   static void deleteArray_vectorlESGeneratorCutgR(void *p) {
      delete [] ((vector<SGeneratorCut>*)p);
   }
   static void destruct_vectorlESGeneratorCutgR(void *p) {
      typedef vector<SGeneratorCut> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<SGeneratorCut>

namespace ROOT {
   void vectorlESInputDatagR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlESInputDatagR_Dictionary();
   static void *new_vectorlESInputDatagR(void *p = 0);
   static void *newArray_vectorlESInputDatagR(Long_t size, void *p);
   static void delete_vectorlESInputDatagR(void *p);
   static void deleteArray_vectorlESInputDatagR(void *p);
   static void destruct_vectorlESInputDatagR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<SInputData>*)
   {
      vector<SInputData> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<SInputData>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<SInputData>", -2, "/cvmfs/atlas.cern.ch/repo/sw/software/x86_64-slc6-gcc47-opt/17.8.0/sw/lcg/app/releases/ROOT/5.34.07a/x86_64-slc6-gcc47-opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<SInputData>), DefineBehavior(ptr, ptr),
                  0, &vectorlESInputDatagR_Dictionary, isa_proxy, 4,
                  sizeof(vector<SInputData>) );
      instance.SetNew(&new_vectorlESInputDatagR);
      instance.SetNewArray(&newArray_vectorlESInputDatagR);
      instance.SetDelete(&delete_vectorlESInputDatagR);
      instance.SetDeleteArray(&deleteArray_vectorlESInputDatagR);
      instance.SetDestructor(&destruct_vectorlESInputDatagR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<SInputData> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<SInputData>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlESInputDatagR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<SInputData>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlESInputDatagR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SInputData> : new vector<SInputData>;
   }
   static void *newArray_vectorlESInputDatagR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SInputData>[nElements] : new vector<SInputData>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlESInputDatagR(void *p) {
      delete ((vector<SInputData>*)p);
   }
   static void deleteArray_vectorlESInputDatagR(void *p) {
      delete [] ((vector<SInputData>*)p);
   }
   static void destruct_vectorlESInputDatagR(void *p) {
      typedef vector<SInputData> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<SInputData>

namespace ROOT {
   void vectorlESTreegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlESTreegR_Dictionary();
   static void *new_vectorlESTreegR(void *p = 0);
   static void *newArray_vectorlESTreegR(Long_t size, void *p);
   static void delete_vectorlESTreegR(void *p);
   static void deleteArray_vectorlESTreegR(void *p);
   static void destruct_vectorlESTreegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<STree>*)
   {
      vector<STree> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<STree>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<STree>", -2, "/cvmfs/atlas.cern.ch/repo/sw/software/x86_64-slc6-gcc47-opt/17.8.0/sw/lcg/app/releases/ROOT/5.34.07a/x86_64-slc6-gcc47-opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<STree>), DefineBehavior(ptr, ptr),
                  0, &vectorlESTreegR_Dictionary, isa_proxy, 4,
                  sizeof(vector<STree>) );
      instance.SetNew(&new_vectorlESTreegR);
      instance.SetNewArray(&newArray_vectorlESTreegR);
      instance.SetDelete(&delete_vectorlESTreegR);
      instance.SetDeleteArray(&deleteArray_vectorlESTreegR);
      instance.SetDestructor(&destruct_vectorlESTreegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<STree> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<STree>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlESTreegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<STree>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlESTreegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<STree> : new vector<STree>;
   }
   static void *newArray_vectorlESTreegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<STree>[nElements] : new vector<STree>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlESTreegR(void *p) {
      delete ((vector<STree>*)p);
   }
   static void deleteArray_vectorlESTreegR(void *p) {
      delete [] ((vector<STree>*)p);
   }
   static void destruct_vectorlESTreegR(void *p) {
      typedef vector<STree> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<STree>

namespace ROOT {
   void vectorlEpairlEstringcOstringgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEpairlEstringcOstringgRsPgR_Dictionary();
   static void *new_vectorlEpairlEstringcOstringgRsPgR(void *p = 0);
   static void *newArray_vectorlEpairlEstringcOstringgRsPgR(Long_t size, void *p);
   static void delete_vectorlEpairlEstringcOstringgRsPgR(void *p);
   static void deleteArray_vectorlEpairlEstringcOstringgRsPgR(void *p);
   static void destruct_vectorlEpairlEstringcOstringgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<pair<string,string> >*)
   {
      vector<pair<string,string> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<pair<string,string> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<pair<string,string> >", -2, "/cvmfs/atlas.cern.ch/repo/sw/software/x86_64-slc6-gcc47-opt/17.8.0/sw/lcg/app/releases/ROOT/5.34.07a/x86_64-slc6-gcc47-opt/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<pair<string,string> >), DefineBehavior(ptr, ptr),
                  0, &vectorlEpairlEstringcOstringgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<pair<string,string> >) );
      instance.SetNew(&new_vectorlEpairlEstringcOstringgRsPgR);
      instance.SetNewArray(&newArray_vectorlEpairlEstringcOstringgRsPgR);
      instance.SetDelete(&delete_vectorlEpairlEstringcOstringgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEpairlEstringcOstringgRsPgR);
      instance.SetDestructor(&destruct_vectorlEpairlEstringcOstringgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<pair<string,string> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<pair<string,string> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEpairlEstringcOstringgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<pair<string,string> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEpairlEstringcOstringgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<pair<string,string> > : new vector<pair<string,string> >;
   }
   static void *newArray_vectorlEpairlEstringcOstringgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<pair<string,string> >[nElements] : new vector<pair<string,string> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEpairlEstringcOstringgRsPgR(void *p) {
      delete ((vector<pair<string,string> >*)p);
   }
   static void deleteArray_vectorlEpairlEstringcOstringgRsPgR(void *p) {
      delete [] ((vector<pair<string,string> >*)p);
   }
   static void destruct_vectorlEpairlEstringcOstringgRsPgR(void *p) {
      typedef vector<pair<string,string> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<pair<string,string> >

/********************************************************
* src/SFrameCore_Dict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableSFrameCore_Dict();

extern "C" void G__set_cpp_environmentSFrameCore_Dict() {
  G__cpp_reset_tagtableSFrameCore_Dict();
}
#include <new>
extern "C" int G__cpp_dllrevSFrameCore_Dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* SCycleConfig */
static int G__SFrameCore_Dict_203_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SCycleConfig* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SCycleConfig((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SCycleConfig((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SCycleConfig[n];
       } else {
         p = new((void*) gvp) SCycleConfig[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SCycleConfig;
       } else {
         p = new((void*) gvp) SCycleConfig;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleConfig));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const SCycleConfig*) G__getstructoffset())->GetCycleName();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleConfig*) G__getstructoffset())->SetCycleName(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SCycleConfig*) G__getstructoffset())->GetRunMode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleConfig*) G__getstructoffset())->SetRunMode((SCycleConfig::RunMode) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const SCycleConfig*) G__getstructoffset())->GetProofServer();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleConfig*) G__getstructoffset())->SetProofServer(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SCycleConfig*) G__getstructoffset())->GetProofNodes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleConfig*) G__getstructoffset())->SetProofNodes((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const SCycleConfig*) G__getstructoffset())->GetProofWorkDir();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleConfig*) G__getstructoffset())->SetProofWorkDir(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SCycleConfig::property_type& obj = ((const SCycleConfig*) G__getstructoffset())->GetProperties();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleConfig*) G__getstructoffset())->SetProperty(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SCycleConfig::id_type& obj = ((const SCycleConfig*) G__getstructoffset())->GetInputData();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleConfig*) G__getstructoffset())->AddInputData(*(SInputData*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleConfig*) G__getstructoffset())->SetTargetLumi((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SCycleConfig*) G__getstructoffset())->GetTargetLumi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleConfig*) G__getstructoffset())->SetOutputDirectory(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const SCycleConfig*) G__getstructoffset())->GetOutputDirectory();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleConfig*) G__getstructoffset())->SetPostFix(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const SCycleConfig*) G__getstructoffset())->GetPostFix();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleConfig*) G__getstructoffset())->SetMsgLevel((SMsgType) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SCycleConfig*) G__getstructoffset())->GetMsgLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((SCycleConfig*) G__getstructoffset())->SetUseTreeCache((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((SCycleConfig*) G__getstructoffset())->SetUseTreeCache();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SCycleConfig*) G__getstructoffset())->GetUseTreeCache());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleConfig*) G__getstructoffset())->SetCacheSize((Long64_t) G__Longlong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((const SCycleConfig*) G__getstructoffset())->GetCacheSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleConfig*) G__getstructoffset())->SetCacheLearnEntries((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const SCycleConfig*) G__getstructoffset())->GetCacheLearnEntries());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleConfig*) G__getstructoffset())->SetProcessOnlyLocal((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SCycleConfig*) G__getstructoffset())->GetProcessOnlyLocal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const SCycleConfig*) G__getstructoffset())->PrintConfig();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleConfig*) G__getstructoffset())->ArrangeInputData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleConfig*) G__getstructoffset())->ValidateInput();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         const TString* pobj;
         const TString xobj = ((const SCycleConfig*) G__getstructoffset())->GetStringConfig((SInputData*) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         const TString* pobj;
         const TString xobj = ((const SCycleConfig*) G__getstructoffset())->GetStringConfig();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleConfig*) G__getstructoffset())->ClearConfig();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SCycleConfig::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SCycleConfig::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SCycleConfig::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SCycleConfig::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleConfig*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SCycleConfig::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SCycleConfig::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SCycleConfig::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_203_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SCycleConfig::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFrameCore_Dict_203_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SCycleConfig* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SCycleConfig(*(SCycleConfig*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleConfig));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SCycleConfig G__TSCycleConfig;
static int G__SFrameCore_Dict_203_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SCycleConfig*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SCycleConfig*) (soff+(sizeof(SCycleConfig)*i)))->~G__TSCycleConfig();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SCycleConfig*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SCycleConfig*) (soff))->~G__TSCycleConfig();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFrameCore_Dict_203_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SCycleConfig* dest = (SCycleConfig*) G__getstructoffset();
   *dest = *(SCycleConfig*) libp->para[0].ref;
   const SCycleConfig& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ISCycleBaseConfig */
static int G__SFrameCore_Dict_204_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ISCycleBaseConfig*) G__getstructoffset())->Initialize((TXMLNode*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_204_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SCycleConfig& obj = ((const ISCycleBaseConfig*) G__getstructoffset())->GetConfig();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_204_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SCycleConfig& obj = ((ISCycleBaseConfig*) G__getstructoffset())->GetConfig();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_204_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ISCycleBaseConfig*) G__getstructoffset())->SetConfig(*(SCycleConfig*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_204_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TList& obj = ((const ISCycleBaseConfig*) G__getstructoffset())->GetConfigurationObjects();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_204_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ISCycleBaseConfig*) G__getstructoffset())->SetConfInput((TList*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_204_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const ISCycleBaseConfig*) G__getstructoffset())->GetConfInput());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ISCycleBaseConfig G__TISCycleBaseConfig;
static int G__SFrameCore_Dict_204_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ISCycleBaseConfig*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ISCycleBaseConfig*) (soff+(sizeof(ISCycleBaseConfig)*i)))->~G__TISCycleBaseConfig();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ISCycleBaseConfig*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ISCycleBaseConfig*) (soff))->~G__TISCycleBaseConfig();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFrameCore_Dict_204_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ISCycleBaseConfig* dest = (ISCycleBaseConfig*) G__getstructoffset();
   *dest = *(ISCycleBaseConfig*) libp->para[0].ref;
   const ISCycleBaseConfig& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ISCycleBaseHist */
static int G__SFrameCore_Dict_205_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ISCycleBaseHist*) G__getstructoffset())->SetHistOutput((TList*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_205_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const ISCycleBaseHist*) G__getstructoffset())->GetHistOutput());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ISCycleBaseHist G__TISCycleBaseHist;
static int G__SFrameCore_Dict_205_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ISCycleBaseHist*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ISCycleBaseHist*) (soff+(sizeof(ISCycleBaseHist)*i)))->~G__TISCycleBaseHist();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ISCycleBaseHist*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ISCycleBaseHist*) (soff))->~G__TISCycleBaseHist();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFrameCore_Dict_205_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ISCycleBaseHist* dest = (ISCycleBaseHist*) G__getstructoffset();
   *dest = *(ISCycleBaseHist*) libp->para[0].ref;
   const ISCycleBaseHist& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SInputData */
static int G__SFrameCore_Dict_206_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SInputData* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SInputData((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SInputData((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SInputData[n];
       } else {
         p = new((void*) gvp) SInputData[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SInputData;
       } else {
         p = new((void*) gvp) SInputData;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_SInputData));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SInputData*) G__getstructoffset())->SetType(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SInputData*) G__getstructoffset())->SetVersion(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SInputData*) G__getstructoffset())->SetTotalLumi((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SInputData*) G__getstructoffset())->SetNEventsMax((Long64_t) G__Longlong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SInputData*) G__getstructoffset())->SetNEventsSkip((Long64_t) G__Longlong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((SInputData*) G__getstructoffset())->SetCacheable((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((SInputData*) G__getstructoffset())->SetCacheable();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SInputData*) G__getstructoffset())->GetCacheable());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((SInputData*) G__getstructoffset())->SetSkipValid((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((SInputData*) G__getstructoffset())->SetSkipValid();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SInputData*) G__getstructoffset())->GetSkipValid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SInputData*) G__getstructoffset())->SetEventTreeEntry((Long64_t) G__Longlong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((const SInputData*) G__getstructoffset())->GetEventTreeEntry());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SInputData*) G__getstructoffset())->AddGenCut(*(SGeneratorCut*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SInputData*) G__getstructoffset())->AddSFileIn(*(SFile*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SInputData*) G__getstructoffset())->AddTree((Int_t) G__int(libp->para[0]), *(STree*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SInputData*) G__getstructoffset())->AddDataSet(*(SDataSet*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SInputData*) G__getstructoffset())->AddEvents((Long64_t) G__Longlong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((SInputData*) G__getstructoffset())->ValidateInput((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((SInputData*) G__getstructoffset())->ValidateInput();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const SInputData*) G__getstructoffset())->GetType();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const SInputData*) G__getstructoffset())->GetVersion();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SGeneratorCut>& obj = ((const SInputData*) G__getstructoffset())->GetSGeneratorCuts();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SFile>& obj = ((const SInputData*) G__getstructoffset())->GetSFileIn();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SFile>& obj = ((SInputData*) G__getstructoffset())->GetSFileIn();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SInputData*) G__getstructoffset())->GetTrees((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<Int_t,std::vector<STree> >& obj = ((const SInputData*) G__getstructoffset())->GetTrees();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SDataSet>& obj = ((const SInputData*) G__getstructoffset())->GetDataSets();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SInputData*) G__getstructoffset())->HasInputTrees());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SInputData*) G__getstructoffset())->GetDSet());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SInputData*) G__getstructoffset())->GetTotalLumi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const SInputData*) G__getstructoffset())->GetScaledLumi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((const SInputData*) G__getstructoffset())->GetEventsTotal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((const SInputData*) G__getstructoffset())->GetNEventsMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((const SInputData*) G__getstructoffset())->GetNEventsSkip());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SInputData& obj = ((SInputData*) G__getstructoffset())->operator=(*(SInputData*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SInputData*) G__getstructoffset())->operator==(*(SInputData*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SInputData*) G__getstructoffset())->operator!=(*(SInputData*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const SInputData*) G__getstructoffset())->GetStringConfig();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SInputData::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SInputData::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SInputData::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SInputData::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SInputData*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SInputData::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SInputData::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SInputData::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_206_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SInputData::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SInputData G__TSInputData;
static int G__SFrameCore_Dict_206_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SInputData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SInputData*) (soff+(sizeof(SInputData)*i)))->~G__TSInputData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SInputData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SInputData*) (soff))->~G__TSInputData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ISCycleBaseNTuple */
static int G__SFrameCore_Dict_207_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ISCycleBaseNTuple*) G__getstructoffset())->SetNTupleOutput((TList*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_207_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const ISCycleBaseNTuple*) G__getstructoffset())->GetNTupleOutput());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_207_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ISCycleBaseNTuple*) G__getstructoffset())->SetNTupleInput((TList*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_207_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const ISCycleBaseNTuple*) G__getstructoffset())->GetNTupleInput());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ISCycleBaseNTuple G__TISCycleBaseNTuple;
static int G__SFrameCore_Dict_207_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ISCycleBaseNTuple*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ISCycleBaseNTuple*) (soff+(sizeof(ISCycleBaseNTuple)*i)))->~G__TISCycleBaseNTuple();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ISCycleBaseNTuple*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ISCycleBaseNTuple*) (soff))->~G__TISCycleBaseNTuple();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFrameCore_Dict_207_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ISCycleBaseNTuple* dest = (ISCycleBaseNTuple*) G__getstructoffset();
   *dest = *(ISCycleBaseNTuple*) libp->para[0].ref;
   const ISCycleBaseNTuple& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SCycleBaseBase */
static int G__SFrameCore_Dict_459_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SCycleBaseBase* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SCycleBaseBase[n];
     } else {
       p = new((void*) gvp) SCycleBaseBase[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SCycleBaseBase;
     } else {
       p = new((void*) gvp) SCycleBaseBase;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseBase));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_459_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SCycleBaseBase::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_459_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SCycleBaseBase::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_459_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SCycleBaseBase::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_459_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SCycleBaseBase::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_459_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SCycleBaseBase*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_459_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleBaseBase*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_459_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleBaseBase*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_459_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleBaseBase*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_459_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SCycleBaseBase::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_459_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SCycleBaseBase::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_459_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SCycleBaseBase::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_459_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SCycleBaseBase::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SCycleBaseBase G__TSCycleBaseBase;
static int G__SFrameCore_Dict_459_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SCycleBaseBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SCycleBaseBase*) (soff+(sizeof(SCycleBaseBase)*i)))->~G__TSCycleBaseBase();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SCycleBaseBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SCycleBaseBase*) (soff))->~G__TSCycleBaseBase();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SCycleBaseExec */
static int G__SFrameCore_Dict_460_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleBaseExec*) G__getstructoffset())->BeginCycle();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_460_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleBaseExec*) G__getstructoffset())->EndCycle();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_460_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleBaseExec*) G__getstructoffset())->BeginInputData(*(SInputData*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_460_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleBaseExec*) G__getstructoffset())->EndInputData(*(SInputData*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_460_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleBaseExec*) G__getstructoffset())->BeginInputFile(*(SInputData*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_460_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleBaseExec*) G__getstructoffset())->ExecuteEvent(*(SInputData*) libp->para[0].ref, (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_460_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleBaseExec*) G__getstructoffset())->BeginMasterInputData(*(SInputData*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_460_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleBaseExec*) G__getstructoffset())->EndMasterInputData(*(SInputData*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_460_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SCycleBaseExec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_460_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SCycleBaseExec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_460_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SCycleBaseExec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_460_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SCycleBaseExec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_460_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleBaseExec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_460_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SCycleBaseExec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_460_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SCycleBaseExec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_460_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SCycleBaseExec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_460_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SCycleBaseExec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SCycleBaseExec G__TSCycleBaseExec;
static int G__SFrameCore_Dict_460_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SCycleBaseExec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SCycleBaseExec*) (soff+(sizeof(SCycleBaseExec)*i)))->~G__TSCycleBaseExec();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SCycleBaseExec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SCycleBaseExec*) (soff))->~G__TSCycleBaseExec();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ISCycleBase */
static int G__SFrameCore_Dict_461_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ISCycleBase::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_461_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ISCycleBase::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_461_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ISCycleBase::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_461_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ISCycleBase::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_461_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ISCycleBase*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_461_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ISCycleBase::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_461_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ISCycleBase::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_461_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ISCycleBase::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_461_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ISCycleBase::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ISCycleBase G__TISCycleBase;
static int G__SFrameCore_Dict_461_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ISCycleBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ISCycleBase*) (soff+(sizeof(ISCycleBase)*i)))->~G__TISCycleBase();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ISCycleBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ISCycleBase*) (soff))->~G__TISCycleBase();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SCycleBaseNTuple */
static int G__SFrameCore_Dict_488_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SCycleBaseNTuple*) G__getstructoffset())->GetMetadataTree((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_488_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SCycleBaseNTuple*) G__getstructoffset())->GetInputMetadataTree((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_488_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SCycleBaseNTuple*) G__getstructoffset())->GetOutputMetadataTree((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_488_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SCycleBaseNTuple*) G__getstructoffset())->GetInputTree((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_488_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SCycleBaseNTuple*) G__getstructoffset())->GetOutputTree((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_488_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SCycleBaseNTuple::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_488_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SCycleBaseNTuple::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_488_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SCycleBaseNTuple::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_488_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SCycleBaseNTuple::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_488_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleBaseNTuple*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_488_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SCycleBaseNTuple::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_488_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SCycleBaseNTuple::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_488_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SCycleBaseNTuple::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_488_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SCycleBaseNTuple::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SCycleBaseNTuple G__TSCycleBaseNTuple;
static int G__SFrameCore_Dict_488_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SCycleBaseNTuple*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SCycleBaseNTuple*) (soff+(sizeof(SCycleBaseNTuple)*i)))->~G__TSCycleBaseNTuple();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SCycleBaseNTuple*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SCycleBaseNTuple*) (soff))->~G__TSCycleBaseNTuple();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SCycleBaseHist */
static int G__SFrameCore_Dict_498_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((SCycleBaseHist*) G__getstructoffset())->WriteObj(*(TObject*) libp->para[0].ref, (const char*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((SCycleBaseHist*) G__getstructoffset())->WriteObj(*(TObject*) libp->para[0].ref, (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((SCycleBaseHist*) G__getstructoffset())->WriteObj(*(TObject*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_498_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((SCycleBaseHist*) G__getstructoffset())->Hist((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((SCycleBaseHist*) G__getstructoffset())->Hist((const char*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_498_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SCycleBaseHist::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_498_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SCycleBaseHist::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_498_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SCycleBaseHist::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_498_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SCycleBaseHist::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_498_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleBaseHist*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_498_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SCycleBaseHist::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_498_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SCycleBaseHist::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_498_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SCycleBaseHist::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_498_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SCycleBaseHist::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SCycleBaseHist G__TSCycleBaseHist;
static int G__SFrameCore_Dict_498_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SCycleBaseHist*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SCycleBaseHist*) (soff+(sizeof(SCycleBaseHist)*i)))->~G__TSCycleBaseHist();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SCycleBaseHist*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SCycleBaseHist*) (soff))->~G__TSCycleBaseHist();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SGeneratorCut */
static int G__SFrameCore_Dict_552_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SGeneratorCut* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SGeneratorCut(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) SGeneratorCut(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SGeneratorCut(*(TString*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) SGeneratorCut(*(TString*) libp->para[0].ref);
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SGeneratorCut[n];
       } else {
         p = new((void*) gvp) SGeneratorCut[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SGeneratorCut;
       } else {
         p = new((void*) gvp) SGeneratorCut;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_SGeneratorCut));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_552_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const SGeneratorCut*) G__getstructoffset())->GetTreeName();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_552_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const SGeneratorCut*) G__getstructoffset())->GetFormula();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_552_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SGeneratorCut& obj = ((SGeneratorCut*) G__getstructoffset())->operator=(*(SGeneratorCut*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_552_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SGeneratorCut*) G__getstructoffset())->operator==(*(SGeneratorCut*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_552_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SGeneratorCut*) G__getstructoffset())->operator!=(*(SGeneratorCut*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_552_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SGeneratorCut::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_552_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SGeneratorCut::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_552_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SGeneratorCut::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_552_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SGeneratorCut::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_552_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SGeneratorCut*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_552_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SGeneratorCut::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_552_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SGeneratorCut::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_552_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SGeneratorCut::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_552_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SGeneratorCut::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFrameCore_Dict_552_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SGeneratorCut* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SGeneratorCut(*(SGeneratorCut*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_SGeneratorCut));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SGeneratorCut G__TSGeneratorCut;
static int G__SFrameCore_Dict_552_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SGeneratorCut*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SGeneratorCut*) (soff+(sizeof(SGeneratorCut)*i)))->~G__TSGeneratorCut();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SGeneratorCut*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SGeneratorCut*) (soff))->~G__TSGeneratorCut();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SDataSet */
static int G__SFrameCore_Dict_556_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SDataSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SDataSet(*(TString*) libp->para[0].ref, (Double_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) SDataSet(*(TString*) libp->para[0].ref, (Double_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SDataSet(*(TString*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) SDataSet(*(TString*) libp->para[0].ref);
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SDataSet[n];
       } else {
         p = new((void*) gvp) SDataSet[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SDataSet;
       } else {
         p = new((void*) gvp) SDataSet;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_SDataSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_556_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SDataSet& obj = ((SDataSet*) G__getstructoffset())->operator=(*(SDataSet*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_556_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SDataSet*) G__getstructoffset())->operator==(*(SDataSet*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_556_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SDataSet*) G__getstructoffset())->operator!=(*(SDataSet*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_556_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SDataSet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_556_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SDataSet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_556_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SDataSet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_556_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SDataSet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_556_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SDataSet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_556_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SDataSet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_556_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SDataSet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_556_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SDataSet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_556_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SDataSet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFrameCore_Dict_556_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SDataSet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SDataSet(*(SDataSet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_SDataSet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SDataSet G__TSDataSet;
static int G__SFrameCore_Dict_556_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SDataSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SDataSet*) (soff+(sizeof(SDataSet)*i)))->~G__TSDataSet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SDataSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SDataSet*) (soff))->~G__TSDataSet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SFile */
static int G__SFrameCore_Dict_557_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SFile* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SFile[n];
     } else {
       p = new((void*) gvp) SFile[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SFile;
     } else {
       p = new((void*) gvp) SFile;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_SFile));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_557_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SFile* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SFile(*(TString*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) SFile(*(TString*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_SFile));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_557_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SFile* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SFile(*(TString*) libp->para[0].ref, (Double_t) G__double(libp->para[1]));
   } else {
     p = new((void*) gvp) SFile(*(TString*) libp->para[0].ref, (Double_t) G__double(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_SFile));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_557_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SFile& obj = ((SFile*) G__getstructoffset())->operator=(*(SFile*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_557_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SFile*) G__getstructoffset())->operator==(*(SFile*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_557_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const SFile*) G__getstructoffset())->operator!=(*(SFile*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_557_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SFile::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_557_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SFile::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_557_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SFile::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_557_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SFile::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_557_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SFile*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_557_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SFile::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_557_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SFile::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_557_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SFile::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_557_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SFile::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFrameCore_Dict_557_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SFile* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SFile(*(SFile*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_SFile));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SFile G__TSFile;
static int G__SFrameCore_Dict_557_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SFile*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SFile*) (soff+(sizeof(SFile)*i)))->~G__TSFile();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SFile*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SFile*) (soff))->~G__TSFile();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* STree */
static int G__SFrameCore_Dict_558_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   STree* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new STree(*(TString*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) STree(*(TString*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new STree(*(TString*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) STree(*(TString*) libp->para[0].ref);
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new STree[n];
       } else {
         p = new((void*) gvp) STree[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new STree;
       } else {
         p = new((void*) gvp) STree;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_STree));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_558_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const STree& obj = ((STree*) G__getstructoffset())->operator=(*(STree*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_558_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const STree*) G__getstructoffset())->operator==(*(STree*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_558_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const STree*) G__getstructoffset())->operator!=(*(STree*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_558_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) STree::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_558_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) STree::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_558_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) STree::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_558_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      STree::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_558_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((STree*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_558_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) STree::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_558_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) STree::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_558_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) STree::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_558_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) STree::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFrameCore_Dict_558_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   STree* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new STree(*(STree*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_STree));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef STree G__TSTree;
static int G__SFrameCore_Dict_558_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (STree*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((STree*) (soff+(sizeof(STree)*i)))->~G__TSTree();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (STree*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((STree*) (soff))->~G__TSTree();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<SGeneratorCut,allocator<SGeneratorCut> > */
static int G__SFrameCore_Dict_560_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SGeneratorCut,allocator<SGeneratorCut> >::reference obj = ((vector<SGeneratorCut,allocator<SGeneratorCut> >*) G__getstructoffset())->at((vector<SGeneratorCut,allocator<SGeneratorCut> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SGeneratorCut,allocator<SGeneratorCut> >::const_reference obj = ((const vector<SGeneratorCut,allocator<SGeneratorCut> >*) G__getstructoffset())->at((vector<SGeneratorCut,allocator<SGeneratorCut> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SGeneratorCut,allocator<SGeneratorCut> >::iterator* pobj;
         vector<SGeneratorCut,allocator<SGeneratorCut> >::iterator xobj = ((vector<SGeneratorCut,allocator<SGeneratorCut> >*) G__getstructoffset())->begin();
         pobj = new vector<SGeneratorCut,allocator<SGeneratorCut> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SGeneratorCut,allocator<SGeneratorCut> >::iterator* pobj;
         vector<SGeneratorCut,allocator<SGeneratorCut> >::iterator xobj = ((vector<SGeneratorCut,allocator<SGeneratorCut> >*) G__getstructoffset())->end();
         pobj = new vector<SGeneratorCut,allocator<SGeneratorCut> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SGeneratorCut,allocator<SGeneratorCut> >::reverse_iterator* pobj;
         vector<SGeneratorCut,allocator<SGeneratorCut> >::reverse_iterator xobj = ((vector<SGeneratorCut,allocator<SGeneratorCut> >*) G__getstructoffset())->rbegin();
         pobj = new vector<SGeneratorCut,allocator<SGeneratorCut> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SGeneratorCut,allocator<SGeneratorCut> >::reverse_iterator* pobj;
         vector<SGeneratorCut,allocator<SGeneratorCut> >::reverse_iterator xobj = ((vector<SGeneratorCut,allocator<SGeneratorCut> >*) G__getstructoffset())->rend();
         pobj = new vector<SGeneratorCut,allocator<SGeneratorCut> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SGeneratorCut,allocator<SGeneratorCut> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SGeneratorCut,allocator<SGeneratorCut> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SGeneratorCut,allocator<SGeneratorCut> >*) G__getstructoffset())->resize((vector<SGeneratorCut,allocator<SGeneratorCut> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SGeneratorCut,allocator<SGeneratorCut> >*) G__getstructoffset())->resize((vector<SGeneratorCut,allocator<SGeneratorCut> >::size_type) G__int(libp->para[0]), *((SGeneratorCut*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SGeneratorCut,allocator<SGeneratorCut> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<SGeneratorCut,allocator<SGeneratorCut> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SGeneratorCut,allocator<SGeneratorCut> >::reference obj = ((vector<SGeneratorCut,allocator<SGeneratorCut> >*) G__getstructoffset())->operator[]((vector<SGeneratorCut,allocator<SGeneratorCut> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SGeneratorCut,allocator<SGeneratorCut> >::const_reference obj = ((const vector<SGeneratorCut,allocator<SGeneratorCut> >*) G__getstructoffset())->operator[]((vector<SGeneratorCut,allocator<SGeneratorCut> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SGeneratorCut,allocator<SGeneratorCut> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SGeneratorCut,allocator<SGeneratorCut> >[n];
     } else {
       p = new((void*) gvp) vector<SGeneratorCut,allocator<SGeneratorCut> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SGeneratorCut,allocator<SGeneratorCut> >;
     } else {
       p = new((void*) gvp) vector<SGeneratorCut,allocator<SGeneratorCut> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SGeneratorCut,allocator<SGeneratorCut> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SGeneratorCut,allocator<SGeneratorCut> >((vector<SGeneratorCut,allocator<SGeneratorCut> >::size_type) G__int(libp->para[0]), *(SGeneratorCut*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<SGeneratorCut,allocator<SGeneratorCut> >((vector<SGeneratorCut,allocator<SGeneratorCut> >::size_type) G__int(libp->para[0]), *(SGeneratorCut*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SGeneratorCut,allocator<SGeneratorCut> >((vector<SGeneratorCut,allocator<SGeneratorCut> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<SGeneratorCut,allocator<SGeneratorCut> >((vector<SGeneratorCut,allocator<SGeneratorCut> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SGeneratorCut,allocator<SGeneratorCut> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SGeneratorCut,allocator<SGeneratorCut> >(*(vector<SGeneratorCut,allocator<SGeneratorCut> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<SGeneratorCut,allocator<SGeneratorCut> >(*(vector<SGeneratorCut,allocator<SGeneratorCut> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SGeneratorCut,allocator<SGeneratorCut> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SGeneratorCut,allocator<SGeneratorCut> >(*((vector<SGeneratorCut,allocator<SGeneratorCut> >::const_iterator*) G__int(libp->para[0])), *((vector<SGeneratorCut,allocator<SGeneratorCut> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<SGeneratorCut,allocator<SGeneratorCut> >(*((vector<SGeneratorCut,allocator<SGeneratorCut> >::const_iterator*) G__int(libp->para[0])), *((vector<SGeneratorCut,allocator<SGeneratorCut> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SGeneratorCut,allocator<SGeneratorCut> >& obj = ((vector<SGeneratorCut,allocator<SGeneratorCut> >*) G__getstructoffset())->operator=(*(vector<SGeneratorCut,allocator<SGeneratorCut> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SGeneratorCut,allocator<SGeneratorCut> >*) G__getstructoffset())->reserve((vector<SGeneratorCut,allocator<SGeneratorCut> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SGeneratorCut& obj = ((vector<SGeneratorCut,allocator<SGeneratorCut> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SGeneratorCut& obj = ((vector<SGeneratorCut,allocator<SGeneratorCut> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SGeneratorCut,allocator<SGeneratorCut> >*) G__getstructoffset())->push_back(*(SGeneratorCut*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SGeneratorCut,allocator<SGeneratorCut> >*) G__getstructoffset())->swap(*(vector<SGeneratorCut,allocator<SGeneratorCut> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SGeneratorCut,allocator<SGeneratorCut> >::iterator* pobj;
         vector<SGeneratorCut,allocator<SGeneratorCut> >::iterator xobj = ((vector<SGeneratorCut,allocator<SGeneratorCut> >*) G__getstructoffset())->insert(*((vector<SGeneratorCut,allocator<SGeneratorCut> >::iterator*) G__int(libp->para[0])), *(SGeneratorCut*) libp->para[1].ref);
         pobj = new vector<SGeneratorCut,allocator<SGeneratorCut> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SGeneratorCut,allocator<SGeneratorCut> >*) G__getstructoffset())->insert(*((vector<SGeneratorCut,allocator<SGeneratorCut> >::iterator*) G__int(libp->para[0])), *((vector<SGeneratorCut,allocator<SGeneratorCut> >::const_iterator*) G__int(libp->para[1]))
, *((vector<SGeneratorCut,allocator<SGeneratorCut> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SGeneratorCut,allocator<SGeneratorCut> >*) G__getstructoffset())->insert(*((vector<SGeneratorCut,allocator<SGeneratorCut> >::iterator*) G__int(libp->para[0])), (vector<SGeneratorCut,allocator<SGeneratorCut> >::size_type) G__int(libp->para[1])
, *(SGeneratorCut*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SGeneratorCut,allocator<SGeneratorCut> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SGeneratorCut,allocator<SGeneratorCut> >*) G__getstructoffset())->erase(*((vector<SGeneratorCut,allocator<SGeneratorCut> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SGeneratorCut,allocator<SGeneratorCut> >*) G__getstructoffset())->erase(*((vector<SGeneratorCut,allocator<SGeneratorCut> >::iterator*) G__int(libp->para[0])), *((vector<SGeneratorCut,allocator<SGeneratorCut> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_560_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SGeneratorCut,allocator<SGeneratorCut> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<SGeneratorCut,allocator<SGeneratorCut> > G__TvectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR;
static int G__SFrameCore_Dict_560_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<SGeneratorCut,allocator<SGeneratorCut> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<SGeneratorCut,allocator<SGeneratorCut> >*) (soff+(sizeof(vector<SGeneratorCut,allocator<SGeneratorCut> >)*i)))->~G__TvectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<SGeneratorCut,allocator<SGeneratorCut> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<SGeneratorCut,allocator<SGeneratorCut> >*) (soff))->~G__TvectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<SFile,allocator<SFile> > */
static int G__SFrameCore_Dict_564_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SFile,allocator<SFile> >::reference obj = ((vector<SFile,allocator<SFile> >*) G__getstructoffset())->at((vector<SFile,allocator<SFile> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SFile,allocator<SFile> >::const_reference obj = ((const vector<SFile,allocator<SFile> >*) G__getstructoffset())->at((vector<SFile,allocator<SFile> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SFile,allocator<SFile> >::iterator* pobj;
         vector<SFile,allocator<SFile> >::iterator xobj = ((vector<SFile,allocator<SFile> >*) G__getstructoffset())->begin();
         pobj = new vector<SFile,allocator<SFile> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SFile,allocator<SFile> >::iterator* pobj;
         vector<SFile,allocator<SFile> >::iterator xobj = ((vector<SFile,allocator<SFile> >*) G__getstructoffset())->end();
         pobj = new vector<SFile,allocator<SFile> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SFile,allocator<SFile> >::reverse_iterator* pobj;
         vector<SFile,allocator<SFile> >::reverse_iterator xobj = ((vector<SFile,allocator<SFile> >*) G__getstructoffset())->rbegin();
         pobj = new vector<SFile,allocator<SFile> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SFile,allocator<SFile> >::reverse_iterator* pobj;
         vector<SFile,allocator<SFile> >::reverse_iterator xobj = ((vector<SFile,allocator<SFile> >*) G__getstructoffset())->rend();
         pobj = new vector<SFile,allocator<SFile> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SFile,allocator<SFile> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SFile,allocator<SFile> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SFile,allocator<SFile> >*) G__getstructoffset())->resize((vector<SFile,allocator<SFile> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SFile,allocator<SFile> >*) G__getstructoffset())->resize((vector<SFile,allocator<SFile> >::size_type) G__int(libp->para[0]), *((SFile*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SFile,allocator<SFile> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<SFile,allocator<SFile> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SFile,allocator<SFile> >::reference obj = ((vector<SFile,allocator<SFile> >*) G__getstructoffset())->operator[]((vector<SFile,allocator<SFile> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SFile,allocator<SFile> >::const_reference obj = ((const vector<SFile,allocator<SFile> >*) G__getstructoffset())->operator[]((vector<SFile,allocator<SFile> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SFile,allocator<SFile> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SFile,allocator<SFile> >[n];
     } else {
       p = new((void*) gvp) vector<SFile,allocator<SFile> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SFile,allocator<SFile> >;
     } else {
       p = new((void*) gvp) vector<SFile,allocator<SFile> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SFile,allocator<SFile> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SFile,allocator<SFile> >((vector<SFile,allocator<SFile> >::size_type) G__int(libp->para[0]), *(SFile*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<SFile,allocator<SFile> >((vector<SFile,allocator<SFile> >::size_type) G__int(libp->para[0]), *(SFile*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SFile,allocator<SFile> >((vector<SFile,allocator<SFile> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<SFile,allocator<SFile> >((vector<SFile,allocator<SFile> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SFile,allocator<SFile> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SFile,allocator<SFile> >(*(vector<SFile,allocator<SFile> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<SFile,allocator<SFile> >(*(vector<SFile,allocator<SFile> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SFile,allocator<SFile> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SFile,allocator<SFile> >(*((vector<SFile,allocator<SFile> >::const_iterator*) G__int(libp->para[0])), *((vector<SFile,allocator<SFile> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<SFile,allocator<SFile> >(*((vector<SFile,allocator<SFile> >::const_iterator*) G__int(libp->para[0])), *((vector<SFile,allocator<SFile> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SFile,allocator<SFile> >& obj = ((vector<SFile,allocator<SFile> >*) G__getstructoffset())->operator=(*(vector<SFile,allocator<SFile> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SFile,allocator<SFile> >*) G__getstructoffset())->reserve((vector<SFile,allocator<SFile> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SFile& obj = ((vector<SFile,allocator<SFile> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SFile& obj = ((vector<SFile,allocator<SFile> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SFile,allocator<SFile> >*) G__getstructoffset())->push_back(*(SFile*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SFile,allocator<SFile> >*) G__getstructoffset())->swap(*(vector<SFile,allocator<SFile> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SFile,allocator<SFile> >::iterator* pobj;
         vector<SFile,allocator<SFile> >::iterator xobj = ((vector<SFile,allocator<SFile> >*) G__getstructoffset())->insert(*((vector<SFile,allocator<SFile> >::iterator*) G__int(libp->para[0])), *(SFile*) libp->para[1].ref);
         pobj = new vector<SFile,allocator<SFile> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SFile,allocator<SFile> >*) G__getstructoffset())->insert(*((vector<SFile,allocator<SFile> >::iterator*) G__int(libp->para[0])), *((vector<SFile,allocator<SFile> >::const_iterator*) G__int(libp->para[1]))
, *((vector<SFile,allocator<SFile> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SFile,allocator<SFile> >*) G__getstructoffset())->insert(*((vector<SFile,allocator<SFile> >::iterator*) G__int(libp->para[0])), (vector<SFile,allocator<SFile> >::size_type) G__int(libp->para[1])
, *(SFile*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SFile,allocator<SFile> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SFile,allocator<SFile> >*) G__getstructoffset())->erase(*((vector<SFile,allocator<SFile> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SFile,allocator<SFile> >*) G__getstructoffset())->erase(*((vector<SFile,allocator<SFile> >::iterator*) G__int(libp->para[0])), *((vector<SFile,allocator<SFile> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_564_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SFile,allocator<SFile> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<SFile,allocator<SFile> > G__TvectorlESFilecOallocatorlESFilegRsPgR;
static int G__SFrameCore_Dict_564_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<SFile,allocator<SFile> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<SFile,allocator<SFile> >*) (soff+(sizeof(vector<SFile,allocator<SFile> >)*i)))->~G__TvectorlESFilecOallocatorlESFilegRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<SFile,allocator<SFile> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<SFile,allocator<SFile> >*) (soff))->~G__TvectorlESFilecOallocatorlESFilegRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<STree,allocator<STree> > */
static int G__SFrameCore_Dict_568_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<STree,allocator<STree> >::reference obj = ((vector<STree,allocator<STree> >*) G__getstructoffset())->at((vector<STree,allocator<STree> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<STree,allocator<STree> >::const_reference obj = ((const vector<STree,allocator<STree> >*) G__getstructoffset())->at((vector<STree,allocator<STree> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<STree,allocator<STree> >::iterator* pobj;
         vector<STree,allocator<STree> >::iterator xobj = ((vector<STree,allocator<STree> >*) G__getstructoffset())->begin();
         pobj = new vector<STree,allocator<STree> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<STree,allocator<STree> >::iterator* pobj;
         vector<STree,allocator<STree> >::iterator xobj = ((vector<STree,allocator<STree> >*) G__getstructoffset())->end();
         pobj = new vector<STree,allocator<STree> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<STree,allocator<STree> >::reverse_iterator* pobj;
         vector<STree,allocator<STree> >::reverse_iterator xobj = ((vector<STree,allocator<STree> >*) G__getstructoffset())->rbegin();
         pobj = new vector<STree,allocator<STree> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<STree,allocator<STree> >::reverse_iterator* pobj;
         vector<STree,allocator<STree> >::reverse_iterator xobj = ((vector<STree,allocator<STree> >*) G__getstructoffset())->rend();
         pobj = new vector<STree,allocator<STree> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<STree,allocator<STree> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<STree,allocator<STree> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<STree,allocator<STree> >*) G__getstructoffset())->resize((vector<STree,allocator<STree> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<STree,allocator<STree> >*) G__getstructoffset())->resize((vector<STree,allocator<STree> >::size_type) G__int(libp->para[0]), *((STree*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<STree,allocator<STree> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<STree,allocator<STree> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<STree,allocator<STree> >::reference obj = ((vector<STree,allocator<STree> >*) G__getstructoffset())->operator[]((vector<STree,allocator<STree> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<STree,allocator<STree> >::const_reference obj = ((const vector<STree,allocator<STree> >*) G__getstructoffset())->operator[]((vector<STree,allocator<STree> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<STree,allocator<STree> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<STree,allocator<STree> >[n];
     } else {
       p = new((void*) gvp) vector<STree,allocator<STree> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<STree,allocator<STree> >;
     } else {
       p = new((void*) gvp) vector<STree,allocator<STree> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<STree,allocator<STree> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<STree,allocator<STree> >((vector<STree,allocator<STree> >::size_type) G__int(libp->para[0]), *(STree*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<STree,allocator<STree> >((vector<STree,allocator<STree> >::size_type) G__int(libp->para[0]), *(STree*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<STree,allocator<STree> >((vector<STree,allocator<STree> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<STree,allocator<STree> >((vector<STree,allocator<STree> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<STree,allocator<STree> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<STree,allocator<STree> >(*(vector<STree,allocator<STree> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<STree,allocator<STree> >(*(vector<STree,allocator<STree> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<STree,allocator<STree> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<STree,allocator<STree> >(*((vector<STree,allocator<STree> >::const_iterator*) G__int(libp->para[0])), *((vector<STree,allocator<STree> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<STree,allocator<STree> >(*((vector<STree,allocator<STree> >::const_iterator*) G__int(libp->para[0])), *((vector<STree,allocator<STree> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<STree,allocator<STree> >& obj = ((vector<STree,allocator<STree> >*) G__getstructoffset())->operator=(*(vector<STree,allocator<STree> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<STree,allocator<STree> >*) G__getstructoffset())->reserve((vector<STree,allocator<STree> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const STree& obj = ((vector<STree,allocator<STree> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const STree& obj = ((vector<STree,allocator<STree> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<STree,allocator<STree> >*) G__getstructoffset())->push_back(*(STree*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<STree,allocator<STree> >*) G__getstructoffset())->swap(*(vector<STree,allocator<STree> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<STree,allocator<STree> >::iterator* pobj;
         vector<STree,allocator<STree> >::iterator xobj = ((vector<STree,allocator<STree> >*) G__getstructoffset())->insert(*((vector<STree,allocator<STree> >::iterator*) G__int(libp->para[0])), *(STree*) libp->para[1].ref);
         pobj = new vector<STree,allocator<STree> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<STree,allocator<STree> >*) G__getstructoffset())->insert(*((vector<STree,allocator<STree> >::iterator*) G__int(libp->para[0])), *((vector<STree,allocator<STree> >::const_iterator*) G__int(libp->para[1]))
, *((vector<STree,allocator<STree> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<STree,allocator<STree> >*) G__getstructoffset())->insert(*((vector<STree,allocator<STree> >::iterator*) G__int(libp->para[0])), (vector<STree,allocator<STree> >::size_type) G__int(libp->para[1])
, *(STree*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<STree,allocator<STree> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<STree,allocator<STree> >*) G__getstructoffset())->erase(*((vector<STree,allocator<STree> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<STree,allocator<STree> >*) G__getstructoffset())->erase(*((vector<STree,allocator<STree> >::iterator*) G__int(libp->para[0])), *((vector<STree,allocator<STree> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_568_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<STree,allocator<STree> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<STree,allocator<STree> > G__TvectorlESTreecOallocatorlESTreegRsPgR;
static int G__SFrameCore_Dict_568_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<STree,allocator<STree> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<STree,allocator<STree> >*) (soff+(sizeof(vector<STree,allocator<STree> >)*i)))->~G__TvectorlESTreecOallocatorlESTreegRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<STree,allocator<STree> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<STree,allocator<STree> >*) (soff))->~G__TvectorlESTreecOallocatorlESTreegRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > > */
static int G__SFrameCore_Dict_573_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >[n];
     } else {
       p = new((void*) gvp) map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >;
     } else {
       p = new((void*) gvp) map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_573_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >(*((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator*) G__int(libp->para[0])), *((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >(*((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator*) G__int(libp->para[0])), *((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_573_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >(*((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::reverse_iterator*) G__int(libp->para[0])), *((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >(*((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::reverse_iterator*) G__int(libp->para[0])), *((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_573_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >(*(map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >(*(map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_573_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >& obj = ((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) G__getstructoffset())->operator=(*(map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_573_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator* pobj;
         map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator xobj = ((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) G__getstructoffset())->begin();
         pobj = new map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_573_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator* pobj;
         map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator xobj = ((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) G__getstructoffset())->end();
         pobj = new map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_573_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::reverse_iterator* pobj;
         map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::reverse_iterator xobj = ((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) G__getstructoffset())->rbegin();
         pobj = new map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_573_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::reverse_iterator* pobj;
         map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::reverse_iterator xobj = ((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) G__getstructoffset())->rend();
         pobj = new map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_573_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_573_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_573_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_573_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<STree,allocator<STree> >& obj = ((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) G__getstructoffset())->operator[](*(int*) G__Intref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_573_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator,bool>* pobj;
         pair<map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator,bool> xobj = ((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) G__getstructoffset())->insert(*(map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_573_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator* pobj;
         map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator xobj = ((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) G__getstructoffset())->insert(*((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator*) G__int(libp->para[0])), *(map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::value_type*) libp->para[1].ref);
         pobj = new map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_573_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) G__getstructoffset())->insert(*((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator*) G__int(libp->para[0])), *((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_573_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) G__getstructoffset())->insert(*((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::reverse_iterator*) G__int(libp->para[0])), *((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_573_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) G__getstructoffset())->erase(*((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_573_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) G__getstructoffset())->erase(*(int*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_573_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) G__getstructoffset())->erase(*((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator*) G__int(libp->para[0])), *((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_573_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) G__getstructoffset())->swap(*(map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_573_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_573_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator* pobj;
         map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator xobj = ((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) G__getstructoffset())->find(*(int*) G__Intref(&libp->para[0]));
         pobj = new map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_573_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) G__getstructoffset())->count(*(int*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_573_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator* pobj;
         map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator xobj = ((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) G__getstructoffset())->lower_bound(*(int*) G__Intref(&libp->para[0]));
         pobj = new map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_573_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator* pobj;
         map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator xobj = ((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) G__getstructoffset())->upper_bound(*(int*) G__Intref(&libp->para[0]));
         pobj = new map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > > G__TmaplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR;
static int G__SFrameCore_Dict_573_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) (soff+(sizeof(map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >)*i)))->~G__TmaplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*) (soff))->~G__TmaplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<int,vector<STree,allocator<STree> > > */
static int G__SFrameCore_Dict_574_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<int,vector<STree,allocator<STree> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<int,vector<STree,allocator<STree> > >[n];
     } else {
       p = new((void*) gvp) pair<int,vector<STree,allocator<STree> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<int,vector<STree,allocator<STree> > >;
     } else {
       p = new((void*) gvp) pair<int,vector<STree,allocator<STree> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_574_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<int,vector<STree,allocator<STree> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<int,vector<STree,allocator<STree> > >(*(int*) G__Intref(&libp->para[0]), *(vector<STree,allocator<STree> >*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) pair<int,vector<STree,allocator<STree> > >(*(int*) G__Intref(&libp->para[0]), *(vector<STree,allocator<STree> >*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFrameCore_Dict_574_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<int,vector<STree,allocator<STree> > >* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<int,vector<STree,allocator<STree> > >(*(pair<int,vector<STree,allocator<STree> > >*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<int,vector<STree,allocator<STree> > > G__TpairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR;
static int G__SFrameCore_Dict_574_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<int,vector<STree,allocator<STree> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<int,vector<STree,allocator<STree> > >*) (soff+(sizeof(pair<int,vector<STree,allocator<STree> > >)*i)))->~G__TpairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<int,vector<STree,allocator<STree> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<int,vector<STree,allocator<STree> > >*) (soff))->~G__TpairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<SDataSet,allocator<SDataSet> > */
static int G__SFrameCore_Dict_579_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SDataSet,allocator<SDataSet> >::reference obj = ((vector<SDataSet,allocator<SDataSet> >*) G__getstructoffset())->at((vector<SDataSet,allocator<SDataSet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDataSet,allocator<SDataSet> >::const_reference obj = ((const vector<SDataSet,allocator<SDataSet> >*) G__getstructoffset())->at((vector<SDataSet,allocator<SDataSet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDataSet,allocator<SDataSet> >::iterator* pobj;
         vector<SDataSet,allocator<SDataSet> >::iterator xobj = ((vector<SDataSet,allocator<SDataSet> >*) G__getstructoffset())->begin();
         pobj = new vector<SDataSet,allocator<SDataSet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDataSet,allocator<SDataSet> >::iterator* pobj;
         vector<SDataSet,allocator<SDataSet> >::iterator xobj = ((vector<SDataSet,allocator<SDataSet> >*) G__getstructoffset())->end();
         pobj = new vector<SDataSet,allocator<SDataSet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDataSet,allocator<SDataSet> >::reverse_iterator* pobj;
         vector<SDataSet,allocator<SDataSet> >::reverse_iterator xobj = ((vector<SDataSet,allocator<SDataSet> >*) G__getstructoffset())->rbegin();
         pobj = new vector<SDataSet,allocator<SDataSet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDataSet,allocator<SDataSet> >::reverse_iterator* pobj;
         vector<SDataSet,allocator<SDataSet> >::reverse_iterator xobj = ((vector<SDataSet,allocator<SDataSet> >*) G__getstructoffset())->rend();
         pobj = new vector<SDataSet,allocator<SDataSet> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SDataSet,allocator<SDataSet> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SDataSet,allocator<SDataSet> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDataSet,allocator<SDataSet> >*) G__getstructoffset())->resize((vector<SDataSet,allocator<SDataSet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDataSet,allocator<SDataSet> >*) G__getstructoffset())->resize((vector<SDataSet,allocator<SDataSet> >::size_type) G__int(libp->para[0]), *((SDataSet*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SDataSet,allocator<SDataSet> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<SDataSet,allocator<SDataSet> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SDataSet,allocator<SDataSet> >::reference obj = ((vector<SDataSet,allocator<SDataSet> >*) G__getstructoffset())->operator[]((vector<SDataSet,allocator<SDataSet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDataSet,allocator<SDataSet> >::const_reference obj = ((const vector<SDataSet,allocator<SDataSet> >*) G__getstructoffset())->operator[]((vector<SDataSet,allocator<SDataSet> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SDataSet,allocator<SDataSet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SDataSet,allocator<SDataSet> >[n];
     } else {
       p = new((void*) gvp) vector<SDataSet,allocator<SDataSet> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SDataSet,allocator<SDataSet> >;
     } else {
       p = new((void*) gvp) vector<SDataSet,allocator<SDataSet> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SDataSet,allocator<SDataSet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SDataSet,allocator<SDataSet> >((vector<SDataSet,allocator<SDataSet> >::size_type) G__int(libp->para[0]), *(SDataSet*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<SDataSet,allocator<SDataSet> >((vector<SDataSet,allocator<SDataSet> >::size_type) G__int(libp->para[0]), *(SDataSet*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SDataSet,allocator<SDataSet> >((vector<SDataSet,allocator<SDataSet> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<SDataSet,allocator<SDataSet> >((vector<SDataSet,allocator<SDataSet> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SDataSet,allocator<SDataSet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SDataSet,allocator<SDataSet> >(*(vector<SDataSet,allocator<SDataSet> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<SDataSet,allocator<SDataSet> >(*(vector<SDataSet,allocator<SDataSet> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SDataSet,allocator<SDataSet> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SDataSet,allocator<SDataSet> >(*((vector<SDataSet,allocator<SDataSet> >::const_iterator*) G__int(libp->para[0])), *((vector<SDataSet,allocator<SDataSet> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<SDataSet,allocator<SDataSet> >(*((vector<SDataSet,allocator<SDataSet> >::const_iterator*) G__int(libp->para[0])), *((vector<SDataSet,allocator<SDataSet> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SDataSet,allocator<SDataSet> >& obj = ((vector<SDataSet,allocator<SDataSet> >*) G__getstructoffset())->operator=(*(vector<SDataSet,allocator<SDataSet> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDataSet,allocator<SDataSet> >*) G__getstructoffset())->reserve((vector<SDataSet,allocator<SDataSet> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SDataSet& obj = ((vector<SDataSet,allocator<SDataSet> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SDataSet& obj = ((vector<SDataSet,allocator<SDataSet> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDataSet,allocator<SDataSet> >*) G__getstructoffset())->push_back(*(SDataSet*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDataSet,allocator<SDataSet> >*) G__getstructoffset())->swap(*(vector<SDataSet,allocator<SDataSet> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SDataSet,allocator<SDataSet> >::iterator* pobj;
         vector<SDataSet,allocator<SDataSet> >::iterator xobj = ((vector<SDataSet,allocator<SDataSet> >*) G__getstructoffset())->insert(*((vector<SDataSet,allocator<SDataSet> >::iterator*) G__int(libp->para[0])), *(SDataSet*) libp->para[1].ref);
         pobj = new vector<SDataSet,allocator<SDataSet> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDataSet,allocator<SDataSet> >*) G__getstructoffset())->insert(*((vector<SDataSet,allocator<SDataSet> >::iterator*) G__int(libp->para[0])), *((vector<SDataSet,allocator<SDataSet> >::const_iterator*) G__int(libp->para[1]))
, *((vector<SDataSet,allocator<SDataSet> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDataSet,allocator<SDataSet> >*) G__getstructoffset())->insert(*((vector<SDataSet,allocator<SDataSet> >::iterator*) G__int(libp->para[0])), (vector<SDataSet,allocator<SDataSet> >::size_type) G__int(libp->para[1])
, *(SDataSet*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDataSet,allocator<SDataSet> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDataSet,allocator<SDataSet> >*) G__getstructoffset())->erase(*((vector<SDataSet,allocator<SDataSet> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDataSet,allocator<SDataSet> >*) G__getstructoffset())->erase(*((vector<SDataSet,allocator<SDataSet> >::iterator*) G__int(libp->para[0])), *((vector<SDataSet,allocator<SDataSet> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_579_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SDataSet,allocator<SDataSet> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<SDataSet,allocator<SDataSet> > G__TvectorlESDataSetcOallocatorlESDataSetgRsPgR;
static int G__SFrameCore_Dict_579_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<SDataSet,allocator<SDataSet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<SDataSet,allocator<SDataSet> >*) (soff+(sizeof(vector<SDataSet,allocator<SDataSet> >)*i)))->~G__TvectorlESDataSetcOallocatorlESDataSetgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<SDataSet,allocator<SDataSet> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<SDataSet,allocator<SDataSet> >*) (soff))->~G__TvectorlESDataSetcOallocatorlESDataSetgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<string,string> */
static int G__SFrameCore_Dict_583_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<string,string>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<string,string>[n];
     } else {
       p = new((void*) gvp) pair<string,string>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<string,string>;
     } else {
       p = new((void*) gvp) pair<string,string>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEstringcOstringgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_583_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<string,string>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<string,string>(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) pair<string,string>(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEstringcOstringgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFrameCore_Dict_583_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<string,string>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<string,string>(*(pair<string,string>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEstringcOstringgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<string,string> G__TpairlEstringcOstringgR;
static int G__SFrameCore_Dict_583_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<string,string>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<string,string>*) (soff+(sizeof(pair<string,string>)*i)))->~G__TpairlEstringcOstringgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<string,string>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<string,string>*) (soff))->~G__TpairlEstringcOstringgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<pair<string,string>,allocator<pair<string,string> > > */
static int G__SFrameCore_Dict_585_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<pair<string,string>,allocator<pair<string,string> > >::reference obj = ((vector<pair<string,string>,allocator<pair<string,string> > >*) G__getstructoffset())->at((vector<pair<string,string>,allocator<pair<string,string> > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pair<string,string>,allocator<pair<string,string> > >::const_reference obj = ((const vector<pair<string,string>,allocator<pair<string,string> > >*) G__getstructoffset())->at((vector<pair<string,string>,allocator<pair<string,string> > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pair<string,string>,allocator<pair<string,string> > >::iterator* pobj;
         vector<pair<string,string>,allocator<pair<string,string> > >::iterator xobj = ((vector<pair<string,string>,allocator<pair<string,string> > >*) G__getstructoffset())->begin();
         pobj = new vector<pair<string,string>,allocator<pair<string,string> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pair<string,string>,allocator<pair<string,string> > >::iterator* pobj;
         vector<pair<string,string>,allocator<pair<string,string> > >::iterator xobj = ((vector<pair<string,string>,allocator<pair<string,string> > >*) G__getstructoffset())->end();
         pobj = new vector<pair<string,string>,allocator<pair<string,string> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pair<string,string>,allocator<pair<string,string> > >::reverse_iterator* pobj;
         vector<pair<string,string>,allocator<pair<string,string> > >::reverse_iterator xobj = ((vector<pair<string,string>,allocator<pair<string,string> > >*) G__getstructoffset())->rbegin();
         pobj = new vector<pair<string,string>,allocator<pair<string,string> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pair<string,string>,allocator<pair<string,string> > >::reverse_iterator* pobj;
         vector<pair<string,string>,allocator<pair<string,string> > >::reverse_iterator xobj = ((vector<pair<string,string>,allocator<pair<string,string> > >*) G__getstructoffset())->rend();
         pobj = new vector<pair<string,string>,allocator<pair<string,string> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<pair<string,string>,allocator<pair<string,string> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<pair<string,string>,allocator<pair<string,string> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pair<string,string>,allocator<pair<string,string> > >*) G__getstructoffset())->resize((vector<pair<string,string>,allocator<pair<string,string> > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pair<string,string>,allocator<pair<string,string> > >*) G__getstructoffset())->resize((vector<pair<string,string>,allocator<pair<string,string> > >::size_type) G__int(libp->para[0]), *((pair<string,string>*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<pair<string,string>,allocator<pair<string,string> > >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<pair<string,string>,allocator<pair<string,string> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<pair<string,string>,allocator<pair<string,string> > >::reference obj = ((vector<pair<string,string>,allocator<pair<string,string> > >*) G__getstructoffset())->operator[]((vector<pair<string,string>,allocator<pair<string,string> > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pair<string,string>,allocator<pair<string,string> > >::const_reference obj = ((const vector<pair<string,string>,allocator<pair<string,string> > >*) G__getstructoffset())->operator[]((vector<pair<string,string>,allocator<pair<string,string> > >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<pair<string,string>,allocator<pair<string,string> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<pair<string,string>,allocator<pair<string,string> > >[n];
     } else {
       p = new((void*) gvp) vector<pair<string,string>,allocator<pair<string,string> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<pair<string,string>,allocator<pair<string,string> > >;
     } else {
       p = new((void*) gvp) vector<pair<string,string>,allocator<pair<string,string> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<pair<string,string>,allocator<pair<string,string> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<pair<string,string>,allocator<pair<string,string> > >((vector<pair<string,string>,allocator<pair<string,string> > >::size_type) G__int(libp->para[0]), *(pair<string,string>*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<pair<string,string>,allocator<pair<string,string> > >((vector<pair<string,string>,allocator<pair<string,string> > >::size_type) G__int(libp->para[0]), *(pair<string,string>*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<pair<string,string>,allocator<pair<string,string> > >((vector<pair<string,string>,allocator<pair<string,string> > >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<pair<string,string>,allocator<pair<string,string> > >((vector<pair<string,string>,allocator<pair<string,string> > >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<pair<string,string>,allocator<pair<string,string> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<pair<string,string>,allocator<pair<string,string> > >(*(vector<pair<string,string>,allocator<pair<string,string> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<pair<string,string>,allocator<pair<string,string> > >(*(vector<pair<string,string>,allocator<pair<string,string> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<pair<string,string>,allocator<pair<string,string> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<pair<string,string>,allocator<pair<string,string> > >(*((vector<pair<string,string>,allocator<pair<string,string> > >::const_iterator*) G__int(libp->para[0])), *((vector<pair<string,string>,allocator<pair<string,string> > >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<pair<string,string>,allocator<pair<string,string> > >(*((vector<pair<string,string>,allocator<pair<string,string> > >::const_iterator*) G__int(libp->para[0])), *((vector<pair<string,string>,allocator<pair<string,string> > >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<pair<string,string>,allocator<pair<string,string> > >& obj = ((vector<pair<string,string>,allocator<pair<string,string> > >*) G__getstructoffset())->operator=(*(vector<pair<string,string>,allocator<pair<string,string> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pair<string,string>,allocator<pair<string,string> > >*) G__getstructoffset())->reserve((vector<pair<string,string>,allocator<pair<string,string> > >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const pair<string,string>& obj = ((vector<pair<string,string>,allocator<pair<string,string> > >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const pair<string,string>& obj = ((vector<pair<string,string>,allocator<pair<string,string> > >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pair<string,string>,allocator<pair<string,string> > >*) G__getstructoffset())->push_back(*(pair<string,string>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pair<string,string>,allocator<pair<string,string> > >*) G__getstructoffset())->swap(*(vector<pair<string,string>,allocator<pair<string,string> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pair<string,string>,allocator<pair<string,string> > >::iterator* pobj;
         vector<pair<string,string>,allocator<pair<string,string> > >::iterator xobj = ((vector<pair<string,string>,allocator<pair<string,string> > >*) G__getstructoffset())->insert(*((vector<pair<string,string>,allocator<pair<string,string> > >::iterator*) G__int(libp->para[0])), *(pair<string,string>*) libp->para[1].ref);
         pobj = new vector<pair<string,string>,allocator<pair<string,string> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pair<string,string>,allocator<pair<string,string> > >*) G__getstructoffset())->insert(*((vector<pair<string,string>,allocator<pair<string,string> > >::iterator*) G__int(libp->para[0])), *((vector<pair<string,string>,allocator<pair<string,string> > >::const_iterator*) G__int(libp->para[1]))
, *((vector<pair<string,string>,allocator<pair<string,string> > >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pair<string,string>,allocator<pair<string,string> > >*) G__getstructoffset())->insert(*((vector<pair<string,string>,allocator<pair<string,string> > >::iterator*) G__int(libp->para[0])), (vector<pair<string,string>,allocator<pair<string,string> > >::size_type) G__int(libp->para[1])
, *(pair<string,string>*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pair<string,string>,allocator<pair<string,string> > >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pair<string,string>,allocator<pair<string,string> > >*) G__getstructoffset())->erase(*((vector<pair<string,string>,allocator<pair<string,string> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pair<string,string>,allocator<pair<string,string> > >*) G__getstructoffset())->erase(*((vector<pair<string,string>,allocator<pair<string,string> > >::iterator*) G__int(libp->para[0])), *((vector<pair<string,string>,allocator<pair<string,string> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_585_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<pair<string,string>,allocator<pair<string,string> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<pair<string,string>,allocator<pair<string,string> > > G__TvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR;
static int G__SFrameCore_Dict_585_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<pair<string,string>,allocator<pair<string,string> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<pair<string,string>,allocator<pair<string,string> > >*) (soff+(sizeof(vector<pair<string,string>,allocator<pair<string,string> > >)*i)))->~G__TvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<pair<string,string>,allocator<pair<string,string> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<pair<string,string>,allocator<pair<string,string> > >*) (soff))->~G__TvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<SInputData,allocator<SInputData> > */
static int G__SFrameCore_Dict_589_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SInputData,allocator<SInputData> >::reference obj = ((vector<SInputData,allocator<SInputData> >*) G__getstructoffset())->at((vector<SInputData,allocator<SInputData> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SInputData,allocator<SInputData> >::const_reference obj = ((const vector<SInputData,allocator<SInputData> >*) G__getstructoffset())->at((vector<SInputData,allocator<SInputData> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SInputData,allocator<SInputData> >::iterator* pobj;
         vector<SInputData,allocator<SInputData> >::iterator xobj = ((vector<SInputData,allocator<SInputData> >*) G__getstructoffset())->begin();
         pobj = new vector<SInputData,allocator<SInputData> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SInputData,allocator<SInputData> >::iterator* pobj;
         vector<SInputData,allocator<SInputData> >::iterator xobj = ((vector<SInputData,allocator<SInputData> >*) G__getstructoffset())->end();
         pobj = new vector<SInputData,allocator<SInputData> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SInputData,allocator<SInputData> >::reverse_iterator* pobj;
         vector<SInputData,allocator<SInputData> >::reverse_iterator xobj = ((vector<SInputData,allocator<SInputData> >*) G__getstructoffset())->rbegin();
         pobj = new vector<SInputData,allocator<SInputData> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SInputData,allocator<SInputData> >::reverse_iterator* pobj;
         vector<SInputData,allocator<SInputData> >::reverse_iterator xobj = ((vector<SInputData,allocator<SInputData> >*) G__getstructoffset())->rend();
         pobj = new vector<SInputData,allocator<SInputData> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SInputData,allocator<SInputData> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SInputData,allocator<SInputData> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SInputData,allocator<SInputData> >*) G__getstructoffset())->resize((vector<SInputData,allocator<SInputData> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SInputData,allocator<SInputData> >*) G__getstructoffset())->resize((vector<SInputData,allocator<SInputData> >::size_type) G__int(libp->para[0]), *((SInputData*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<SInputData,allocator<SInputData> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<SInputData,allocator<SInputData> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SInputData,allocator<SInputData> >::reference obj = ((vector<SInputData,allocator<SInputData> >*) G__getstructoffset())->operator[]((vector<SInputData,allocator<SInputData> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SInputData,allocator<SInputData> >::const_reference obj = ((const vector<SInputData,allocator<SInputData> >*) G__getstructoffset())->operator[]((vector<SInputData,allocator<SInputData> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SInputData,allocator<SInputData> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SInputData,allocator<SInputData> >[n];
     } else {
       p = new((void*) gvp) vector<SInputData,allocator<SInputData> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SInputData,allocator<SInputData> >;
     } else {
       p = new((void*) gvp) vector<SInputData,allocator<SInputData> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SInputData,allocator<SInputData> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SInputData,allocator<SInputData> >((vector<SInputData,allocator<SInputData> >::size_type) G__int(libp->para[0]), *(SInputData*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<SInputData,allocator<SInputData> >((vector<SInputData,allocator<SInputData> >::size_type) G__int(libp->para[0]), *(SInputData*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<SInputData,allocator<SInputData> >((vector<SInputData,allocator<SInputData> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<SInputData,allocator<SInputData> >((vector<SInputData,allocator<SInputData> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SInputData,allocator<SInputData> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SInputData,allocator<SInputData> >(*(vector<SInputData,allocator<SInputData> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<SInputData,allocator<SInputData> >(*(vector<SInputData,allocator<SInputData> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<SInputData,allocator<SInputData> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<SInputData,allocator<SInputData> >(*((vector<SInputData,allocator<SInputData> >::const_iterator*) G__int(libp->para[0])), *((vector<SInputData,allocator<SInputData> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<SInputData,allocator<SInputData> >(*((vector<SInputData,allocator<SInputData> >::const_iterator*) G__int(libp->para[0])), *((vector<SInputData,allocator<SInputData> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<SInputData,allocator<SInputData> >& obj = ((vector<SInputData,allocator<SInputData> >*) G__getstructoffset())->operator=(*(vector<SInputData,allocator<SInputData> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SInputData,allocator<SInputData> >*) G__getstructoffset())->reserve((vector<SInputData,allocator<SInputData> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SInputData& obj = ((vector<SInputData,allocator<SInputData> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const SInputData& obj = ((vector<SInputData,allocator<SInputData> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SInputData,allocator<SInputData> >*) G__getstructoffset())->push_back(*(SInputData*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SInputData,allocator<SInputData> >*) G__getstructoffset())->swap(*(vector<SInputData,allocator<SInputData> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<SInputData,allocator<SInputData> >::iterator* pobj;
         vector<SInputData,allocator<SInputData> >::iterator xobj = ((vector<SInputData,allocator<SInputData> >*) G__getstructoffset())->insert(*((vector<SInputData,allocator<SInputData> >::iterator*) G__int(libp->para[0])), *(SInputData*) libp->para[1].ref);
         pobj = new vector<SInputData,allocator<SInputData> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SInputData,allocator<SInputData> >*) G__getstructoffset())->insert(*((vector<SInputData,allocator<SInputData> >::iterator*) G__int(libp->para[0])), *((vector<SInputData,allocator<SInputData> >::const_iterator*) G__int(libp->para[1]))
, *((vector<SInputData,allocator<SInputData> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SInputData,allocator<SInputData> >*) G__getstructoffset())->insert(*((vector<SInputData,allocator<SInputData> >::iterator*) G__int(libp->para[0])), (vector<SInputData,allocator<SInputData> >::size_type) G__int(libp->para[1])
, *(SInputData*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SInputData,allocator<SInputData> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SInputData,allocator<SInputData> >*) G__getstructoffset())->erase(*((vector<SInputData,allocator<SInputData> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SInputData,allocator<SInputData> >*) G__getstructoffset())->erase(*((vector<SInputData,allocator<SInputData> >::iterator*) G__int(libp->para[0])), *((vector<SInputData,allocator<SInputData> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_589_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<SInputData,allocator<SInputData> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<SInputData,allocator<SInputData> > G__TvectorlESInputDatacOallocatorlESInputDatagRsPgR;
static int G__SFrameCore_Dict_589_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<SInputData,allocator<SInputData> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<SInputData,allocator<SInputData> >*) (soff+(sizeof(vector<SInputData,allocator<SInputData> >)*i)))->~G__TvectorlESInputDatacOallocatorlESInputDatagRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<SInputData,allocator<SInputData> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<SInputData,allocator<SInputData> >*) (soff))->~G__TvectorlESInputDatacOallocatorlESInputDatagRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SCycleBaseConfig */
static int G__SFrameCore_Dict_592_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SCycleBaseConfig* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SCycleBaseConfig[n];
     } else {
       p = new((void*) gvp) SCycleBaseConfig[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SCycleBaseConfig;
     } else {
       p = new((void*) gvp) SCycleBaseConfig;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseConfig));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_592_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleBaseConfig*) G__getstructoffset())->DeclareProperty(*(string*) libp->para[0].ref, *(string*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_592_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleBaseConfig*) G__getstructoffset())->DeclareProperty(*(string*) libp->para[0].ref, *(int*) G__Intref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_592_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleBaseConfig*) G__getstructoffset())->DeclareProperty(*(string*) libp->para[0].ref, *(double*) G__Doubleref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_592_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleBaseConfig*) G__getstructoffset())->DeclareProperty(*(string*) libp->para[0].ref, *(bool*) G__Boolref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_592_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleBaseConfig*) G__getstructoffset())->DeclareProperty(*(string*) libp->para[0].ref, *(vector<std::string>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_592_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleBaseConfig*) G__getstructoffset())->DeclareProperty(*(string*) libp->para[0].ref, *(vector<int>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_592_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleBaseConfig*) G__getstructoffset())->DeclareProperty(*(string*) libp->para[0].ref, *(vector<double>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_592_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleBaseConfig*) G__getstructoffset())->DeclareProperty(*(string*) libp->para[0].ref, *(vector<bool>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_592_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleBaseConfig*) G__getstructoffset())->AddConfigObject((TObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_592_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SCycleBaseConfig*) G__getstructoffset())->GetConfigObject((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_592_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SCycleBaseConfig::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_592_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SCycleBaseConfig::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_592_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SCycleBaseConfig::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_592_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SCycleBaseConfig::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_592_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleBaseConfig*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_592_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SCycleBaseConfig::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_592_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SCycleBaseConfig::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_592_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SCycleBaseConfig::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_592_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SCycleBaseConfig::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SCycleBaseConfig G__TSCycleBaseConfig;
static int G__SFrameCore_Dict_592_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SCycleBaseConfig*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SCycleBaseConfig*) (soff+(sizeof(SCycleBaseConfig)*i)))->~G__TSCycleBaseConfig();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SCycleBaseConfig*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SCycleBaseConfig*) (soff))->~G__TSCycleBaseConfig();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SCycleBase */
static int G__SFrameCore_Dict_599_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SCycleBase::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_599_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SCycleBase::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_599_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SCycleBase::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_599_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SCycleBase::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_599_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleBase*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_599_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SCycleBase::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_599_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SCycleBase::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_599_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SCycleBase::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_599_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SCycleBase::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SCycleBase G__TSCycleBase;
static int G__SFrameCore_Dict_599_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SCycleBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SCycleBase*) (soff+(sizeof(SCycleBase)*i)))->~G__TSCycleBase();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SCycleBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SCycleBase*) (soff))->~G__TSCycleBase();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SCycleOutput */
static int G__SFrameCore_Dict_610_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SCycleOutput* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SCycleOutput(
(TObject*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) SCycleOutput(
(TObject*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SCycleOutput((TObject*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) SCycleOutput((TObject*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SCycleOutput((TObject*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SCycleOutput((TObject*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SCycleOutput[n];
       } else {
         p = new((void*) gvp) SCycleOutput[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SCycleOutput;
       } else {
         p = new((void*) gvp) SCycleOutput;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleOutput));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_610_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SCycleOutput*) G__getstructoffset())->GetObject());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_610_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleOutput*) G__getstructoffset())->SetObject((TObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_610_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const SCycleOutput*) G__getstructoffset())->GetPath();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_610_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleOutput*) G__getstructoffset())->SetPath(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_610_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SCycleOutput*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_610_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SCycleOutput::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_610_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SCycleOutput::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_610_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SCycleOutput::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_610_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SCycleOutput::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_610_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleOutput*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_610_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SCycleOutput::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_610_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SCycleOutput::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_610_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SCycleOutput::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_610_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SCycleOutput::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SCycleOutput G__TSCycleOutput;
static int G__SFrameCore_Dict_610_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SCycleOutput*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SCycleOutput*) (soff+(sizeof(SCycleOutput)*i)))->~G__TSCycleOutput();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SCycleOutput*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SCycleOutput*) (soff))->~G__TSCycleOutput();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SCycleStatistics */
static int G__SFrameCore_Dict_611_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SCycleStatistics* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SCycleStatistics(
(const char*) G__int(libp->para[0]), (Long64_t) G__Longlong(libp->para[1])
, (Long64_t) G__Longlong(libp->para[2]));
     } else {
       p = new((void*) gvp) SCycleStatistics(
(const char*) G__int(libp->para[0]), (Long64_t) G__Longlong(libp->para[1])
, (Long64_t) G__Longlong(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SCycleStatistics((const char*) G__int(libp->para[0]), (Long64_t) G__Longlong(libp->para[1]));
     } else {
       p = new((void*) gvp) SCycleStatistics((const char*) G__int(libp->para[0]), (Long64_t) G__Longlong(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SCycleStatistics((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) SCycleStatistics((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SCycleStatistics[n];
       } else {
         p = new((void*) gvp) SCycleStatistics[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new SCycleStatistics;
       } else {
         p = new((void*) gvp) SCycleStatistics;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleStatistics));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_611_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((const SCycleStatistics*) G__getstructoffset())->GetProcessedEvents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_611_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleStatistics*) G__getstructoffset())->SetProcessedEvents((Long64_t) G__Longlong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_611_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((const SCycleStatistics*) G__getstructoffset())->GetSkippedEvents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_611_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleStatistics*) G__getstructoffset())->SetSkippedEvents((Long64_t) G__Longlong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_611_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SCycleStatistics*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_611_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SCycleStatistics::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_611_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SCycleStatistics::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_611_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SCycleStatistics::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_611_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SCycleStatistics::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_611_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SCycleStatistics*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_611_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SCycleStatistics::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_611_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SCycleStatistics::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_611_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SCycleStatistics::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_611_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SCycleStatistics::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SCycleStatistics G__TSCycleStatistics;
static int G__SFrameCore_Dict_611_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SCycleStatistics*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SCycleStatistics*) (soff+(sizeof(SCycleStatistics)*i)))->~G__TSCycleStatistics();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SCycleStatistics*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SCycleStatistics*) (soff))->~G__TSCycleStatistics();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SOutputFile */
static int G__SFrameCore_Dict_617_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SOutputFile* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new SOutputFile((const char*) G__int(libp->para[0]), *(TString*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) SOutputFile((const char*) G__int(libp->para[0]), *(TString*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_SOutputFile));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_617_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SOutputFile*) G__getstructoffset())->SetFileName(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_617_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const SOutputFile*) G__getstructoffset())->GetFileName();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_617_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SOutputFile::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_617_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SOutputFile::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_617_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SOutputFile::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_617_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SOutputFile::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_617_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SOutputFile*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_617_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SOutputFile::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_617_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SOutputFile::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_617_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SOutputFile::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SFrameCore_Dict_617_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SOutputFile::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SFrameCore_Dict_617_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SOutputFile* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SOutputFile(*(SOutputFile*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SFrameCore_DictLN_SOutputFile));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SOutputFile G__TSOutputFile;
static int G__SFrameCore_Dict_617_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SOutputFile*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SOutputFile*) (soff+(sizeof(SOutputFile)*i)))->~G__TSOutputFile();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SOutputFile*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SOutputFile*) (soff))->~G__TSOutputFile();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SFrameCore_Dict_617_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SOutputFile* dest = (SOutputFile*) G__getstructoffset();
   *dest = *(SOutputFile*) libp->para[0].ref;
   const SOutputFile& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* SCycleConfig */

/* ISCycleBaseConfig */

/* ISCycleBaseHist */

/* SInputData */

/* ISCycleBaseNTuple */

/* SCycleBaseBase */

/* SCycleBaseExec */

/* ISCycleBase */

/* SCycleBaseNTuple */

/* SCycleBaseHist */

/* SGeneratorCut */

/* SDataSet */

/* SFile */

/* STree */

/* vector<SGeneratorCut,allocator<SGeneratorCut> > */

/* vector<SFile,allocator<SFile> > */

/* vector<STree,allocator<STree> > */

/* map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > > */

/* pair<int,vector<STree,allocator<STree> > > */

/* vector<SDataSet,allocator<SDataSet> > */

/* pair<string,string> */

/* vector<pair<string,string>,allocator<pair<string,string> > > */

/* vector<SInputData,allocator<SInputData> > */

/* SCycleBaseConfig */

/* SCycleBase */

/* SCycleOutput */

/* SCycleStatistics */

/* SOutputFile */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncSFrameCore_Dict {
 public:
  G__Sizep2memfuncSFrameCore_Dict(): p(&G__Sizep2memfuncSFrameCore_Dict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncSFrameCore_Dict::*p)();
};

size_t G__get_sizep2memfuncSFrameCore_Dict()
{
  G__Sizep2memfuncSFrameCore_Dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */
static long G__2vbo_SCycleBaseExec_ISCycleBaseConfig_2(long pobject) {
  SCycleBaseExec *G__Lderived=(SCycleBaseExec*)pobject;
  ISCycleBaseConfig *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_SCycleBaseExec_ISCycleBaseHist_3(long pobject) {
  SCycleBaseExec *G__Lderived=(SCycleBaseExec*)pobject;
  ISCycleBaseHist *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_SCycleBaseExec_ISCycleBaseNTuple_4(long pobject) {
  SCycleBaseExec *G__Lderived=(SCycleBaseExec*)pobject;
  ISCycleBaseNTuple *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_SCycleBaseExec_SCycleBaseBase_5(long pobject) {
  SCycleBaseExec *G__Lderived=(SCycleBaseExec*)pobject;
  SCycleBaseBase *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_ISCycleBase_ISCycleBaseConfig_3(long pobject) {
  ISCycleBase *G__Lderived=(ISCycleBase*)pobject;
  ISCycleBaseConfig *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_ISCycleBase_ISCycleBaseHist_4(long pobject) {
  ISCycleBase *G__Lderived=(ISCycleBase*)pobject;
  ISCycleBaseHist *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_ISCycleBase_ISCycleBaseNTuple_5(long pobject) {
  ISCycleBase *G__Lderived=(ISCycleBase*)pobject;
  ISCycleBaseNTuple *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_ISCycleBase_SCycleBaseBase_6(long pobject) {
  ISCycleBase *G__Lderived=(ISCycleBase*)pobject;
  SCycleBaseBase *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_ISCycleBase_ISCycleBaseConfig_7(long pobject) {
  ISCycleBase *G__Lderived=(ISCycleBase*)pobject;
  ISCycleBaseConfig *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_SCycleBaseNTuple_ISCycleBaseConfig_0(long pobject) {
  SCycleBaseNTuple *G__Lderived=(SCycleBaseNTuple*)pobject;
  ISCycleBaseConfig *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_SCycleBaseNTuple_ISCycleBaseNTuple_1(long pobject) {
  SCycleBaseNTuple *G__Lderived=(SCycleBaseNTuple*)pobject;
  ISCycleBaseNTuple *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_SCycleBaseNTuple_SCycleBaseBase_2(long pobject) {
  SCycleBaseNTuple *G__Lderived=(SCycleBaseNTuple*)pobject;
  SCycleBaseBase *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_SCycleBaseHist_ISCycleBaseHist_0(long pobject) {
  SCycleBaseHist *G__Lderived=(SCycleBaseHist*)pobject;
  ISCycleBaseHist *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_SCycleBaseHist_ISCycleBaseNTuple_1(long pobject) {
  SCycleBaseHist *G__Lderived=(SCycleBaseHist*)pobject;
  ISCycleBaseNTuple *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_SCycleBaseHist_SCycleBaseBase_2(long pobject) {
  SCycleBaseHist *G__Lderived=(SCycleBaseHist*)pobject;
  SCycleBaseBase *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_SCycleBaseConfig_ISCycleBaseConfig_0(long pobject) {
  SCycleBaseConfig *G__Lderived=(SCycleBaseConfig*)pobject;
  ISCycleBaseConfig *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_SCycleBaseConfig_SCycleBaseBase_1(long pobject) {
  SCycleBaseConfig *G__Lderived=(SCycleBaseConfig*)pobject;
  SCycleBaseBase *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_SCycleBase_ISCycleBaseConfig_4(long pobject) {
  SCycleBase *G__Lderived=(SCycleBase*)pobject;
  ISCycleBaseConfig *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_SCycleBase_ISCycleBaseHist_5(long pobject) {
  SCycleBase *G__Lderived=(SCycleBase*)pobject;
  ISCycleBaseHist *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_SCycleBase_ISCycleBaseNTuple_6(long pobject) {
  SCycleBase *G__Lderived=(SCycleBase*)pobject;
  ISCycleBaseNTuple *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_SCycleBase_SCycleBaseBase_7(long pobject) {
  SCycleBase *G__Lderived=(SCycleBase*)pobject;
  SCycleBaseBase *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_SCycleBase_ISCycleBaseConfig_8(long pobject) {
  SCycleBase *G__Lderived=(SCycleBase*)pobject;
  ISCycleBaseConfig *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_SCycleBase_ISCycleBaseConfig_10(long pobject) {
  SCycleBase *G__Lderived=(SCycleBase*)pobject;
  ISCycleBaseConfig *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_SCycleBase_SCycleBaseBase_11(long pobject) {
  SCycleBase *G__Lderived=(SCycleBase*)pobject;
  SCycleBaseBase *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_SCycleBase_ISCycleBaseHist_13(long pobject) {
  SCycleBase *G__Lderived=(SCycleBase*)pobject;
  ISCycleBaseHist *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_SCycleBase_ISCycleBaseNTuple_14(long pobject) {
  SCycleBase *G__Lderived=(SCycleBase*)pobject;
  ISCycleBaseNTuple *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_SCycleBase_SCycleBaseBase_15(long pobject) {
  SCycleBase *G__Lderived=(SCycleBase*)pobject;
  SCycleBaseBase *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_SCycleBase_ISCycleBaseConfig_17(long pobject) {
  SCycleBase *G__Lderived=(SCycleBase*)pobject;
  ISCycleBaseConfig *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_SCycleBase_ISCycleBaseNTuple_18(long pobject) {
  SCycleBase *G__Lderived=(SCycleBase*)pobject;
  ISCycleBaseNTuple *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}

static long G__2vbo_SCycleBase_SCycleBaseBase_19(long pobject) {
  SCycleBase *G__Lderived=(SCycleBase*)pobject;
  SCycleBaseBase *G__Lbase=G__Lderived;
  return((long)G__Lbase-(long)G__Lderived);
}


/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceSFrameCore_Dict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleConfig))) {
     SCycleConfig *G__Lderived;
     G__Lderived=(SCycleConfig*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleConfig),G__get_linked_tagnum(&G__SFrameCore_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleConfig),G__get_linked_tagnum(&G__SFrameCore_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFrameCore_DictLN_SInputData))) {
     SInputData *G__Lderived;
     G__Lderived=(SInputData*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SInputData),G__get_linked_tagnum(&G__SFrameCore_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SInputData),G__get_linked_tagnum(&G__SFrameCore_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseExec))) {
     SCycleBaseExec *G__Lderived;
     G__Lderived=(SCycleBaseExec*)0x1000;
     {
       TSelector *G__Lpbase=(TSelector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseExec),G__get_linked_tagnum(&G__SFrameCore_DictLN_TSelector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseExec),G__get_linked_tagnum(&G__SFrameCore_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseExec),G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseConfig),(long)G__2vbo_SCycleBaseExec_ISCycleBaseConfig_2,1,3);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseExec),G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseHist),(long)G__2vbo_SCycleBaseExec_ISCycleBaseHist_3,1,3);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseExec),G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseNTuple),(long)G__2vbo_SCycleBaseExec_ISCycleBaseNTuple_4,1,3);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseExec),G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseBase),(long)G__2vbo_SCycleBaseExec_SCycleBaseBase_5,1,3);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBase))) {
     ISCycleBase *G__Lderived;
     G__Lderived=(ISCycleBase*)0x1000;
     {
       SCycleBaseExec *G__Lpbase=(SCycleBaseExec*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBase),G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseExec),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TSelector *G__Lpbase=(TSelector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBase),G__get_linked_tagnum(&G__SFrameCore_DictLN_TSelector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBase),G__get_linked_tagnum(&G__SFrameCore_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBase),G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseConfig),(long)G__2vbo_ISCycleBase_ISCycleBaseConfig_3,1,2);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBase),G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseHist),(long)G__2vbo_ISCycleBase_ISCycleBaseHist_4,1,2);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBase),G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseNTuple),(long)G__2vbo_ISCycleBase_ISCycleBaseNTuple_5,1,2);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBase),G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseBase),(long)G__2vbo_ISCycleBase_SCycleBaseBase_6,1,2);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBase),G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseConfig),(long)G__2vbo_ISCycleBase_ISCycleBaseConfig_7,1,3);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseNTuple))) {
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseNTuple),G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseConfig),(long)G__2vbo_SCycleBaseNTuple_ISCycleBaseConfig_0,1,3);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseNTuple),G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseNTuple),(long)G__2vbo_SCycleBaseNTuple_ISCycleBaseNTuple_1,1,3);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseNTuple),G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseBase),(long)G__2vbo_SCycleBaseNTuple_SCycleBaseBase_2,1,3);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseHist))) {
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseHist),G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseHist),(long)G__2vbo_SCycleBaseHist_ISCycleBaseHist_0,1,3);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseHist),G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseNTuple),(long)G__2vbo_SCycleBaseHist_ISCycleBaseNTuple_1,1,3);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseHist),G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseBase),(long)G__2vbo_SCycleBaseHist_SCycleBaseBase_2,1,3);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFrameCore_DictLN_SGeneratorCut))) {
     SGeneratorCut *G__Lderived;
     G__Lderived=(SGeneratorCut*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SGeneratorCut),G__get_linked_tagnum(&G__SFrameCore_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFrameCore_DictLN_SDataSet))) {
     SDataSet *G__Lderived;
     G__Lderived=(SDataSet*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SDataSet),G__get_linked_tagnum(&G__SFrameCore_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFrameCore_DictLN_SFile))) {
     SFile *G__Lderived;
     G__Lderived=(SFile*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SFile),G__get_linked_tagnum(&G__SFrameCore_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFrameCore_DictLN_STree))) {
     STree *G__Lderived;
     G__Lderived=(STree*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_STree),G__get_linked_tagnum(&G__SFrameCore_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseConfig))) {
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseConfig),G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseConfig),(long)G__2vbo_SCycleBaseConfig_ISCycleBaseConfig_0,1,3);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseConfig),G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseBase),(long)G__2vbo_SCycleBaseConfig_SCycleBaseBase_1,1,3);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBase))) {
     SCycleBase *G__Lderived;
     G__Lderived=(SCycleBase*)0x1000;
     {
       ISCycleBase *G__Lpbase=(ISCycleBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBase),G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       SCycleBaseExec *G__Lpbase=(SCycleBaseExec*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBase),G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseExec),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TSelector *G__Lpbase=(TSelector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBase),G__get_linked_tagnum(&G__SFrameCore_DictLN_TSelector),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBase),G__get_linked_tagnum(&G__SFrameCore_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBase),G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseConfig),(long)G__2vbo_SCycleBase_ISCycleBaseConfig_4,1,2);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBase),G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseHist),(long)G__2vbo_SCycleBase_ISCycleBaseHist_5,1,2);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBase),G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseNTuple),(long)G__2vbo_SCycleBase_ISCycleBaseNTuple_6,1,2);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBase),G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseBase),(long)G__2vbo_SCycleBase_SCycleBaseBase_7,1,2);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBase),G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseConfig),(long)G__2vbo_SCycleBase_ISCycleBaseConfig_8,1,2);
     }
     {
       SCycleBaseConfig *G__Lpbase=(SCycleBaseConfig*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBase),G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseConfig),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBase),G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseConfig),(long)G__2vbo_SCycleBase_ISCycleBaseConfig_10,1,2);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBase),G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseBase),(long)G__2vbo_SCycleBase_SCycleBaseBase_11,1,2);
     }
     {
       SCycleBaseHist *G__Lpbase=(SCycleBaseHist*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBase),G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseHist),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBase),G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseHist),(long)G__2vbo_SCycleBase_ISCycleBaseHist_13,1,2);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBase),G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseNTuple),(long)G__2vbo_SCycleBase_ISCycleBaseNTuple_14,1,2);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBase),G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseBase),(long)G__2vbo_SCycleBase_SCycleBaseBase_15,1,2);
     }
     {
       SCycleBaseNTuple *G__Lpbase=(SCycleBaseNTuple*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBase),G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseNTuple),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBase),G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseConfig),(long)G__2vbo_SCycleBase_ISCycleBaseConfig_17,1,2);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBase),G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseNTuple),(long)G__2vbo_SCycleBase_ISCycleBaseNTuple_18,1,2);
     }
     {
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBase),G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseBase),(long)G__2vbo_SCycleBase_SCycleBaseBase_19,1,2);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleOutput))) {
     SCycleOutput *G__Lderived;
     G__Lderived=(SCycleOutput*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleOutput),G__get_linked_tagnum(&G__SFrameCore_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleOutput),G__get_linked_tagnum(&G__SFrameCore_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleStatistics))) {
     SCycleStatistics *G__Lderived;
     G__Lderived=(SCycleStatistics*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleStatistics),G__get_linked_tagnum(&G__SFrameCore_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleStatistics),G__get_linked_tagnum(&G__SFrameCore_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SFrameCore_DictLN_SOutputFile))) {
     SOutputFile *G__Lderived;
     G__Lderived=(SOutputFile*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SOutputFile),G__get_linked_tagnum(&G__SFrameCore_DictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SOutputFile),G__get_linked_tagnum(&G__SFrameCore_DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableSFrameCore_Dict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Long64_t",110,-1,0,-1);
   G__setnewtype(-1,"Portable signed long integer 8 bytes",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TTree*>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlETTreemUcOallocatorlETTreemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlETTreemUcOallocatorlETTreemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlETTreemUcOallocatorlETTreemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlETTreemUcOallocatorlETTreemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlETTreemUcOallocatorlETTreemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<SMsgType,std::string>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplESMsgTypecOstringcOlesslESMsgTypegRcOallocatorlEpairlEconstsPSMsgTypecOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<SMsgType,string>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplESMsgTypecOstringcOlesslESMsgTypegRcOallocatorlEpairlEconstsPSMsgTypecOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<SMsgType,string,less<SMsgType> >",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplESMsgTypecOstringcOlesslESMsgTypegRcOallocatorlEpairlEconstsPSMsgTypecOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TBranch*>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlETBranchmUcOallocatorlETBranchmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlETBranchmUcOallocatorlETBranchmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlETBranchmUcOallocatorlETBranchmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlETBranchmUcOallocatorlETBranchmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlETBranchmUcOallocatorlETBranchmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<TObject*>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_listlETObjectmUcOallocatorlETObjectmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SGeneratorCut>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_SGeneratorCut),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__SFrameCore_DictLN_SGeneratorCut),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__SFrameCore_DictLN_SGeneratorCut),256,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_SGeneratorCut),1,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_SGeneratorCut),257,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SFile>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_SFile),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__SFrameCore_DictLN_SFile),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__SFrameCore_DictLN_SFile),256,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_SFile),1,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_SFile),257,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESFilecOallocatorlESFilegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESFilecOallocatorlESFilegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESFilecOallocatorlESFilegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESFilecOallocatorlESFilegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<STree>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_STree),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__SFrameCore_DictLN_STree),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__SFrameCore_DictLN_STree),256,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_STree),1,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_STree),257,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESTreecOallocatorlESTreegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESTreecOallocatorlESTreegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESTreecOallocatorlESTreegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESTreecOallocatorlESTreegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,std::vector<STree> >",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",105,-1,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_lesslEintgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_allocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<STree,allocator<STree> > >",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<STree,allocator<STree> >,less<int> >",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SDataSet>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_SDataSet),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__SFrameCore_DictLN_SDataSet),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__SFrameCore_DictLN_SDataSet),256,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_SDataSet),1,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_SDataSet),257,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESDataSetcOallocatorlESDataSetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESDataSetcOallocatorlESDataSetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESDataSetcOallocatorlESDataSetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESDataSetcOallocatorlESDataSetgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<std::string,std::string>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEstringcOstringgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<string,std::string>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEstringcOstringgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<std::string,std::string> >",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<string,std::string> >",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEstringcOstringgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEstringcOstringgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEstringcOstringgR),256,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEstringcOstringgR),1,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEstringcOstringgR),257,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<string,string> >",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("property_type",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleConfig));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SInputData>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_SInputData),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__SFrameCore_DictLN_SInputData),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__SFrameCore_DictLN_SInputData),256,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_SInputData),1,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_SInputData),257,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESInputDatacOallocatorlESInputDatagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESInputDatacOallocatorlESInputDatagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESInputDatacOallocatorlESInputDatagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESInputDatacOallocatorlESInputDatagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("id_type",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleConfig));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ISCycleBase*>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEISCycleBasemUcOallocatorlEISCycleBasemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlEISCycleBasemUcOallocatorlEISCycleBasemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEISCycleBasemUcOallocatorlEISCycleBasemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlEISCycleBasemUcOallocatorlEISCycleBasemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEISCycleBasemUcOallocatorlEISCycleBasemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TFile*>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlETFilemUcOallocatorlETFilemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlETFilemUcOallocatorlETFilemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlETFilemUcOallocatorlETFilemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlETFilemUcOallocatorlETFilemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlETFilemUcOallocatorlETFilemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<TString>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_listlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<TProof*,Bool_t>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlETProofmUcOboolgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::pair<TString,TString>,std::pair<TProof*,Bool_t> >",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEpairlETStringcOTStringgRcOpairlETProofmUcOboolgRcOlesslEpairlETStringcOTStringgRsPgRcOallocatorlEpairlEconstsPpairlETStringcOTStringgRcOpairlETProofmUcOboolgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<pair<TString,TString>,std::pair<TProof*,Bool_t> >",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEpairlETStringcOTStringgRcOpairlETProofmUcOboolgRcOlesslEpairlETStringcOTStringgRsPgRcOallocatorlEpairlEconstsPpairlETStringcOTStringgRcOpairlETProofmUcOboolgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<pair<TString,TString>,pair<TProof*,bool> >",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEpairlETStringcOTStringgRcOpairlETProofmUcOboolgRcOlesslEpairlETStringcOTStringgRsPgRcOallocatorlEpairlEconstsPpairlETStringcOTStringgRcOpairlETProofmUcOboolgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<pair<TString,TString>,pair<TProof*,bool>,less<pair<TString,TString> > >",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEpairlETStringcOTStringgRcOpairlETProofmUcOboolgRcOlesslEpairlETStringcOTStringgRsPgRcOallocatorlEpairlEconstsPpairlETStringcOTStringgRcOpairlETProofmUcOboolgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,Int_t>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,int>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,int,less<TString> >",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,TString>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOTStringcOlesslEintgRcOallocatorlEpairlEconstsPintcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TString>",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOTStringcOlesslEintgRcOallocatorlEpairlEconstsPintcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TString,less<int> >",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOTStringcOlesslEintgRcOallocatorlEpairlEconstsPintcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<int,vector<STree> >",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,std::vector<STree> >",117,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* SCycleConfig */
static void G__setup_memvarSCycleConfig(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleConfig));
   { SCycleConfig *p; p=(SCycleConfig*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleConfigcLcLRunMode),-1,-2,1,G__FastAllocString(4096).Format("LOCAL=%lldLL",(long long)SCycleConfig::LOCAL).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleConfigcLcLRunMode),-1,-2,1,G__FastAllocString(4096).Format("PROOF=%lldLL",(long long)SCycleConfig::PROOF).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TString),-1,-1,4,"m_cycleName=",0,"/< Name of the cycle holding this configuration");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleConfigcLcLRunMode),-1,-1,4,"m_mode=",0,"/< Running mode for the cycle");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TString),-1,-1,4,"m_server=",0,"/< Name of the PROOF server to use");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TString),-1,-1,4,"m_workdir=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nodes=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR),G__defined_typename("property_type"),-1,4,"m_properties=",0,"/< All the properties defined for the cycle");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR),G__defined_typename("id_type"),-1,4,"m_inputData=",0,"/< All SInputData objects defined for the cycle");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"m_targetLumi=",0,"/< Luminosity to scale all MC samples to");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TString),-1,-1,4,"m_outputDirectory=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TString),-1,-1,4,"m_postFix=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_SMsgType),-1,-1,4,"m_msgLevel=",0,"/< Message level to be used by the cycle");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"m_useTreeCache=",0,"/< Switch for turning on TTreeCache usage");
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"m_cacheSize=",0,"/< Size of the used TTreeCache in bytes");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_cacheLearnEntries=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"m_processOnlyLocal=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ISCycleBaseConfig */
static void G__setup_memvarISCycleBaseConfig(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseConfig));
   { ISCycleBaseConfig *p; p=(ISCycleBaseConfig*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ISCycleBaseHist */
static void G__setup_memvarISCycleBaseHist(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseHist));
   { ISCycleBaseHist *p; p=(ISCycleBaseHist*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SInputData */
static void G__setup_memvarSInputData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SInputData));
   { SInputData *p; p=(SInputData*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TString),-1,-1,4,"m_type=",0,"/< Type of the input data");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TString),-1,-1,4,"m_version=",0,"/< Version of the input data");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"m_totalLumiGiven=",0,"/< The total specified luminosity");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR),G__defined_typename("vector<SGeneratorCut>"),-1,4,"m_gencuts=",0,"/< The specified generator cuts");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR),G__defined_typename("vector<SFile>"),-1,4,"m_sfileIn=",0,"/< The specified input files");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,std::vector<STree> >"),-1,4,"m_trees=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR),G__defined_typename("vector<SDataSet>"),-1,4,"m_dataSets=",0,"/< The specified input PROOF datasets");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"m_totalLumiSum=",0,"/< The total luminosity from files/datasets");
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"m_eventsTotal=",0,"/< The total number of events in the input");
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"m_neventsmax=",0,"/< The maximum number of events to process");
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"m_neventsskip=",0,"/< The number of events to skip");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"m_cacheable=",0,"/< Flag showing whether to cache the ID info");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"m_skipValid=",0,"/< Flag showing whether to skip the ID validation");
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"m_entry=",0,"/< Current entry read from the input");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TDSet),-1,-1,4,"m_dset=",0,"! Transient dataset representation of input files");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_SLogger),-1,-1,4,"m_logger=",0,"! Transient logger object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ISCycleBaseNTuple */
static void G__setup_memvarISCycleBaseNTuple(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseNTuple));
   { ISCycleBaseNTuple *p; p=(ISCycleBaseNTuple*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SCycleBaseBase */
static void G__setup_memvarSCycleBaseBase(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseBase));
   { SCycleBaseBase *p; p=(SCycleBaseBase*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_SLogger),-1,-1,2,"m_logger=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SCycleBaseExec */
static void G__setup_memvarSCycleBaseExec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseExec));
   { SCycleBaseExec *p; p=(SCycleBaseExec*)0x1000; if (p) { }
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"m_nProcessedEvents=",0,(char*)NULL);
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"m_nSkippedEvents=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"m_firstInit=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TTree),-1,-1,4,"m_inputTree=",0,"/< TTree used to load all input trees");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_SInputData),-1,-1,4,"m_inputData=",0,"/< Pointer to the currently active ID");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlETTreemUcOallocatorlETTreemUgRsPgR),G__defined_typename("vector<TTree*>"),-1,4,"m_outputTrees=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ISCycleBase */
static void G__setup_memvarISCycleBase(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBase));
   { ISCycleBase *p; p=(ISCycleBase*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SCycleBaseNTuple */
static void G__setup_memvarSCycleBaseNTuple(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseNTuple));
   { SCycleBaseNTuple *p; p=(SCycleBaseNTuple*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlETTreemUcOallocatorlETTreemUgRsPgR),G__defined_typename("vector<TTree*>"),-1,4,"m_inputTrees=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlETBranchmUcOallocatorlETBranchmUgRsPgR),G__defined_typename("vector<TBranch*>"),-1,4,"m_inputBranches=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_listlETObjectmUcOallocatorlETObjectmUgRsPgR),G__defined_typename("list<TObject*>"),-1,4,"m_inputVarPointers=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TFile),-1,-1,4,"m_outputFile=",0,"/< Pointer to the active temporary output file");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlETTreemUcOallocatorlETTreemUgRsPgR),G__defined_typename("vector<TTree*>"),-1,4,"m_outputTrees=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlETTreemUcOallocatorlETTreemUgRsPgR),G__defined_typename("vector<TTree*>"),-1,4,"m_metaInputTrees=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlETTreemUcOallocatorlETTreemUgRsPgR),G__defined_typename("vector<TTree*>"),-1,4,"m_metaOutputTrees=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_listlEvoidmUcOallocatorlEvoidmUgRsPgR),G__defined_typename("list<void*>"),-1,4,"m_outputVarPointers=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TList),-1,-1,4,"m_input=",0,"/< Pointer to the input object list");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TList),-1,-1,4,"m_output=",0,"/< Pointer to the output object list");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SCycleBaseHist */
static void G__setup_memvarSCycleBaseHist(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseHist));
   { SCycleBaseHist *p; p=(SCycleBaseHist*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TList),-1,-1,4,"m_proofOutput=",0,"/< PROOF output list");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TDirectory),-1,-1,4,"m_inputFile=",0,"/< Currently open input file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SGeneratorCut */
static void G__setup_memvarSGeneratorCut(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SGeneratorCut));
   { SGeneratorCut *p; p=(SGeneratorCut*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TString),-1,-1,4,"m_tree=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TString),-1,-1,4,"m_formula=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SDataSet */
static void G__setup_memvarSDataSet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SDataSet));
   { SDataSet *p; p=(SDataSet*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->name)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TString),-1,-1,1,"name=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lumi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"lumi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->events)-(long)(p)),110,0,0,-1,G__defined_typename("Long64_t"),-1,1,"events=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SFile */
static void G__setup_memvarSFile(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SFile));
   { SFile *p; p=(SFile*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->file)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TString),-1,-1,1,"file=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lumi)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"lumi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->events)-(long)(p)),110,0,0,-1,G__defined_typename("Long64_t"),-1,1,"events=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* STree */
static void G__setup_memvarSTree(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_STree));
   { STree *p; p=(STree*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->treeName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TString),-1,-1,1,"treeName=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(4096).Format("INPUT_TREE=%lldLL",(long long)STree::INPUT_TREE).data(),0,"/< This is an input tree");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(4096).Format("OUTPUT_TREE=%lldLL",(long long)STree::OUTPUT_TREE).data(),0,"/< This is an output tree");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,1,G__FastAllocString(4096).Format("EVENT_TREE=%lldLL",(long long)STree::EVENT_TREE).data(),0,"/< This tree has one entry per event");
   G__memvar_setup((void*)((long)(&p->type)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"type=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<SGeneratorCut,allocator<SGeneratorCut> > */
static void G__setup_memvarvectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR));
   { vector<SGeneratorCut,allocator<SGeneratorCut> > *p; p=(vector<SGeneratorCut,allocator<SGeneratorCut> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<SFile,allocator<SFile> > */
static void G__setup_memvarvectorlESFilecOallocatorlESFilegRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR));
   { vector<SFile,allocator<SFile> > *p; p=(vector<SFile,allocator<SFile> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<STree,allocator<STree> > */
static void G__setup_memvarvectorlESTreecOallocatorlESTreegRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR));
   { vector<STree,allocator<STree> > *p; p=(vector<STree,allocator<STree> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > > */
static void G__setup_memvarmaplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR));
   { map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > > *p; p=(map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<int,vector<STree,allocator<STree> > > */
static void G__setup_memvarpairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR));
   { pair<int,vector<STree,allocator<STree> > > *p; p=(pair<int,vector<STree,allocator<STree> > >*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),105,0,0,-1,-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR),-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<SDataSet,allocator<SDataSet> > */
static void G__setup_memvarvectorlESDataSetcOallocatorlESDataSetgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR));
   { vector<SDataSet,allocator<SDataSet> > *p; p=(vector<SDataSet,allocator<SDataSet> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<string,string> */
static void G__setup_memvarpairlEstringcOstringgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEstringcOstringgR));
   { pair<string,string> *p; p=(pair<string,string>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_string),-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_string),-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<pair<string,string>,allocator<pair<string,string> > > */
static void G__setup_memvarvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR));
   { vector<pair<string,string>,allocator<pair<string,string> > > *p; p=(vector<pair<string,string>,allocator<pair<string,string> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<SInputData,allocator<SInputData> > */
static void G__setup_memvarvectorlESInputDatacOallocatorlESInputDatagRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR));
   { vector<SInputData,allocator<SInputData> > *p; p=(vector<SInputData,allocator<SInputData> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* SCycleBaseConfig */
static void G__setup_memvarSCycleBaseConfig(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseConfig));
   { SCycleBaseConfig *p; p=(SCycleBaseConfig*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleConfig),-1,-1,2,"m_config=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TList),-1,-1,4,"m_input=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SCycleBase */
static void G__setup_memvarSCycleBase(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBase));
   { SCycleBase *p; p=(SCycleBase*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SCycleOutput */
static void G__setup_memvarSCycleOutput(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleOutput));
   { SCycleOutput *p; p=(SCycleOutput*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TObject),-1,-1,4,"m_object=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TString),-1,-1,4,"m_path=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_SLogger),-1,-1,4,"m_logger=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SCycleStatistics */
static void G__setup_memvarSCycleStatistics(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleStatistics));
   { SCycleStatistics *p; p=(SCycleStatistics*)0x1000; if (p) { }
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"m_processedEvents=",0,"/< The number of processed events");
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"m_skippedEvents=",0,"/< The number of skipped events");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_SLogger),-1,-1,4,"m_logger=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SOutputFile */
static void G__setup_memvarSOutputFile(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SOutputFile));
   { SOutputFile *p; p=(SOutputFile*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TString),-1,-1,4,"m_fileName=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarSFrameCore_Dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncSCycleConfig(void) {
   /* SCycleConfig */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleConfig));
   G__memfunc_setup("SCycleConfig",1177,G__SFrameCore_Dict_203_0_1, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleConfig), -1, 0, 1, 1, 1, 0, "C - - 10 '\"SCycleConfig\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCycleName",1169,G__SFrameCore_Dict_203_0_2, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCycleName",1181,G__SFrameCore_Dict_203_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunMode",986,G__SFrameCore_Dict_203_0_4, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleConfigcLcLRunMode), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunMode",998,G__SFrameCore_Dict_203_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i 'SCycleConfig::RunMode' - 0 - mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProofServer",1437,G__SFrameCore_Dict_203_0_6, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProofServer",1449,G__SFrameCore_Dict_203_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - server", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProofNodes",1311,G__SFrameCore_Dict_203_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProofNodes",1323,G__SFrameCore_Dict_203_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nodes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProofWorkDir",1512,G__SFrameCore_Dict_203_0_10, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProofWorkDir",1524,G__SFrameCore_Dict_203_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - workdir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProperties",1357,G__SFrameCore_Dict_203_0_12, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR), G__defined_typename("SCycleConfig::property_type"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProperty",1169,G__SFrameCore_Dict_203_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - name u 'string' - 11 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInputData",1194,G__SFrameCore_Dict_203_0_14, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR), G__defined_typename("SCycleConfig::id_type"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddInputData",1171,G__SFrameCore_Dict_203_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SInputData' - 11 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTargetLumi",1322,G__SFrameCore_Dict_203_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - targetlumi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTargetLumi",1310,G__SFrameCore_Dict_203_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOutputDirectory",1906,G__SFrameCore_Dict_203_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - outDir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOutputDirectory",1894,G__SFrameCore_Dict_203_0_19, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPostFix",1017,G__SFrameCore_Dict_203_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - postFix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPostFix",1005,G__SFrameCore_Dict_203_0_21, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMsgLevel",1099,G__SFrameCore_Dict_203_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "i 'SMsgType' - 0 - level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMsgLevel",1087,G__SFrameCore_Dict_203_0_23, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_SMsgType), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUseTreeCache",1469,G__SFrameCore_Dict_203_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' status", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetUseTreeCache",1457,G__SFrameCore_Dict_203_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCacheSize",1179,G__SFrameCore_Dict_203_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCacheSize",1167,G__SFrameCore_Dict_203_0_27, 110, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCacheLearnEntries",1996,G__SFrameCore_Dict_203_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - entries", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCacheLearnEntries",1984,G__SFrameCore_Dict_203_0_29, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProcessOnlyLocal",1944,G__SFrameCore_Dict_203_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProcessOnlyLocal",1932,G__SFrameCore_Dict_203_0_31, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintConfig",1123,G__SFrameCore_Dict_203_0_32, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ArrangeInputData",1610,G__SFrameCore_Dict_203_0_33, 121, -1, -1, 0, 0, 1, 1, 32, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ValidateInput",1338,G__SFrameCore_Dict_203_0_34, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStringConfig",1517,G__SFrameCore_Dict_203_0_35, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_TString), -1, 0, 1, 1, 1, 8, "U 'SInputData' - 10 '0' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearConfig",1085,G__SFrameCore_Dict_203_0_36, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SFrameCore_Dict_203_0_37, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SCycleConfig::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFrameCore_Dict_203_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SCycleConfig::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFrameCore_Dict_203_0_39, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SCycleConfig::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFrameCore_Dict_203_0_40, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SCycleConfig::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFrameCore_Dict_203_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFrameCore_Dict_203_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SCycleConfig::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFrameCore_Dict_203_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SCycleConfig::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFrameCore_Dict_203_0_47, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SCycleConfig::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFrameCore_Dict_203_0_48, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SCycleConfig::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SCycleConfig", 1177, G__SFrameCore_Dict_203_0_49, (int) ('i'), G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleConfig), -1, 0, 1, 1, 1, 0, "u 'SCycleConfig' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SCycleConfig", 1303, G__SFrameCore_Dict_203_0_50, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFrameCore_Dict_203_0_51, (int) ('u'), G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleConfig), -1, 1, 1, 1, 1, 0, "u 'SCycleConfig' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncISCycleBaseConfig(void) {
   /* ISCycleBaseConfig */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseConfig));
   G__memfunc_setup("Initialize",1042,G__SFrameCore_Dict_204_0_1, 121, -1, -1, 0, 1, 1, 1, 32, "U 'TXMLNode' - 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetConfig",886,G__SFrameCore_Dict_204_0_2, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleConfig), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetConfig",886,G__SFrameCore_Dict_204_0_3, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleConfig), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetConfig",898,G__SFrameCore_Dict_204_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SCycleConfig' - 11 - config", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetConfigurationObjects",2370,G__SFrameCore_Dict_204_0_5, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_TList), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetConfInput",1218,G__SFrameCore_Dict_204_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TList' - 0 - input", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetConfInput",1206,G__SFrameCore_Dict_204_0_7, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   // automatic destructor
   G__memfunc_setup("~ISCycleBaseConfig", 1755, G__SFrameCore_Dict_204_0_8, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFrameCore_Dict_204_0_9, (int) ('u'), G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseConfig), -1, 1, 1, 1, 1, 0, "u 'ISCycleBaseConfig' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncISCycleBaseHist(void) {
   /* ISCycleBaseHist */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseHist));
   G__memfunc_setup("SetHistOutput",1365,G__SFrameCore_Dict_205_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TList' - 0 - output", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetHistOutput",1353,G__SFrameCore_Dict_205_0_2, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetHistInputFile",1620,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'TDirectory' - 0 - file", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetHistInputFile",1608,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TDirectory), -1, 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("WriteHistObjects",1645,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 3);
   // automatic destructor
   G__memfunc_setup("~ISCycleBaseHist", 1565, G__SFrameCore_Dict_205_0_6, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFrameCore_Dict_205_0_7, (int) ('u'), G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseHist), -1, 1, 1, 1, 1, 0, "u 'ISCycleBaseHist' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSInputData(void) {
   /* SInputData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SInputData));
   G__memfunc_setup("SInputData",989,G__SFrameCore_Dict_206_0_1, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_SInputData), -1, 0, 1, 1, 1, 0, "C - - 10 '\"SInputData\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetType",718,G__SFrameCore_Dict_206_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVersion",1042,G__SFrameCore_Dict_206_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTotalLumi",1223,G__SFrameCore_Dict_206_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - lumi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNEventsMax",1301,G__SFrameCore_Dict_206_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - nevents", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNEventsSkip",1414,G__SFrameCore_Dict_206_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - nevents", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCacheable",1172,G__SFrameCore_Dict_206_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCacheable",1160,G__SFrameCore_Dict_206_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSkipValid",1203,G__SFrameCore_Dict_206_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSkipValid",1191,G__SFrameCore_Dict_206_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventTreeEntry",1744,G__SFrameCore_Dict_206_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventTreeEntry",1732,G__SFrameCore_Dict_206_0_12, 110, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddGenCut",847,G__SFrameCore_Dict_206_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SGeneratorCut' - 11 - gencuts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSFileIn",915,G__SFrameCore_Dict_206_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SFile' - 11 - sfile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTree",665,G__SFrameCore_Dict_206_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - type u 'STree' - 11 - stree", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddDataSet",943,G__SFrameCore_Dict_206_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SDataSet' - 11 - dset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddEvents",894,G__SFrameCore_Dict_206_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - events", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ValidateInput",1338,G__SFrameCore_Dict_206_0_18, 121, -1, -1, 0, 1, 1, 1, 32, "C - - 10 '0' pserver", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetType",706,G__SFrameCore_Dict_206_0_19, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVersion",1030,G__SFrameCore_Dict_206_0_20, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSGeneratorCuts",1721,G__SFrameCore_Dict_206_0_21, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR), G__defined_typename("vector<SGeneratorCut>"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSFileIn",938,G__SFrameCore_Dict_206_0_22, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR), G__defined_typename("vector<SFile>"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSFileIn",938,G__SFrameCore_Dict_206_0_23, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR), G__defined_typename("vector<SFile>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrees",803,G__SFrameCore_Dict_206_0_24, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR), G__defined_typename("vector<STree>"), 0, 1, 1, 1, 9, "i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrees",803,G__SFrameCore_Dict_206_0_25, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR), G__defined_typename("map<Int_t,std::vector<STree> >"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataSets",1081,G__SFrameCore_Dict_206_0_26, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR), G__defined_typename("vector<SDataSet>"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasInputTrees",1327,G__SFrameCore_Dict_206_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDSet",656,G__SFrameCore_Dict_206_0_28, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TDSet), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTotalLumi",1211,G__SFrameCore_Dict_206_0_29, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetScaledLumi",1283,G__SFrameCore_Dict_206_0_30, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventsTotal",1433,G__SFrameCore_Dict_206_0_31, 110, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNEventsMax",1289,G__SFrameCore_Dict_206_0_32, 110, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNEventsSkip",1402,G__SFrameCore_Dict_206_0_33, 110, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__SFrameCore_Dict_206_0_34, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SInputData), -1, 1, 1, 1, 1, 0, "u 'SInputData' - 11 - parent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__SFrameCore_Dict_206_0_35, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'SInputData' - 11 - rh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__SFrameCore_Dict_206_0_36, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'SInputData' - 11 - rh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '0' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetStringConfig",1517,G__SFrameCore_Dict_206_0_38, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ValidateInputFiles",1837,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 32, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ValidateInputDataSets",2131,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 32, "C - - 10 - pserver", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LoadInfoOnFile",1353,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"U 'SFile' - 0 - file U 'TFileCollection' - 0 - filecoll", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AccessFileInfo",1374,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TFileInfo), -1, 0, 2, 1, 4, 0, 
"U 'SFile' - 0 - file U 'TFileCollection' - 0 - filecoll", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeDataSet",1060,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TDSet), -1, 0, 0, 1, 4, 40, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AccessDataSet",1272,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TDSet), -1, 0, 1, 1, 4, 8, "U 'TDirectory' - 0 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SFrameCore_Dict_206_0_45, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SInputData::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFrameCore_Dict_206_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SInputData::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFrameCore_Dict_206_0_47, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SInputData::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFrameCore_Dict_206_0_48, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SInputData::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFrameCore_Dict_206_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFrameCore_Dict_206_0_53, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SInputData::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFrameCore_Dict_206_0_54, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SInputData::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFrameCore_Dict_206_0_55, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SInputData::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFrameCore_Dict_206_0_56, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SInputData::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SInputData", 1115, G__SFrameCore_Dict_206_0_57, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncISCycleBaseNTuple(void) {
   /* ISCycleBaseNTuple */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseNTuple));
   G__memfunc_setup("SetNTupleOutput",1557,G__SFrameCore_Dict_207_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TList' - 0 - output", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetNTupleOutput",1545,G__SFrameCore_Dict_207_0_2, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetNTupleInput",1428,G__SFrameCore_Dict_207_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TList' - 0 - input", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetNTupleInput",1416,G__SFrameCore_Dict_207_0_4, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetOutputFile",1329,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TDirectory), -1, 0, 0, 1, 2, 32, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("CloseOutputFile",1543,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 32, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("CreateOutputTrees",1768,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 32, 
"u 'SInputData' - 11 - id u 'vector<TTree*,allocator<TTree*> >' 'vector<TTree*>' 1 - outTrees", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SaveOutputTrees",1571,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 32, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("LoadInputTrees",1427,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 32, 
"u 'SInputData' - 11 - id U 'TTree' - 0 - main_tree "
"U 'TDirectory' - 1 - inputFile", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetEvent",802,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 32, "n - 'Long64_t' 0 - entry", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("CalculateWeight",1526,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 2, 8, 
"u 'SInputData' - 11 - inputData n - 'Long64_t' 0 - entry", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("ClearCachedTrees",1570,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 3);
   // automatic destructor
   G__memfunc_setup("~ISCycleBaseNTuple", 1757, G__SFrameCore_Dict_207_0_13, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFrameCore_Dict_207_0_14, (int) ('u'), G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBaseNTuple), -1, 1, 1, 1, 1, 0, "u 'ISCycleBaseNTuple' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSCycleBaseBase(void) {
   /* SCycleBaseBase */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseBase));
   G__memfunc_setup("SCycleBaseBase",1337,G__SFrameCore_Dict_459_0_1, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseBase), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLogName",975,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("logger",640,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SLogger), -1, 1, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SFrameCore_Dict_459_0_4, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SCycleBaseBase::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFrameCore_Dict_459_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SCycleBaseBase::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFrameCore_Dict_459_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SCycleBaseBase::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFrameCore_Dict_459_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SCycleBaseBase::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__SFrameCore_Dict_459_0_8, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__SFrameCore_Dict_459_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__SFrameCore_Dict_459_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFrameCore_Dict_459_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFrameCore_Dict_459_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SCycleBaseBase::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFrameCore_Dict_459_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SCycleBaseBase::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFrameCore_Dict_459_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SCycleBaseBase::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFrameCore_Dict_459_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SCycleBaseBase::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SCycleBaseBase", 1463, G__SFrameCore_Dict_459_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSCycleBaseExec(void) {
   /* SCycleBaseExec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseExec));
   G__memfunc_setup("Begin",485,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SlaveBegin",992,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TTree' - 0 - main_tree", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Notify",633,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - entry", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SlaveTerminate",1444,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Terminate",937,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Version",742,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("BeginCycle",981,G__SFrameCore_Dict_460_0_10, 121, -1, -1, 0, 0, 1, 1, 32, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("EndCycle",775,G__SFrameCore_Dict_460_0_11, 121, -1, -1, 0, 0, 1, 1, 32, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("BeginInputData",1391,G__SFrameCore_Dict_460_0_12, 121, -1, -1, 0, 1, 1, 1, 32, "u 'SInputData' - 11 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("EndInputData",1185,G__SFrameCore_Dict_460_0_13, 121, -1, -1, 0, 1, 1, 1, 32, "u 'SInputData' - 11 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("BeginInputFile",1397,G__SFrameCore_Dict_460_0_14, 121, -1, -1, 0, 1, 1, 1, 32, "u 'SInputData' - 11 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("ExecuteEvent",1237,G__SFrameCore_Dict_460_0_15, 121, -1, -1, 0, 2, 1, 1, 32, 
"u 'SInputData' - 11 - - d - 'Double_t' 0 - weight", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("BeginMasterInputData",2011,G__SFrameCore_Dict_460_0_16, 121, -1, -1, 0, 1, 1, 1, 32, "u 'SInputData' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("EndMasterInputData",1805,G__SFrameCore_Dict_460_0_17, 121, -1, -1, 0, 1, 1, 1, 32, "u 'SInputData' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadConfig",978,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 32, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExecuteEvent",1237,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i - 'Int_t' 0 - event i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFrameCore_Dict_460_0_20, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SCycleBaseExec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFrameCore_Dict_460_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SCycleBaseExec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFrameCore_Dict_460_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SCycleBaseExec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFrameCore_Dict_460_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SCycleBaseExec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFrameCore_Dict_460_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFrameCore_Dict_460_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SCycleBaseExec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFrameCore_Dict_460_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SCycleBaseExec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFrameCore_Dict_460_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SCycleBaseExec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFrameCore_Dict_460_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SCycleBaseExec::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SCycleBaseExec", 1473, G__SFrameCore_Dict_460_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncISCycleBase(void) {
   /* ISCycleBase */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_ISCycleBase));
   G__memfunc_setup("Class",502,G__SFrameCore_Dict_461_0_1, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ISCycleBase::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFrameCore_Dict_461_0_2, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ISCycleBase::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFrameCore_Dict_461_0_3, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ISCycleBase::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFrameCore_Dict_461_0_4, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ISCycleBase::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFrameCore_Dict_461_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFrameCore_Dict_461_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ISCycleBase::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFrameCore_Dict_461_0_10, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ISCycleBase::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFrameCore_Dict_461_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ISCycleBase::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFrameCore_Dict_461_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ISCycleBase::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ISCycleBase", 1157, G__SFrameCore_Dict_461_0_13, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSCycleBaseNTuple(void) {
   /* SCycleBaseNTuple */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseNTuple));
   G__memfunc_setup("SetNTupleOutput",1557,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TList' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNTupleOutput",1545,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNTupleInput",1428,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TList' - 0 - input", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNTupleInput",1416,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMetadataTree",1489,G__SFrameCore_Dict_488_0_6, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TTree), -1, 0, 1, 1, 1, 40, "C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetInputMetadataTree",2017,G__SFrameCore_Dict_488_0_7, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TTree), -1, 0, 1, 1, 1, 40, "C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetOutputMetadataTree",2146,G__SFrameCore_Dict_488_0_8, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TTree), -1, 0, 1, 1, 1, 40, "C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetInputTree",1216,G__SFrameCore_Dict_488_0_9, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TTree), -1, 0, 1, 1, 1, 40, "C - - 10 - treeName", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetOutputTree",1345,G__SFrameCore_Dict_488_0_10, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TTree), -1, 0, 1, 1, 1, 40, "C - - 10 - treeName", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetOutputFile",1329,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TDirectory), -1, 0, 0, 1, 2, 32, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CloseOutputFile",1543,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 32, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CreateOutputTrees",1768,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 32, 
"u 'SInputData' - 11 - id u 'vector<TTree*,allocator<TTree*> >' 'vector<TTree*>' 1 - outTrees", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SaveOutputTrees",1571,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 32, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("LoadInputTrees",1427,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 32, 
"u 'SInputData' - 11 - id U 'TTree' - 0 - main_tree "
"U 'TDirectory' - 1 - inputFile", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEvent",802,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 32, "n - 'Long64_t' 0 - entry", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CalculateWeight",1526,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 2, 8, 
"u 'SInputData' - 11 - inputData n - 'Long64_t' 0 - entry", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ClearCachedTrees",1570,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RootType",838,(G__InterfaceMethod) NULL, 67, -1, -1, 0, 1, 3, 4, 33, "C - - 10 - typeid_type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TypeidType",1041,(G__InterfaceMethod) NULL, 67, -1, -1, 0, 1, 3, 4, 33, "C - - 10 - root_type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RegisterInputBranch",1955,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 32, "U 'TBranch' - 0 - br", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeleteInputVariables",2044,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeSubDirectory",1629,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TDirectory), -1, 0, 2, 1, 4, 40, 
"u 'TString' - 11 - path U 'TDirectory' - 0 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SFrameCore_Dict_488_0_24, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SCycleBaseNTuple::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFrameCore_Dict_488_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SCycleBaseNTuple::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFrameCore_Dict_488_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SCycleBaseNTuple::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFrameCore_Dict_488_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SCycleBaseNTuple::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFrameCore_Dict_488_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFrameCore_Dict_488_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SCycleBaseNTuple::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFrameCore_Dict_488_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SCycleBaseNTuple::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFrameCore_Dict_488_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SCycleBaseNTuple::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFrameCore_Dict_488_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SCycleBaseNTuple::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SCycleBaseNTuple", 1684, G__SFrameCore_Dict_488_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSCycleBaseHist(void) {
   /* SCycleBaseHist */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseHist));
   G__memfunc_setup("SetHistOutput",1365,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TList' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHistOutput",1353,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WriteObj",806,G__SFrameCore_Dict_498_0_4, 121, -1, -1, 0, 3, 1, 1, 32, 
"u 'TObject' - 11 - obj C - - 10 '0' directory "
"g - 'Bool_t' 0 'kFALSE' inFile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Hist",408,G__SFrameCore_Dict_498_0_5, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TH1), -1, 0, 2, 1, 1, 32, 
"C - - 10 - name C - - 10 '0' dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHistInputFile",1620,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'TDirectory' - 0 - file", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHistInputFile",1608,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TDirectory), -1, 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WriteHistObjects",1645,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTempDir",981,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TDirectory), -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SFrameCore_Dict_498_0_10, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SCycleBaseHist::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFrameCore_Dict_498_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SCycleBaseHist::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFrameCore_Dict_498_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SCycleBaseHist::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFrameCore_Dict_498_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SCycleBaseHist::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFrameCore_Dict_498_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFrameCore_Dict_498_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SCycleBaseHist::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFrameCore_Dict_498_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SCycleBaseHist::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFrameCore_Dict_498_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SCycleBaseHist::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFrameCore_Dict_498_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SCycleBaseHist::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SCycleBaseHist", 1492, G__SFrameCore_Dict_498_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSGeneratorCut(void) {
   /* SGeneratorCut */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SGeneratorCut));
   G__memfunc_setup("SGeneratorCut",1318,G__SFrameCore_Dict_552_0_1, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_SGeneratorCut), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 11 '\"\"' treename u 'TString' - 11 '\"\"' formula", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTreeName",1073,G__SFrameCore_Dict_552_0_2, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFormula",1014,G__SFrameCore_Dict_552_0_3, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__SFrameCore_Dict_552_0_4, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SGeneratorCut), -1, 1, 1, 1, 1, 0, "u 'SGeneratorCut' - 11 - parent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__SFrameCore_Dict_552_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'SGeneratorCut' - 11 - rh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__SFrameCore_Dict_552_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'SGeneratorCut' - 11 - rh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SFrameCore_Dict_552_0_7, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SGeneratorCut::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFrameCore_Dict_552_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SGeneratorCut::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFrameCore_Dict_552_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SGeneratorCut::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFrameCore_Dict_552_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SGeneratorCut::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFrameCore_Dict_552_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFrameCore_Dict_552_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SGeneratorCut::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFrameCore_Dict_552_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SGeneratorCut::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFrameCore_Dict_552_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SGeneratorCut::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFrameCore_Dict_552_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SGeneratorCut::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SGeneratorCut", 1318, G__SFrameCore_Dict_552_0_19, (int) ('i'), G__get_linked_tagnum(&G__SFrameCore_DictLN_SGeneratorCut), -1, 0, 1, 1, 1, 0, "u 'SGeneratorCut' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SGeneratorCut", 1444, G__SFrameCore_Dict_552_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSDataSet(void) {
   /* SDataSet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SDataSet));
   G__memfunc_setup("SDataSet",761,G__SFrameCore_Dict_556_0_1, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_SDataSet), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 11 '\"\"' n d - 'Double_t' 0 '1.0' l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__SFrameCore_Dict_556_0_2, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SDataSet), -1, 1, 1, 1, 1, 0, "u 'SDataSet' - 11 - parent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__SFrameCore_Dict_556_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'SDataSet' - 11 - rh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__SFrameCore_Dict_556_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'SDataSet' - 11 - rh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SFrameCore_Dict_556_0_5, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SDataSet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFrameCore_Dict_556_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SDataSet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFrameCore_Dict_556_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SDataSet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFrameCore_Dict_556_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SDataSet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFrameCore_Dict_556_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFrameCore_Dict_556_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SDataSet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFrameCore_Dict_556_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SDataSet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFrameCore_Dict_556_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SDataSet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFrameCore_Dict_556_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SDataSet::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SDataSet", 761, G__SFrameCore_Dict_556_0_17, (int) ('i'), G__get_linked_tagnum(&G__SFrameCore_DictLN_SDataSet), -1, 0, 1, 1, 1, 0, "u 'SDataSet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SDataSet", 887, G__SFrameCore_Dict_556_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSFile(void) {
   /* SFile */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SFile));
   G__memfunc_setup("SFile",467,G__SFrameCore_Dict_557_0_1, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_SFile), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SFile",467,G__SFrameCore_Dict_557_0_2, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_SFile), -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SFile",467,G__SFrameCore_Dict_557_0_3, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_SFile), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 11 - f d - 'Double_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__SFrameCore_Dict_557_0_4, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SFile), -1, 1, 1, 1, 1, 0, "u 'SFile' - 11 - parent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__SFrameCore_Dict_557_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'SFile' - 11 - rh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__SFrameCore_Dict_557_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'SFile' - 11 - rh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SFrameCore_Dict_557_0_7, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SFile::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFrameCore_Dict_557_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SFile::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFrameCore_Dict_557_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SFile::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFrameCore_Dict_557_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SFile::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFrameCore_Dict_557_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFrameCore_Dict_557_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SFile::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFrameCore_Dict_557_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SFile::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFrameCore_Dict_557_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SFile::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFrameCore_Dict_557_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SFile::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SFile", 467, G__SFrameCore_Dict_557_0_19, (int) ('i'), G__get_linked_tagnum(&G__SFrameCore_DictLN_SFile), -1, 0, 1, 1, 1, 0, "u 'SFile' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SFile", 593, G__SFrameCore_Dict_557_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSTree(void) {
   /* STree */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_STree));
   G__memfunc_setup("STree",483,G__SFrameCore_Dict_558_0_1, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_STree), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 11 '\"\"' name i - 'Int_t' 0 '0' typ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__SFrameCore_Dict_558_0_2, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_STree), -1, 1, 1, 1, 1, 0, "u 'STree' - 11 - parent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__SFrameCore_Dict_558_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'STree' - 11 - rh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__SFrameCore_Dict_558_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'STree' - 11 - rh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SFrameCore_Dict_558_0_5, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&STree::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFrameCore_Dict_558_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&STree::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFrameCore_Dict_558_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&STree::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFrameCore_Dict_558_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&STree::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFrameCore_Dict_558_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFrameCore_Dict_558_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&STree::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFrameCore_Dict_558_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&STree::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFrameCore_Dict_558_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&STree::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFrameCore_Dict_558_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&STree::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("STree", 483, G__SFrameCore_Dict_558_0_17, (int) ('i'), G__get_linked_tagnum(&G__SFrameCore_DictLN_STree), -1, 0, 1, 1, 1, 0, "u 'STree' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~STree", 609, G__SFrameCore_Dict_558_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR(void) {
   /* vector<SGeneratorCut,allocator<SGeneratorCut> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR));
   G__memfunc_setup("at",213,G__SFrameCore_Dict_560_0_1, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SGeneratorCut), G__defined_typename("vector<SGeneratorCut,allocator<SGeneratorCut> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<SGeneratorCut,allocator<SGeneratorCut> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__SFrameCore_Dict_560_0_2, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SGeneratorCut), G__defined_typename("vector<SGeneratorCut,allocator<SGeneratorCut> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<SGeneratorCut,allocator<SGeneratorCut> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__SFrameCore_Dict_560_0_3, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__SFrameCore_Dict_560_0_4, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__SFrameCore_Dict_560_0_5, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgRcLcLiteratorgR), G__defined_typename("vector<SGeneratorCut,allocator<SGeneratorCut> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__SFrameCore_Dict_560_0_6, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgRcLcLiteratorgR), G__defined_typename("vector<SGeneratorCut,allocator<SGeneratorCut> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__SFrameCore_Dict_560_0_7, 107, -1, G__defined_typename("vector<SGeneratorCut,allocator<SGeneratorCut> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__SFrameCore_Dict_560_0_8, 107, -1, G__defined_typename("vector<SGeneratorCut,allocator<SGeneratorCut> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__SFrameCore_Dict_560_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<SGeneratorCut,allocator<SGeneratorCut> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__SFrameCore_Dict_560_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<SGeneratorCut,allocator<SGeneratorCut> >::size_type' 0 - sz u 'SGeneratorCut' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__SFrameCore_Dict_560_0_11, 107, -1, G__defined_typename("vector<SGeneratorCut,allocator<SGeneratorCut> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__SFrameCore_Dict_560_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SFrameCore_Dict_560_0_13, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SGeneratorCut), G__defined_typename("vector<SGeneratorCut,allocator<SGeneratorCut> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<SGeneratorCut,allocator<SGeneratorCut> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SFrameCore_Dict_560_0_14, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SGeneratorCut), G__defined_typename("vector<SGeneratorCut,allocator<SGeneratorCut> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<SGeneratorCut,allocator<SGeneratorCut> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SGeneratorCut,allocator<SGeneratorCut> >",4576,G__SFrameCore_Dict_560_0_15, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SGeneratorCut,allocator<SGeneratorCut> >",4576,G__SFrameCore_Dict_560_0_16, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<SGeneratorCut,allocator<SGeneratorCut> >::size_type' 0 - n u 'SGeneratorCut' - 11 'SGeneratorCut()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SGeneratorCut,allocator<SGeneratorCut> >",4576,G__SFrameCore_Dict_560_0_17, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<SGeneratorCut,allocator<SGeneratorCut> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SGeneratorCut,allocator<SGeneratorCut> >",4576,G__SFrameCore_Dict_560_0_18, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<SGeneratorCut,allocator<SGeneratorCut> >::iterator' 'vector<SGeneratorCut,allocator<SGeneratorCut> >::const_iterator' 10 - first u 'vector<SGeneratorCut,allocator<SGeneratorCut> >::iterator' 'vector<SGeneratorCut,allocator<SGeneratorCut> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__SFrameCore_Dict_560_0_19, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<SGeneratorCut,allocator<SGeneratorCut> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__SFrameCore_Dict_560_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<SGeneratorCut,allocator<SGeneratorCut> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__SFrameCore_Dict_560_0_21, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SGeneratorCut), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__SFrameCore_Dict_560_0_22, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SGeneratorCut), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__SFrameCore_Dict_560_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SGeneratorCut' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__SFrameCore_Dict_560_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SGeneratorCut,allocator<SGeneratorCut> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFrameCore_Dict_560_0_25, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<SGeneratorCut,allocator<SGeneratorCut> >::iterator' - 0 - position u 'SGeneratorCut' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFrameCore_Dict_560_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<SGeneratorCut,allocator<SGeneratorCut> >::iterator' - 0 - position u 'vector<SGeneratorCut,allocator<SGeneratorCut> >::iterator' 'vector<SGeneratorCut,allocator<SGeneratorCut> >::const_iterator' 10 - first "
"u 'vector<SGeneratorCut,allocator<SGeneratorCut> >::iterator' 'vector<SGeneratorCut,allocator<SGeneratorCut> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFrameCore_Dict_560_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<SGeneratorCut,allocator<SGeneratorCut> >::iterator' - 0 - position k - 'vector<SGeneratorCut,allocator<SGeneratorCut> >::size_type' 0 - n "
"u 'SGeneratorCut' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__SFrameCore_Dict_560_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SFrameCore_Dict_560_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SGeneratorCut,allocator<SGeneratorCut> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SFrameCore_Dict_560_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<SGeneratorCut,allocator<SGeneratorCut> >::iterator' - 0 - first u 'vector<SGeneratorCut,allocator<SGeneratorCut> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__SFrameCore_Dict_560_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<SGeneratorCut,allocator<SGeneratorCut> >", 4702, G__SFrameCore_Dict_560_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlESFilecOallocatorlESFilegRsPgR(void) {
   /* vector<SFile,allocator<SFile> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR));
   G__memfunc_setup("at",213,G__SFrameCore_Dict_564_0_1, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SFile), G__defined_typename("vector<SFile,allocator<SFile> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<SFile,allocator<SFile> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__SFrameCore_Dict_564_0_2, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SFile), G__defined_typename("vector<SFile,allocator<SFile> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<SFile,allocator<SFile> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__SFrameCore_Dict_564_0_3, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__SFrameCore_Dict_564_0_4, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__SFrameCore_Dict_564_0_5, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESFilecOallocatorlESFilegRsPgRcLcLiteratorgR), G__defined_typename("vector<SFile,allocator<SFile> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__SFrameCore_Dict_564_0_6, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESFilecOallocatorlESFilegRsPgRcLcLiteratorgR), G__defined_typename("vector<SFile,allocator<SFile> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__SFrameCore_Dict_564_0_7, 107, -1, G__defined_typename("vector<SFile,allocator<SFile> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__SFrameCore_Dict_564_0_8, 107, -1, G__defined_typename("vector<SFile,allocator<SFile> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__SFrameCore_Dict_564_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<SFile,allocator<SFile> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__SFrameCore_Dict_564_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<SFile,allocator<SFile> >::size_type' 0 - sz u 'SFile' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__SFrameCore_Dict_564_0_11, 107, -1, G__defined_typename("vector<SFile,allocator<SFile> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__SFrameCore_Dict_564_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SFrameCore_Dict_564_0_13, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SFile), G__defined_typename("vector<SFile,allocator<SFile> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<SFile,allocator<SFile> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SFrameCore_Dict_564_0_14, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SFile), G__defined_typename("vector<SFile,allocator<SFile> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<SFile,allocator<SFile> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SFile,allocator<SFile> >",2874,G__SFrameCore_Dict_564_0_15, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SFile,allocator<SFile> >",2874,G__SFrameCore_Dict_564_0_16, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<SFile,allocator<SFile> >::size_type' 0 - n u 'SFile' - 11 'SFile()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SFile,allocator<SFile> >",2874,G__SFrameCore_Dict_564_0_17, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<SFile,allocator<SFile> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SFile,allocator<SFile> >",2874,G__SFrameCore_Dict_564_0_18, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<SFile,allocator<SFile> >::iterator' 'vector<SFile,allocator<SFile> >::const_iterator' 10 - first u 'vector<SFile,allocator<SFile> >::iterator' 'vector<SFile,allocator<SFile> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__SFrameCore_Dict_564_0_19, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<SFile,allocator<SFile> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__SFrameCore_Dict_564_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<SFile,allocator<SFile> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__SFrameCore_Dict_564_0_21, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SFile), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__SFrameCore_Dict_564_0_22, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SFile), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__SFrameCore_Dict_564_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SFile' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__SFrameCore_Dict_564_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SFile,allocator<SFile> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFrameCore_Dict_564_0_25, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<SFile,allocator<SFile> >::iterator' - 0 - position u 'SFile' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFrameCore_Dict_564_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<SFile,allocator<SFile> >::iterator' - 0 - position u 'vector<SFile,allocator<SFile> >::iterator' 'vector<SFile,allocator<SFile> >::const_iterator' 10 - first "
"u 'vector<SFile,allocator<SFile> >::iterator' 'vector<SFile,allocator<SFile> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFrameCore_Dict_564_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<SFile,allocator<SFile> >::iterator' - 0 - position k - 'vector<SFile,allocator<SFile> >::size_type' 0 - n "
"u 'SFile' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__SFrameCore_Dict_564_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SFrameCore_Dict_564_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SFile,allocator<SFile> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SFrameCore_Dict_564_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<SFile,allocator<SFile> >::iterator' - 0 - first u 'vector<SFile,allocator<SFile> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__SFrameCore_Dict_564_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<SFile,allocator<SFile> >", 3000, G__SFrameCore_Dict_564_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlESTreecOallocatorlESTreegRsPgR(void) {
   /* vector<STree,allocator<STree> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR));
   G__memfunc_setup("at",213,G__SFrameCore_Dict_568_0_1, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_STree), G__defined_typename("vector<STree,allocator<STree> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<STree,allocator<STree> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__SFrameCore_Dict_568_0_2, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_STree), G__defined_typename("vector<STree,allocator<STree> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<STree,allocator<STree> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__SFrameCore_Dict_568_0_3, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__SFrameCore_Dict_568_0_4, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__SFrameCore_Dict_568_0_5, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESTreecOallocatorlESTreegRsPgRcLcLiteratorgR), G__defined_typename("vector<STree,allocator<STree> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__SFrameCore_Dict_568_0_6, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESTreecOallocatorlESTreegRsPgRcLcLiteratorgR), G__defined_typename("vector<STree,allocator<STree> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__SFrameCore_Dict_568_0_7, 107, -1, G__defined_typename("vector<STree,allocator<STree> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__SFrameCore_Dict_568_0_8, 107, -1, G__defined_typename("vector<STree,allocator<STree> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__SFrameCore_Dict_568_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<STree,allocator<STree> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__SFrameCore_Dict_568_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<STree,allocator<STree> >::size_type' 0 - sz u 'STree' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__SFrameCore_Dict_568_0_11, 107, -1, G__defined_typename("vector<STree,allocator<STree> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__SFrameCore_Dict_568_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SFrameCore_Dict_568_0_13, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_STree), G__defined_typename("vector<STree,allocator<STree> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<STree,allocator<STree> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SFrameCore_Dict_568_0_14, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_STree), G__defined_typename("vector<STree,allocator<STree> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<STree,allocator<STree> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<STree,allocator<STree> >",2906,G__SFrameCore_Dict_568_0_15, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<STree,allocator<STree> >",2906,G__SFrameCore_Dict_568_0_16, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<STree,allocator<STree> >::size_type' 0 - n u 'STree' - 11 'STree()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<STree,allocator<STree> >",2906,G__SFrameCore_Dict_568_0_17, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<STree,allocator<STree> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<STree,allocator<STree> >",2906,G__SFrameCore_Dict_568_0_18, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<STree,allocator<STree> >::iterator' 'vector<STree,allocator<STree> >::const_iterator' 10 - first u 'vector<STree,allocator<STree> >::iterator' 'vector<STree,allocator<STree> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__SFrameCore_Dict_568_0_19, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<STree,allocator<STree> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__SFrameCore_Dict_568_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<STree,allocator<STree> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__SFrameCore_Dict_568_0_21, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_STree), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__SFrameCore_Dict_568_0_22, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_STree), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__SFrameCore_Dict_568_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'STree' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__SFrameCore_Dict_568_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<STree,allocator<STree> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFrameCore_Dict_568_0_25, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<STree,allocator<STree> >::iterator' - 0 - position u 'STree' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFrameCore_Dict_568_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<STree,allocator<STree> >::iterator' - 0 - position u 'vector<STree,allocator<STree> >::iterator' 'vector<STree,allocator<STree> >::const_iterator' 10 - first "
"u 'vector<STree,allocator<STree> >::iterator' 'vector<STree,allocator<STree> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFrameCore_Dict_568_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<STree,allocator<STree> >::iterator' - 0 - position k - 'vector<STree,allocator<STree> >::size_type' 0 - n "
"u 'STree' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__SFrameCore_Dict_568_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SFrameCore_Dict_568_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<STree,allocator<STree> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SFrameCore_Dict_568_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<STree,allocator<STree> >::iterator' - 0 - first u 'vector<STree,allocator<STree> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__SFrameCore_Dict_568_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<STree,allocator<STree> >", 3032, G__SFrameCore_Dict_568_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR(void) {
   /* map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR));
   G__memfunc_setup("map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >",10294,G__SFrameCore_Dict_573_0_1, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >",10294,G__SFrameCore_Dict_573_0_2, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator' - 0 - first u 'map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >",10294,G__SFrameCore_Dict_573_0_3, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::reverse_iterator' - 0 - first u 'map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >",10294,G__SFrameCore_Dict_573_0_4, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__SFrameCore_Dict_573_0_5, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__SFrameCore_Dict_573_0_6, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__SFrameCore_Dict_573_0_7, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__SFrameCore_Dict_573_0_8, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__SFrameCore_Dict_573_0_9, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__SFrameCore_Dict_573_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__SFrameCore_Dict_573_0_11, 107, -1, G__defined_typename("map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__SFrameCore_Dict_573_0_12, 107, -1, G__defined_typename("map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SFrameCore_Dict_573_0_13, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR), -1, 1, 1, 1, 1, 0, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFrameCore_Dict_573_0_14, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEmaplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<int,vector<STree,allocator<STree> > >' 'map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFrameCore_Dict_573_0_15, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator' - 0 - position u 'pair<int,vector<STree,allocator<STree> > >' 'map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFrameCore_Dict_573_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator' - 0 - first u 'map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFrameCore_Dict_573_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::reverse_iterator' - 0 - first u 'map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SFrameCore_Dict_573_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SFrameCore_Dict_573_0_19, 107, -1, G__defined_typename("map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::size_type"), 0, 1, 1, 1, 0, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SFrameCore_Dict_573_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator' - 0 - first u 'map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__SFrameCore_Dict_573_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__SFrameCore_Dict_573_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__SFrameCore_Dict_573_0_23, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__SFrameCore_Dict_573_0_24, 107, -1, G__defined_typename("map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::size_type"), 0, 1, 1, 1, 8, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__SFrameCore_Dict_573_0_25, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__SFrameCore_Dict_573_0_26, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >", 10420, G__SFrameCore_Dict_573_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR(void) {
   /* pair<int,vector<STree,allocator<STree> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR));
   G__memfunc_setup("pair<int,vector<STree,allocator<STree> > >",3863,G__SFrameCore_Dict_574_0_1, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<int,vector<STree,allocator<STree> > >",3863,G__SFrameCore_Dict_574_0_2, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"i - - 11 - a u 'vector<STree,allocator<STree> >' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR), -1, 1, 1, 1, 4, 0, "u 'pair<int,vector<STree,allocator<STree> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<int,vector<STree,allocator<STree> > >", 3863, G__SFrameCore_Dict_574_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'pair<int,vector<STree,allocator<STree> > >' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<int,vector<STree,allocator<STree> > >", 3989, G__SFrameCore_Dict_574_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlESDataSetcOallocatorlESDataSetgRsPgR(void) {
   /* vector<SDataSet,allocator<SDataSet> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR));
   G__memfunc_setup("at",213,G__SFrameCore_Dict_579_0_1, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SDataSet), G__defined_typename("vector<SDataSet,allocator<SDataSet> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<SDataSet,allocator<SDataSet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__SFrameCore_Dict_579_0_2, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SDataSet), G__defined_typename("vector<SDataSet,allocator<SDataSet> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<SDataSet,allocator<SDataSet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__SFrameCore_Dict_579_0_3, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__SFrameCore_Dict_579_0_4, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__SFrameCore_Dict_579_0_5, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESDataSetcOallocatorlESDataSetgRsPgRcLcLiteratorgR), G__defined_typename("vector<SDataSet,allocator<SDataSet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__SFrameCore_Dict_579_0_6, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESDataSetcOallocatorlESDataSetgRsPgRcLcLiteratorgR), G__defined_typename("vector<SDataSet,allocator<SDataSet> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__SFrameCore_Dict_579_0_7, 107, -1, G__defined_typename("vector<SDataSet,allocator<SDataSet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__SFrameCore_Dict_579_0_8, 107, -1, G__defined_typename("vector<SDataSet,allocator<SDataSet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__SFrameCore_Dict_579_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<SDataSet,allocator<SDataSet> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__SFrameCore_Dict_579_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<SDataSet,allocator<SDataSet> >::size_type' 0 - sz u 'SDataSet' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__SFrameCore_Dict_579_0_11, 107, -1, G__defined_typename("vector<SDataSet,allocator<SDataSet> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__SFrameCore_Dict_579_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SFrameCore_Dict_579_0_13, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SDataSet), G__defined_typename("vector<SDataSet,allocator<SDataSet> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<SDataSet,allocator<SDataSet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SFrameCore_Dict_579_0_14, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SDataSet), G__defined_typename("vector<SDataSet,allocator<SDataSet> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<SDataSet,allocator<SDataSet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SDataSet,allocator<SDataSet> >",3462,G__SFrameCore_Dict_579_0_15, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SDataSet,allocator<SDataSet> >",3462,G__SFrameCore_Dict_579_0_16, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<SDataSet,allocator<SDataSet> >::size_type' 0 - n u 'SDataSet' - 11 'SDataSet()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SDataSet,allocator<SDataSet> >",3462,G__SFrameCore_Dict_579_0_17, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<SDataSet,allocator<SDataSet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SDataSet,allocator<SDataSet> >",3462,G__SFrameCore_Dict_579_0_18, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<SDataSet,allocator<SDataSet> >::iterator' 'vector<SDataSet,allocator<SDataSet> >::const_iterator' 10 - first u 'vector<SDataSet,allocator<SDataSet> >::iterator' 'vector<SDataSet,allocator<SDataSet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__SFrameCore_Dict_579_0_19, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<SDataSet,allocator<SDataSet> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__SFrameCore_Dict_579_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<SDataSet,allocator<SDataSet> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__SFrameCore_Dict_579_0_21, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SDataSet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__SFrameCore_Dict_579_0_22, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SDataSet), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__SFrameCore_Dict_579_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SDataSet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__SFrameCore_Dict_579_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SDataSet,allocator<SDataSet> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFrameCore_Dict_579_0_25, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<SDataSet,allocator<SDataSet> >::iterator' - 0 - position u 'SDataSet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFrameCore_Dict_579_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<SDataSet,allocator<SDataSet> >::iterator' - 0 - position u 'vector<SDataSet,allocator<SDataSet> >::iterator' 'vector<SDataSet,allocator<SDataSet> >::const_iterator' 10 - first "
"u 'vector<SDataSet,allocator<SDataSet> >::iterator' 'vector<SDataSet,allocator<SDataSet> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFrameCore_Dict_579_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<SDataSet,allocator<SDataSet> >::iterator' - 0 - position k - 'vector<SDataSet,allocator<SDataSet> >::size_type' 0 - n "
"u 'SDataSet' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__SFrameCore_Dict_579_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SFrameCore_Dict_579_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SDataSet,allocator<SDataSet> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SFrameCore_Dict_579_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<SDataSet,allocator<SDataSet> >::iterator' - 0 - first u 'vector<SDataSet,allocator<SDataSet> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__SFrameCore_Dict_579_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<SDataSet,allocator<SDataSet> >", 3588, G__SFrameCore_Dict_579_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEstringcOstringgR(void) {
   /* pair<string,string> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEstringcOstringgR));
   G__memfunc_setup("pair<string,string>",1920,G__SFrameCore_Dict_583_0_1, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEstringcOstringgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<string,string>",1920,G__SFrameCore_Dict_583_0_2, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEstringcOstringgR), -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - a u 'string' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEstringcOstringgR), -1, 1, 1, 1, 4, 0, "u 'pair<string,string>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<string,string>", 1920, G__SFrameCore_Dict_583_0_4, (int) ('i'), G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEstringcOstringgR), -1, 0, 1, 1, 1, 0, "u 'pair<string,string>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<string,string>", 2046, G__SFrameCore_Dict_583_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR(void) {
   /* vector<pair<string,string>,allocator<pair<string,string> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR));
   G__memfunc_setup("at",213,G__SFrameCore_Dict_585_0_1, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEstringcOstringgR), G__defined_typename("vector<pair<string,string>,allocator<pair<string,string> > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<pair<string,string>,allocator<pair<string,string> > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__SFrameCore_Dict_585_0_2, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEstringcOstringgR), G__defined_typename("vector<pair<string,string>,allocator<pair<string,string> > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<pair<string,string>,allocator<pair<string,string> > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__SFrameCore_Dict_585_0_3, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__SFrameCore_Dict_585_0_4, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__SFrameCore_Dict_585_0_5, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<pair<string,string>,allocator<pair<string,string> > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__SFrameCore_Dict_585_0_6, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiteratorgR), G__defined_typename("vector<pair<string,string>,allocator<pair<string,string> > >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__SFrameCore_Dict_585_0_7, 107, -1, G__defined_typename("vector<pair<string,string>,allocator<pair<string,string> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__SFrameCore_Dict_585_0_8, 107, -1, G__defined_typename("vector<pair<string,string>,allocator<pair<string,string> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__SFrameCore_Dict_585_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<pair<string,string>,allocator<pair<string,string> > >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__SFrameCore_Dict_585_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<pair<string,string>,allocator<pair<string,string> > >::size_type' 0 - sz u 'pair<string,string>' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__SFrameCore_Dict_585_0_11, 107, -1, G__defined_typename("vector<pair<string,string>,allocator<pair<string,string> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__SFrameCore_Dict_585_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SFrameCore_Dict_585_0_13, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEstringcOstringgR), G__defined_typename("vector<pair<string,string>,allocator<pair<string,string> > >::reference"), 1, 1, 1, 1, 0, "k - 'vector<pair<string,string>,allocator<pair<string,string> > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SFrameCore_Dict_585_0_14, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEstringcOstringgR), G__defined_typename("vector<pair<string,string>,allocator<pair<string,string> > >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<pair<string,string>,allocator<pair<string,string> > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<pair<string,string>,allocator<pair<string,string> > >",5812,G__SFrameCore_Dict_585_0_15, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<pair<string,string>,allocator<pair<string,string> > >",5812,G__SFrameCore_Dict_585_0_16, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<pair<string,string>,allocator<pair<string,string> > >::size_type' 0 - n u 'pair<string,string>' - 11 '(pair<string,string>)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<pair<string,string>,allocator<pair<string,string> > >",5812,G__SFrameCore_Dict_585_0_17, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<pair<string,string>,allocator<pair<string,string> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<pair<string,string>,allocator<pair<string,string> > >",5812,G__SFrameCore_Dict_585_0_18, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<pair<string,string>,allocator<pair<string,string> > >::iterator' 'vector<pair<string,string>,allocator<pair<string,string> > >::const_iterator' 10 - first u 'vector<pair<string,string>,allocator<pair<string,string> > >::iterator' 'vector<pair<string,string>,allocator<pair<string,string> > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__SFrameCore_Dict_585_0_19, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<pair<string,string>,allocator<pair<string,string> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__SFrameCore_Dict_585_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<pair<string,string>,allocator<pair<string,string> > >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__SFrameCore_Dict_585_0_21, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEstringcOstringgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__SFrameCore_Dict_585_0_22, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_pairlEstringcOstringgR), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__SFrameCore_Dict_585_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'pair<string,string>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__SFrameCore_Dict_585_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<pair<string,string>,allocator<pair<string,string> > >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFrameCore_Dict_585_0_25, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<pair<string,string>,allocator<pair<string,string> > >::iterator' - 0 - position u 'pair<string,string>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFrameCore_Dict_585_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<pair<string,string>,allocator<pair<string,string> > >::iterator' - 0 - position u 'vector<pair<string,string>,allocator<pair<string,string> > >::iterator' 'vector<pair<string,string>,allocator<pair<string,string> > >::const_iterator' 10 - first "
"u 'vector<pair<string,string>,allocator<pair<string,string> > >::iterator' 'vector<pair<string,string>,allocator<pair<string,string> > >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFrameCore_Dict_585_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<pair<string,string>,allocator<pair<string,string> > >::iterator' - 0 - position k - 'vector<pair<string,string>,allocator<pair<string,string> > >::size_type' 0 - n "
"u 'pair<string,string>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__SFrameCore_Dict_585_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SFrameCore_Dict_585_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<pair<string,string>,allocator<pair<string,string> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SFrameCore_Dict_585_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<pair<string,string>,allocator<pair<string,string> > >::iterator' - 0 - first u 'vector<pair<string,string>,allocator<pair<string,string> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__SFrameCore_Dict_585_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<pair<string,string>,allocator<pair<string,string> > >", 5938, G__SFrameCore_Dict_585_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlESInputDatacOallocatorlESInputDatagRsPgR(void) {
   /* vector<SInputData,allocator<SInputData> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR));
   G__memfunc_setup("at",213,G__SFrameCore_Dict_589_0_1, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SInputData), G__defined_typename("vector<SInputData,allocator<SInputData> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<SInputData,allocator<SInputData> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__SFrameCore_Dict_589_0_2, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SInputData), G__defined_typename("vector<SInputData,allocator<SInputData> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<SInputData,allocator<SInputData> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__SFrameCore_Dict_589_0_3, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__SFrameCore_Dict_589_0_4, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__SFrameCore_Dict_589_0_5, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESInputDatacOallocatorlESInputDatagRsPgRcLcLiteratorgR), G__defined_typename("vector<SInputData,allocator<SInputData> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__SFrameCore_Dict_589_0_6, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESInputDatacOallocatorlESInputDatagRsPgRcLcLiteratorgR), G__defined_typename("vector<SInputData,allocator<SInputData> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__SFrameCore_Dict_589_0_7, 107, -1, G__defined_typename("vector<SInputData,allocator<SInputData> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__SFrameCore_Dict_589_0_8, 107, -1, G__defined_typename("vector<SInputData,allocator<SInputData> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__SFrameCore_Dict_589_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<SInputData,allocator<SInputData> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__SFrameCore_Dict_589_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<SInputData,allocator<SInputData> >::size_type' 0 - sz u 'SInputData' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__SFrameCore_Dict_589_0_11, 107, -1, G__defined_typename("vector<SInputData,allocator<SInputData> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__SFrameCore_Dict_589_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SFrameCore_Dict_589_0_13, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SInputData), G__defined_typename("vector<SInputData,allocator<SInputData> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<SInputData,allocator<SInputData> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__SFrameCore_Dict_589_0_14, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SInputData), G__defined_typename("vector<SInputData,allocator<SInputData> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<SInputData,allocator<SInputData> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SInputData,allocator<SInputData> >",3918,G__SFrameCore_Dict_589_0_15, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SInputData,allocator<SInputData> >",3918,G__SFrameCore_Dict_589_0_16, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<SInputData,allocator<SInputData> >::size_type' 0 - n u 'SInputData' - 11 'SInputData()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SInputData,allocator<SInputData> >",3918,G__SFrameCore_Dict_589_0_17, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<SInputData,allocator<SInputData> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<SInputData,allocator<SInputData> >",3918,G__SFrameCore_Dict_589_0_18, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<SInputData,allocator<SInputData> >::iterator' 'vector<SInputData,allocator<SInputData> >::const_iterator' 10 - first u 'vector<SInputData,allocator<SInputData> >::iterator' 'vector<SInputData,allocator<SInputData> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__SFrameCore_Dict_589_0_19, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<SInputData,allocator<SInputData> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__SFrameCore_Dict_589_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<SInputData,allocator<SInputData> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__SFrameCore_Dict_589_0_21, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SInputData), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__SFrameCore_Dict_589_0_22, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SInputData), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__SFrameCore_Dict_589_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'SInputData' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__SFrameCore_Dict_589_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SInputData,allocator<SInputData> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFrameCore_Dict_589_0_25, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<SInputData,allocator<SInputData> >::iterator' - 0 - position u 'SInputData' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFrameCore_Dict_589_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<SInputData,allocator<SInputData> >::iterator' - 0 - position u 'vector<SInputData,allocator<SInputData> >::iterator' 'vector<SInputData,allocator<SInputData> >::const_iterator' 10 - first "
"u 'vector<SInputData,allocator<SInputData> >::iterator' 'vector<SInputData,allocator<SInputData> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__SFrameCore_Dict_589_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<SInputData,allocator<SInputData> >::iterator' - 0 - position k - 'vector<SInputData,allocator<SInputData> >::size_type' 0 - n "
"u 'SInputData' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__SFrameCore_Dict_589_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SFrameCore_Dict_589_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<SInputData,allocator<SInputData> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__SFrameCore_Dict_589_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<SInputData,allocator<SInputData> >::iterator' - 0 - first u 'vector<SInputData,allocator<SInputData> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__SFrameCore_Dict_589_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<SInputData,allocator<SInputData> >", 4044, G__SFrameCore_Dict_589_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSCycleBaseConfig(void) {
   /* SCycleBaseConfig */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseConfig));
   G__memfunc_setup("SCycleBaseConfig",1556,G__SFrameCore_Dict_592_0_1, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBaseConfig), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 32, "U 'TXMLNode' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetConfig",886,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleConfig), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetConfig",886,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleConfig), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetConfig",898,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'SCycleConfig' - 11 - config", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetConfigurationObjects",2370,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__SFrameCore_DictLN_TList), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetConfInput",1218,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TList' - 0 - input", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetConfInput",1206,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DeclareProperty",1557,G__SFrameCore_Dict_592_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - name u 'string' - 1 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclareProperty",1557,G__SFrameCore_Dict_592_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - name i - - 1 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclareProperty",1557,G__SFrameCore_Dict_592_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - name d - - 1 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclareProperty",1557,G__SFrameCore_Dict_592_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - name g - - 1 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclareProperty",1557,G__SFrameCore_Dict_592_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - name u 'vector<string,allocator<string> >' 'vector<std::string>' 1 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclareProperty",1557,G__SFrameCore_Dict_592_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - name u 'vector<int,allocator<int> >' 'vector<int>' 1 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclareProperty",1557,G__SFrameCore_Dict_592_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - name u 'vector<double,allocator<double> >' 'vector<double>' 1 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclareProperty",1557,G__SFrameCore_Dict_592_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - name u 'vector<bool,allocator<bool> >' 'vector<bool>' 1 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddConfigObject",1462,G__SFrameCore_Dict_592_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - object", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetConfigObject",1485,G__SFrameCore_Dict_592_0_18, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TObject), -1, 0, 1, 1, 1, 8, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitializeInputData",1948,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_SInputData), -1, 0, 1, 1, 2, 32, "U 'TXMLNode' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InitializeUserConfig",2055,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 32, "U 'TXMLNode' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetProperty",1169,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 32, 
"u 'string' - 11 - name u 'string' - 11 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DecodeEnvVar",1174,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_string), -1, 0, 1, 1, 2, 8, "u 'string' - 11 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ToBool",591,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 1, 1, 4, 32, "u 'string' - 11 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SFrameCore_Dict_592_0_24, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SCycleBaseConfig::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFrameCore_Dict_592_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SCycleBaseConfig::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFrameCore_Dict_592_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SCycleBaseConfig::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFrameCore_Dict_592_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SCycleBaseConfig::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFrameCore_Dict_592_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFrameCore_Dict_592_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SCycleBaseConfig::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFrameCore_Dict_592_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SCycleBaseConfig::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFrameCore_Dict_592_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SCycleBaseConfig::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFrameCore_Dict_592_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SCycleBaseConfig::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SCycleBaseConfig", 1682, G__SFrameCore_Dict_592_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSCycleBase(void) {
   /* SCycleBase */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleBase));
   G__memfunc_setup("Class",502,G__SFrameCore_Dict_599_0_2, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SCycleBase::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFrameCore_Dict_599_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SCycleBase::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFrameCore_Dict_599_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SCycleBase::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFrameCore_Dict_599_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SCycleBase::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFrameCore_Dict_599_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFrameCore_Dict_599_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SCycleBase::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFrameCore_Dict_599_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SCycleBase::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFrameCore_Dict_599_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SCycleBase::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFrameCore_Dict_599_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SCycleBase::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SCycleBase", 1084, G__SFrameCore_Dict_599_0_14, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSCycleOutput(void) {
   /* SCycleOutput */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleOutput));
   G__memfunc_setup("SCycleOutput",1236,G__SFrameCore_Dict_610_0_1, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleOutput), -1, 0, 3, 1, 1, 0, 
"U 'TObject' - 0 '0' object C - - 10 '\"\"' name "
"C - - 10 '\"\"' path", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetObject",887,G__SFrameCore_Dict_610_0_2, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TObject), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetObject",899,G__SFrameCore_Dict_610_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - object", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPath",685,G__SFrameCore_Dict_610_0_4, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPath",697,G__SFrameCore_Dict_610_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - path", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFrameCore_Dict_610_0_6, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - list", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Write",523,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 8, 
"C - - 10 '0' name i - 'Int_t' 0 '0' option "
"i - 'Int_t' 0 '0' bufsize", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Write",523,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"C - - 10 '0' name i - 'Int_t' 0 '0' option "
"i - 'Int_t' 0 '0' bufsize", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeDirectory",1331,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TDirectory), -1, 0, 1, 1, 4, 40, "u 'TString' - 11 - path", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SFrameCore_Dict_610_0_10, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SCycleOutput::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFrameCore_Dict_610_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SCycleOutput::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFrameCore_Dict_610_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SCycleOutput::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFrameCore_Dict_610_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SCycleOutput::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFrameCore_Dict_610_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFrameCore_Dict_610_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SCycleOutput::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFrameCore_Dict_610_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SCycleOutput::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFrameCore_Dict_610_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SCycleOutput::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFrameCore_Dict_610_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SCycleOutput::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SCycleOutput", 1362, G__SFrameCore_Dict_610_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSCycleStatistics(void) {
   /* SCycleStatistics */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleStatistics));
   G__memfunc_setup("SCycleStatistics",1646,G__SFrameCore_Dict_611_0_1, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_SCycleStatistics), -1, 0, 3, 1, 1, 0, 
"C - - 10 '\"\"' name n - 'Long64_t' 0 '0' procEvents "
"n - 'Long64_t' 0 '0' skipEvents", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProcessedEvents",1853,G__SFrameCore_Dict_611_0_2, 110, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProcessedEvents",1865,G__SFrameCore_Dict_611_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - events", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSkippedEvents",1637,G__SFrameCore_Dict_611_0_4, 110, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSkippedEvents",1649,G__SFrameCore_Dict_611_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - events", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__SFrameCore_Dict_611_0_6, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - coll", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Write",523,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 8, 
"C - - 10 '0' name i - 'Int_t' 0 '0' option "
"i - 'Int_t' 0 '0' bufsize", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Write",523,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"C - - 10 '0' name i - 'Int_t' 0 '0' option "
"i - 'Int_t' 0 '0' bufsize", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SFrameCore_Dict_611_0_9, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SCycleStatistics::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFrameCore_Dict_611_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SCycleStatistics::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFrameCore_Dict_611_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SCycleStatistics::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFrameCore_Dict_611_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SCycleStatistics::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFrameCore_Dict_611_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFrameCore_Dict_611_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SCycleStatistics::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFrameCore_Dict_611_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SCycleStatistics::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFrameCore_Dict_611_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SCycleStatistics::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFrameCore_Dict_611_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SCycleStatistics::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SCycleStatistics", 1772, G__SFrameCore_Dict_611_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSOutputFile(void) {
   /* SOutputFile */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SFrameCore_DictLN_SOutputFile));
   G__memfunc_setup("SOutputFile",1124,G__SFrameCore_Dict_617_0_1, 105, G__get_linked_tagnum(&G__SFrameCore_DictLN_SOutputFile), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name u 'TString' - 11 - fileName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFileName",1069,G__SFrameCore_Dict_617_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - fileName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFileName",1057,G__SFrameCore_Dict_617_0_3, 117, G__get_linked_tagnum(&G__SFrameCore_DictLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SFrameCore_Dict_617_0_4, 85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SOutputFile::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SFrameCore_Dict_617_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SOutputFile::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SFrameCore_Dict_617_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SOutputFile::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SFrameCore_Dict_617_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SOutputFile::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SFrameCore_DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SFrameCore_Dict_617_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SFrameCore_Dict_617_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SOutputFile::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SFrameCore_Dict_617_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SOutputFile::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SFrameCore_Dict_617_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SOutputFile::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SFrameCore_Dict_617_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SOutputFile::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SOutputFile", 1124, G__SFrameCore_Dict_617_0_16, (int) ('i'), G__get_linked_tagnum(&G__SFrameCore_DictLN_SOutputFile), -1, 0, 1, 1, 1, 0, "u 'SOutputFile' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SOutputFile", 1250, G__SFrameCore_Dict_617_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SFrameCore_Dict_617_0_18, (int) ('u'), G__get_linked_tagnum(&G__SFrameCore_DictLN_SOutputFile), -1, 1, 1, 1, 1, 0, "u 'SOutputFile' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncSFrameCore_Dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalSFrameCore_Dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
}

static void G__cpp_setup_func29() {
}

static void G__cpp_setup_func30() {
}

static void G__cpp_setup_func31() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcSFrameCore_Dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
  G__cpp_setup_func30();
  G__cpp_setup_func31();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__SFrameCore_DictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_TDirectory = { "TDirectory" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_TCollection = { "TCollection" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_vectorlEboolcOallocatorlEboolgRsPgR = { "vector<bool,allocator<bool> >" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_TSelector = { "TSelector" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_TXMLNode = { "TXMLNode" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_SCycleConfig = { "SCycleConfig" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_ISCycleBaseConfig = { "ISCycleBaseConfig" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_ISCycleBaseHist = { "ISCycleBaseHist" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_SInputData = { "SInputData" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_ISCycleBaseNTuple = { "ISCycleBaseNTuple" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_vectorlETTreemUcOallocatorlETTreemUgRsPgR = { "vector<TTree*,allocator<TTree*> >" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_reverse_iteratorlEvectorlETTreemUcOallocatorlETTreemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TTree*,allocator<TTree*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_SMsgType = { "SMsgType" , 101 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_lesslEintgR = { "less<int>" , 115 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_maplESMsgTypecOstringcOlesslESMsgTypegRcOallocatorlEpairlEconstsPSMsgTypecOstringgRsPgRsPgR = { "map<SMsgType,string,less<SMsgType>,allocator<pair<const SMsgType,string> > >" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_SLogger = { "SLogger" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_SCycleBaseBase = { "SCycleBaseBase" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_SCycleBaseExec = { "SCycleBaseExec" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_ISCycleBase = { "ISCycleBase" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_listlEvoidmUcOallocatorlEvoidmUgRsPgR = { "list<void*,allocator<void*> >" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_TBranch = { "TBranch" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_SCycleBaseNTuple = { "SCycleBaseNTuple" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_vectorlETBranchmUcOallocatorlETBranchmUgRsPgR = { "vector<TBranch*,allocator<TBranch*> >" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_reverse_iteratorlEvectorlETBranchmUcOallocatorlETBranchmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TBranch*,allocator<TBranch*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_listlETObjectmUcOallocatorlETObjectmUgRsPgR = { "list<TObject*,allocator<TObject*> >" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_SCycleBaseHist = { "SCycleBaseHist" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_SGeneratorCut = { "SGeneratorCut" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_TFileCollection = { "TFileCollection" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_TFileInfo = { "TFileInfo" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_TDSet = { "TDSet" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_SDataSet = { "SDataSet" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_SFile = { "SFile" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_STree = { "STree" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR = { "vector<SGeneratorCut,allocator<SGeneratorCut> >" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgRcLcLiterator = { "vector<SGeneratorCut,allocator<SGeneratorCut> >::iterator" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_reverse_iteratorlEvectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SGeneratorCut,allocator<SGeneratorCut> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR = { "vector<SFile,allocator<SFile> >" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgRcLcLiterator = { "vector<SFile,allocator<SFile> >::iterator" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_reverse_iteratorlEvectorlESFilecOallocatorlESFilegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SFile,allocator<SFile> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR = { "vector<STree,allocator<STree> >" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgRcLcLiterator = { "vector<STree,allocator<STree> >::iterator" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_reverse_iteratorlEvectorlESTreecOallocatorlESTreegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<STree,allocator<STree> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_allocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgR = { "allocator<pair<const int,vector<STree,allocator<STree> > > >" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR = { "map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR = { "pair<int,vector<STree,allocator<STree> > >" , 115 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgRcLcLiterator = { "map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgRcLcLreverse_iterator = { "map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_pairlEmaplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR = { "vector<SDataSet,allocator<SDataSet> >" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgRcLcLiterator = { "vector<SDataSet,allocator<SDataSet> >::iterator" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_reverse_iteratorlEvectorlESDataSetcOallocatorlESDataSetgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SDataSet,allocator<SDataSet> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_SCycleConfigcLcLRunMode = { "SCycleConfig::RunMode" , 101 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_pairlEstringcOstringgR = { "pair<string,string>" , 115 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR = { "vector<pair<string,string>,allocator<pair<string,string> > >" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiterator = { "vector<pair<string,string>,allocator<pair<string,string> > >::iterator" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_reverse_iteratorlEvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<string,string>,allocator<pair<string,string> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR = { "vector<SInputData,allocator<SInputData> >" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgRcLcLiterator = { "vector<SInputData,allocator<SInputData> >::iterator" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_reverse_iteratorlEvectorlESInputDatacOallocatorlESInputDatagRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SInputData,allocator<SInputData> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_SCycleBaseConfig = { "SCycleBaseConfig" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_SCycleBase = { "SCycleBase" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_vectorlEISCycleBasemUcOallocatorlEISCycleBasemUgRsPgR = { "vector<ISCycleBase*,allocator<ISCycleBase*> >" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_reverse_iteratorlEvectorlEISCycleBasemUcOallocatorlEISCycleBasemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ISCycleBase*,allocator<ISCycleBase*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_SCycleOutput = { "SCycleOutput" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_SCycleStatistics = { "SCycleStatistics" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_vectorlETFilemUcOallocatorlETFilemUgRsPgR = { "vector<TFile*,allocator<TFile*> >" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_reverse_iteratorlEvectorlETFilemUcOallocatorlETFilemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TFile*,allocator<TFile*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_SOutputFile = { "SOutputFile" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_listlETStringcOallocatorlETStringgRsPgR = { "list<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_pairlETProofmUcOboolgR = { "pair<TProof*,bool>" , 115 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_maplEpairlETStringcOTStringgRcOpairlETProofmUcOboolgRcOlesslEpairlETStringcOTStringgRsPgRcOallocatorlEpairlEconstsPpairlETStringcOTStringgRcOpairlETProofmUcOboolgRsPgRsPgRsPgR = { "map<pair<TString,TString>,pair<TProof*,bool>,less<pair<TString,TString> >,allocator<pair<const pair<TString,TString>,pair<TProof*,bool> > > >" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR = { "map<TString,int,less<TString>,allocator<pair<const TString,int> > >" , 99 , -1 };
G__linked_taginfo G__SFrameCore_DictLN_maplEintcOTStringcOlesslEintgRcOallocatorlEpairlEconstsPintcOTStringgRsPgRsPgR = { "map<int,TString,less<int>,allocator<pair<const int,TString> > >" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableSFrameCore_Dict() {
  G__SFrameCore_DictLN_TClass.tagnum = -1 ;
  G__SFrameCore_DictLN_TBuffer.tagnum = -1 ;
  G__SFrameCore_DictLN_TDirectory.tagnum = -1 ;
  G__SFrameCore_DictLN_TMemberInspector.tagnum = -1 ;
  G__SFrameCore_DictLN_TObject.tagnum = -1 ;
  G__SFrameCore_DictLN_TNamed.tagnum = -1 ;
  G__SFrameCore_DictLN_TCollection.tagnum = -1 ;
  G__SFrameCore_DictLN_TString.tagnum = -1 ;
  G__SFrameCore_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__SFrameCore_DictLN_vectorlEboolcOallocatorlEboolgRsPgR.tagnum = -1 ;
  G__SFrameCore_DictLN_string.tagnum = -1 ;
  G__SFrameCore_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__SFrameCore_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SFrameCore_DictLN_TList.tagnum = -1 ;
  G__SFrameCore_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__SFrameCore_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SFrameCore_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__SFrameCore_DictLN_TTree.tagnum = -1 ;
  G__SFrameCore_DictLN_TSelector.tagnum = -1 ;
  G__SFrameCore_DictLN_TXMLNode.tagnum = -1 ;
  G__SFrameCore_DictLN_SCycleConfig.tagnum = -1 ;
  G__SFrameCore_DictLN_ISCycleBaseConfig.tagnum = -1 ;
  G__SFrameCore_DictLN_ISCycleBaseHist.tagnum = -1 ;
  G__SFrameCore_DictLN_SInputData.tagnum = -1 ;
  G__SFrameCore_DictLN_ISCycleBaseNTuple.tagnum = -1 ;
  G__SFrameCore_DictLN_vectorlETTreemUcOallocatorlETTreemUgRsPgR.tagnum = -1 ;
  G__SFrameCore_DictLN_reverse_iteratorlEvectorlETTreemUcOallocatorlETTreemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SFrameCore_DictLN_SMsgType.tagnum = -1 ;
  G__SFrameCore_DictLN_lesslEintgR.tagnum = -1 ;
  G__SFrameCore_DictLN_maplESMsgTypecOstringcOlesslESMsgTypegRcOallocatorlEpairlEconstsPSMsgTypecOstringgRsPgRsPgR.tagnum = -1 ;
  G__SFrameCore_DictLN_SLogger.tagnum = -1 ;
  G__SFrameCore_DictLN_SCycleBaseBase.tagnum = -1 ;
  G__SFrameCore_DictLN_SCycleBaseExec.tagnum = -1 ;
  G__SFrameCore_DictLN_ISCycleBase.tagnum = -1 ;
  G__SFrameCore_DictLN_listlEvoidmUcOallocatorlEvoidmUgRsPgR.tagnum = -1 ;
  G__SFrameCore_DictLN_TFile.tagnum = -1 ;
  G__SFrameCore_DictLN_TBranch.tagnum = -1 ;
  G__SFrameCore_DictLN_SCycleBaseNTuple.tagnum = -1 ;
  G__SFrameCore_DictLN_vectorlETBranchmUcOallocatorlETBranchmUgRsPgR.tagnum = -1 ;
  G__SFrameCore_DictLN_reverse_iteratorlEvectorlETBranchmUcOallocatorlETBranchmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SFrameCore_DictLN_listlETObjectmUcOallocatorlETObjectmUgRsPgR.tagnum = -1 ;
  G__SFrameCore_DictLN_TH1.tagnum = -1 ;
  G__SFrameCore_DictLN_SCycleBaseHist.tagnum = -1 ;
  G__SFrameCore_DictLN_SGeneratorCut.tagnum = -1 ;
  G__SFrameCore_DictLN_TFileCollection.tagnum = -1 ;
  G__SFrameCore_DictLN_TFileInfo.tagnum = -1 ;
  G__SFrameCore_DictLN_TDSet.tagnum = -1 ;
  G__SFrameCore_DictLN_SDataSet.tagnum = -1 ;
  G__SFrameCore_DictLN_SFile.tagnum = -1 ;
  G__SFrameCore_DictLN_STree.tagnum = -1 ;
  G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR.tagnum = -1 ;
  G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgRcLcLiterator.tagnum = -1 ;
  G__SFrameCore_DictLN_reverse_iteratorlEvectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR.tagnum = -1 ;
  G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgRcLcLiterator.tagnum = -1 ;
  G__SFrameCore_DictLN_reverse_iteratorlEvectorlESFilecOallocatorlESFilegRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR.tagnum = -1 ;
  G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgRcLcLiterator.tagnum = -1 ;
  G__SFrameCore_DictLN_reverse_iteratorlEvectorlESTreecOallocatorlESTreegRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SFrameCore_DictLN_allocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgR.tagnum = -1 ;
  G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__SFrameCore_DictLN_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR.tagnum = -1 ;
  G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__SFrameCore_DictLN_pairlEmaplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR.tagnum = -1 ;
  G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgRcLcLiterator.tagnum = -1 ;
  G__SFrameCore_DictLN_reverse_iteratorlEvectorlESDataSetcOallocatorlESDataSetgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SFrameCore_DictLN_SCycleConfigcLcLRunMode.tagnum = -1 ;
  G__SFrameCore_DictLN_pairlEstringcOstringgR.tagnum = -1 ;
  G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR.tagnum = -1 ;
  G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__SFrameCore_DictLN_reverse_iteratorlEvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR.tagnum = -1 ;
  G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgRcLcLiterator.tagnum = -1 ;
  G__SFrameCore_DictLN_reverse_iteratorlEvectorlESInputDatacOallocatorlESInputDatagRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SFrameCore_DictLN_SCycleBaseConfig.tagnum = -1 ;
  G__SFrameCore_DictLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__SFrameCore_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SFrameCore_DictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__SFrameCore_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SFrameCore_DictLN_SCycleBase.tagnum = -1 ;
  G__SFrameCore_DictLN_vectorlEISCycleBasemUcOallocatorlEISCycleBasemUgRsPgR.tagnum = -1 ;
  G__SFrameCore_DictLN_reverse_iteratorlEvectorlEISCycleBasemUcOallocatorlEISCycleBasemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SFrameCore_DictLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__SFrameCore_DictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SFrameCore_DictLN_SCycleOutput.tagnum = -1 ;
  G__SFrameCore_DictLN_SCycleStatistics.tagnum = -1 ;
  G__SFrameCore_DictLN_vectorlETFilemUcOallocatorlETFilemUgRsPgR.tagnum = -1 ;
  G__SFrameCore_DictLN_reverse_iteratorlEvectorlETFilemUcOallocatorlETFilemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SFrameCore_DictLN_SOutputFile.tagnum = -1 ;
  G__SFrameCore_DictLN_listlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__SFrameCore_DictLN_pairlETProofmUcOboolgR.tagnum = -1 ;
  G__SFrameCore_DictLN_maplEpairlETStringcOTStringgRcOpairlETProofmUcOboolgRcOlesslEpairlETStringcOTStringgRsPgRcOallocatorlEpairlEconstsPpairlETStringcOTStringgRcOpairlETProofmUcOboolgRsPgRsPgRsPgR.tagnum = -1 ;
  G__SFrameCore_DictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR.tagnum = -1 ;
  G__SFrameCore_DictLN_maplEintcOTStringcOlesslEintgRcOallocatorlEpairlEconstsPintcOTStringgRsPgRsPgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableSFrameCore_Dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_TClass);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_TDirectory);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_TObject);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_TCollection);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_TString);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_vectorlEboolcOallocatorlEboolgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_string);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_TList);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_TTree);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_TSelector);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_TXMLNode);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_SCycleConfig),sizeof(SCycleConfig),-1,323840,(char*)NULL,G__setup_memvarSCycleConfig,G__setup_memfuncSCycleConfig);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_ISCycleBaseConfig),sizeof(ISCycleBaseConfig),-1,263175,(char*)NULL,G__setup_memvarISCycleBaseConfig,G__setup_memfuncISCycleBaseConfig);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_ISCycleBaseHist),sizeof(ISCycleBaseHist),-1,263173,(char*)NULL,G__setup_memvarISCycleBaseHist,G__setup_memfuncISCycleBaseHist);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_SInputData),sizeof(SInputData),-1,326912,(char*)NULL,G__setup_memvarSInputData,G__setup_memfuncSInputData);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_ISCycleBaseNTuple),sizeof(ISCycleBaseNTuple),-1,263180,(char*)NULL,G__setup_memvarISCycleBaseNTuple,G__setup_memfuncISCycleBaseNTuple);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_vectorlETTreemUcOallocatorlETTreemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlETTreemUcOallocatorlETTreemUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_SMsgType);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_lesslEintgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_maplESMsgTypecOstringcOlesslESMsgTypegRcOallocatorlEpairlEconstsPSMsgTypecOstringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_SLogger);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_SCycleBaseBase),sizeof(SCycleBaseBase),-1,263424,(char*)NULL,G__setup_memvarSCycleBaseBase,G__setup_memfuncSCycleBaseBase);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_SCycleBaseExec),sizeof(SCycleBaseExec),-1,291102,(char*)NULL,G__setup_memvarSCycleBaseExec,G__setup_memfuncSCycleBaseExec);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_ISCycleBase),sizeof(ISCycleBase),-1,291863,(char*)NULL,G__setup_memvarISCycleBase,G__setup_memfuncISCycleBase);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_listlEvoidmUcOallocatorlEvoidmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_TFile);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_TBranch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_SCycleBaseNTuple),sizeof(SCycleBaseNTuple),-1,263431,(char*)NULL,G__setup_memvarSCycleBaseNTuple,G__setup_memfuncSCycleBaseNTuple);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_vectorlETBranchmUcOallocatorlETBranchmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlETBranchmUcOallocatorlETBranchmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_listlETObjectmUcOallocatorlETObjectmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_TH1);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_SCycleBaseHist),sizeof(SCycleBaseHist),-1,262412,(char*)NULL,G__setup_memvarSCycleBaseHist,G__setup_memfuncSCycleBaseHist);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_SGeneratorCut),sizeof(SGeneratorCut),-1,293120,(char*)NULL,G__setup_memvarSGeneratorCut,G__setup_memfuncSGeneratorCut);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_TFileCollection);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_TFileInfo);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_TDSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_SDataSet),sizeof(SDataSet),-1,293120,(char*)NULL,G__setup_memvarSDataSet,G__setup_memfuncSDataSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_SFile),sizeof(SFile),-1,325888,(char*)NULL,G__setup_memvarSFile,G__setup_memfuncSFile);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_STree),sizeof(STree),-1,293120,(char*)NULL,G__setup_memvarSTree,G__setup_memfuncSTree);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR),sizeof(vector<SGeneratorCut,allocator<SGeneratorCut> >),-1,298752,(char*)NULL,G__setup_memvarvectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR,G__setup_memfuncvectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_vectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESGeneratorCutcOallocatorlESGeneratorCutgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgR),sizeof(vector<SFile,allocator<SFile> >),-1,298752,(char*)NULL,G__setup_memvarvectorlESFilecOallocatorlESFilegRsPgR,G__setup_memfuncvectorlESFilecOallocatorlESFilegRsPgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_vectorlESFilecOallocatorlESFilegRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESFilecOallocatorlESFilegRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgR),sizeof(vector<STree,allocator<STree> >),-1,298752,(char*)NULL,G__setup_memvarvectorlESTreecOallocatorlESTreegRsPgR,G__setup_memfuncvectorlESTreecOallocatorlESTreegRsPgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_vectorlESTreecOallocatorlESTreegRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESTreecOallocatorlESTreegRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_allocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR),sizeof(map<int,vector<STree,allocator<STree> >,less<int>,allocator<pair<const int,vector<STree,allocator<STree> > > > >),-1,298752,(char*)NULL,G__setup_memvarmaplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR,G__setup_memfuncmaplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_pairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR),sizeof(pair<int,vector<STree,allocator<STree> > >),-1,297216,(char*)NULL,G__setup_memvarpairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR,G__setup_memfuncpairlEintcOvectorlESTreecOallocatorlESTreegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_maplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgRcLcLreverse_iterator);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_pairlEmaplEintcOvectorlESTreecOallocatorlESTreegRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlESTreecOallocatorlESTreegRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgR),sizeof(vector<SDataSet,allocator<SDataSet> >),-1,298752,(char*)NULL,G__setup_memvarvectorlESDataSetcOallocatorlESDataSetgRsPgR,G__setup_memfuncvectorlESDataSetcOallocatorlESDataSetgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_vectorlESDataSetcOallocatorlESDataSetgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESDataSetcOallocatorlESDataSetgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_SCycleConfigcLcLRunMode);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_pairlEstringcOstringgR),sizeof(pair<string,string>),-1,297216,(char*)NULL,G__setup_memvarpairlEstringcOstringgR,G__setup_memfuncpairlEstringcOstringgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR),sizeof(vector<pair<string,string>,allocator<pair<string,string> > >),-1,298752,(char*)NULL,G__setup_memvarvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR,G__setup_memfuncvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_vectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlEpairlEstringcOstringgRcOallocatorlEpairlEstringcOstringgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgR),sizeof(vector<SInputData,allocator<SInputData> >),-1,298752,(char*)NULL,G__setup_memvarvectorlESInputDatacOallocatorlESInputDatagRsPgR,G__setup_memfuncvectorlESInputDatacOallocatorlESInputDatagRsPgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_vectorlESInputDatacOallocatorlESInputDatagRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlESInputDatacOallocatorlESInputDatagRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_SCycleBaseConfig),sizeof(SCycleBaseConfig),-1,262400,(char*)NULL,G__setup_memvarSCycleBaseConfig,G__setup_memfuncSCycleBaseConfig);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_SCycleBase),sizeof(SCycleBase),-1,291078,(char*)NULL,G__setup_memvarSCycleBase,G__setup_memfuncSCycleBase);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_vectorlEISCycleBasemUcOallocatorlEISCycleBasemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlEISCycleBasemUcOallocatorlEISCycleBasemUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_SCycleOutput),sizeof(SCycleOutput),-1,324864,(char*)NULL,G__setup_memvarSCycleOutput,G__setup_memfuncSCycleOutput);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_SCycleStatistics),sizeof(SCycleStatistics),-1,323840,(char*)NULL,G__setup_memvarSCycleStatistics,G__setup_memfuncSCycleStatistics);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_vectorlETFilemUcOallocatorlETFilemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_reverse_iteratorlEvectorlETFilemUcOallocatorlETFilemUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_SOutputFile),sizeof(SOutputFile),-1,323584,(char*)NULL,G__setup_memvarSOutputFile,G__setup_memfuncSOutputFile);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_listlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_pairlETProofmUcOboolgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_maplEpairlETStringcOTStringgRcOpairlETProofmUcOboolgRcOlesslEpairlETStringcOTStringgRsPgRcOallocatorlEpairlEconstsPpairlETStringcOTStringgRcOpairlETProofmUcOboolgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__SFrameCore_DictLN_maplEintcOTStringcOlesslEintgRcOallocatorlEpairlEconstsPintcOTStringgRsPgRsPgR);
}
extern "C" void G__cpp_setupSFrameCore_Dict(void) {
  G__check_setup_version(30051515,"G__cpp_setupSFrameCore_Dict()");
  G__set_cpp_environmentSFrameCore_Dict();
  G__cpp_setup_tagtableSFrameCore_Dict();

  G__cpp_setup_inheritanceSFrameCore_Dict();

  G__cpp_setup_typetableSFrameCore_Dict();

  G__cpp_setup_memvarSFrameCore_Dict();

  G__cpp_setup_memfuncSFrameCore_Dict();
  G__cpp_setup_globalSFrameCore_Dict();
  G__cpp_setup_funcSFrameCore_Dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncSFrameCore_Dict();
  return;
}
class G__cpp_setup_initSFrameCore_Dict {
  public:
    G__cpp_setup_initSFrameCore_Dict() { G__add_setup_func("SFrameCore_Dict",(G__incsetup)(&G__cpp_setupSFrameCore_Dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initSFrameCore_Dict() { G__remove_setup_func("SFrameCore_Dict"); }
};
G__cpp_setup_initSFrameCore_Dict G__cpp_setup_initializerSFrameCore_Dict;

