////bin/dukhep_create_reader.py -n JetReader ../Macros/JetMacros.dat
#include "include/JetReader.h"
JetReader::JetReader(SCycleBaseNTuple * ownr, const char* collname): owner(ownr), cname(collname),
m_JetPt(0),
m_JetEta(0),
m_JetPhi(0),
m_JetE(0),
m_JetM(0),
m_JetWeightSV0(0),
m_JetIsBad(0),
m_JetBCH_CORR_JET(0),
m_JetBCH_CORR_CELL(0)
{std::cout << "JetReader: Collection name is " << cname << std::endl; }

std::string JetReader::VarName(const char * s){
  std::string tmp(s); 
  if (tmp.find("jet_")==0) {
 //   std::cout << "JetReader: replacing jet in " << tmp << std::endl;	
    return std::string(tmp.replace(0,3,cname)); 
  }
  return std::string(s);
};    

void JetReader::ConnectVariables(std::string treename){
  owner->ConnectVariable( treename.c_str(), VarName("jet_emscale_pt").c_str(), m_JetPt );
  owner->ConnectVariable( treename.c_str(), VarName("jet_emscale_eta").c_str(), m_JetEta );
  owner->ConnectVariable( treename.c_str(), VarName("jet_emscale_phi").c_str(), m_JetPhi );
  owner->ConnectVariable( treename.c_str(), VarName("jet_emscale_E").c_str(), m_JetE );
  owner->ConnectVariable( treename.c_str(), VarName("jet_emscale_m").c_str(), m_JetM );
/*  
  owner->ConnectVariable( treename.c_str(), VarName("jet_pt").c_str(), m_JetPt );
  owner->ConnectVariable( treename.c_str(), VarName("jet_eta").c_str(), m_JetEta );
  owner->ConnectVariable( treename.c_str(), VarName("jet_phi").c_str(), m_JetPhi );
  owner->ConnectVariable( treename.c_str(), VarName("jet_E").c_str(), m_JetE );
  owner->ConnectVariable( treename.c_str(), VarName("jet_m").c_str(), m_JetM );
*/
//owner->ConnectVariable( treename.c_str(), VarName("jet_flavor_weight_SV0").c_str(), m_JetWeightSV0 );
  //owner->ConnectVariable( treename.c_str(), VarName("jet_isUgly").c_str(), m_JetIsUgly );
//  owner->ConnectVariable( treename.c_str(), VarName("jet_isBadLoose").c_str(), m_JetIsBad );
  //owner->ConnectVariable( treename.c_str(), VarName("jet_BCH_CORR_JET").c_str(), m_JetBCH_CORR_JET );
  //owner->ConnectVariable( treename.c_str(), VarName("jet_BCH_CORR_CELL").c_str(), m_JetBCH_CORR_CELL);

}
void JetReader::DeclareVariables(){
  /*owner->DeclareVariable( o_m_JetPt, "jet_pt" );
  owner->DeclareVariable( o_m_JetEta, "jet_eta" );
  owner->DeclareVariable( o_m_JetPhi, "jet_phi" );
  owner->DeclareVariable( o_m_JetE, "jet_E" );
*/
}
void JetReader::Reset(){
/* 
o_m_JetPt.clear();
 o_m_JetEta.clear();
 o_m_JetPhi.clear();
 o_m_JetE.clear();
*/  
}
void JetReader::CopyToOutput(){
/* o_m_JetPt = std::vector<float>(*m_JetPt);
 o_m_JetEta = std::vector<float>(*m_JetEta);
 o_m_JetPhi = std::vector<float>(*m_JetPhi);
 o_m_JetE = std::vector<float>(*m_JetE);
*/
}
void JetReader::InitCalibTool(TString jetAlgo,TString JES_config_file,bool isdata)
{
myJES = new JetCalibrationTool(jetAlgo,JES_config_file, isdata);//
}
TLorentzVector JetReader::CorrectedJet(int jeti,bool isData,float npv,float mu)
{
/*       double Eraw    = m_jet_AntiKt4TopoEM_emscale_E->at(jeti);
       double eta_det = m_jet_AntiKt4TopoEM_emscale_eta->at(jeti);
       double eta     = m_jet_AntiKt4TopoEM_emscale_eta->at(jeti);
       double phi     = m_jet_AntiKt4TopoEM_emscale_phi->at(jeti);
       double m       = m_jet_AntiKt4TopoEM_emscale_m->at(jeti);
*/  
//std::cout<<"jet to be calibrated"<<std::endl;
       double Eraw    = m_JetE->at(jeti);
       double eta_det = m_JetEta->at(jeti);
       double eta     = m_JetEta->at(jeti);
       double phi     = m_JetPhi->at(jeti);
       double m     = m_JetM->at(jeti);
      // double m =0;
//std::cout<<"jet read to be calibrated"<<std::endl;
     TLorentzVector jet = myJES->ApplyOffsetEtaJES(Eraw,eta_det,eta,phi,m,mu,npv);
//std::cout<<"jet calibrated"<<std::endl;
return jet; 
}
bool JetReader::IsSelectedJet(int jeti,bool isData,float npv,float mu)
{
   TLorentzVector jet = CorrectedJet(jeti,isData,npv,mu);
   float jetE=jet.E();
   float jetPt=jet.Pt();
   float jetPhi=jet.Phi();
   float jetEta=jet.Eta();
   float rapidity=fabs(jet.Rapidity());
//std::cout<<"found good jet"<<std::endl;
if(jetPt<30000) return false;
if(rapidity>4.4) return false;
//JVF cut to be added
//std::cout<<"found good jet"<<std::endl;
return true;
}
