//dear emacs, this file is -*- c++ -*-
#ifdef DOSTANDARDCUTS
void IncrementCutFlow(bool externalcut, double w=1.) throw ( SError ) {
  if (externalcut) {
    if (icutflow < m_cutflow->size()) ( *m_cutflow )[ icutflow ]++;
    else m_logger << WARNING << "Resize your cut flow! " << SLogger::endmsg;
    if (!h_n || !h_p) 
      m_logger << WARNING << "make your cut flow histograms! " << SLogger::endmsg;
    else
      ((w < 0) ? h_n : h_p)->Fill(icutflow,w);
  }
  ++icutflow;
  return;
}

bool UseElectronTrack(unsigned int il) throw ( SError ) {
  return (m_ElectronMedium->at(il) || (m_ElectronTrackNPixelHits->at(il) + m_ElectronTrackNSCTHits->at(il) > 4));
}

float GetMuonTransverseMomentum(unsigned int il) throw ( SError ) {
  return m_MuonPt->at(il);
}

float GetElectronTransverseMomentum(unsigned int il, bool usetrack=false) throw ( SError ) {
  usetrack |= (m_ElectronMedium->at(il) || (m_ElectronTrackNPixelHits->at(il) + m_ElectronTrackNSCTHits->at(il) > 4));
  if (usetrack)  return m_ElectronClusterE->at(il)/TMath::CosH(m_ElectronTrackEta->at(il));
  return m_ElectronClusterPt->at(il);
}


void FillElectronFourMomentum(unsigned int il, TLorentzVector & v) throw ( SError ) {
  if (UseElectronTrack(il))
    v.SetPtEtaPhiE(m_ElectronClusterE->at(il)/TMath::CosH(m_ElectronTrackEta->at(il)),
		   m_ElectronTrackEta->at(il),m_ElectronTrackPhi->at(il),m_ElectronClusterE->at(il));
  else
    v.SetPtEtaPhiE(m_ElectronClusterPt->at(il),
                   m_ElectronClusterEta->at(il),m_ElectronClusterPhi->at(il),m_ElectronClusterE->at(il));  
}

void FillMuonFourMomentum(unsigned int il, TLorentzVector & v) throw ( SError ) {
  v.SetPtEtaPhiE(m_MuonPt->at(il), m_MuonEta->at(il), m_MuonPhi->at(il), m_MuonE->at(il));
}

double ElectronEta(unsigned int il) throw ( SError ) {
  bool usetrack = (m_ElectronMedium->at(il) || (m_ElectronTrackNPixelHits->at(il) + m_ElectronTrackNSCTHits->at(il) > 4));
  return (UseElectronTrack(il) ? m_ElectronTrackEta->at(il) : m_ElectronClusterEta->at(il));
}

double ElectronPhi(unsigned int il) throw ( SError ) {
  bool usetrack = (m_ElectronMedium->at(il) || (m_ElectronTrackNPixelHits->at(il) + m_ElectronTrackNSCTHits->at(il) > 4));
  return (UseElectronTrack(il) ? m_ElectronTrackPhi->at(il) : m_ElectronClusterPhi->at(il));
}

bool IsGoodMuon(unsigned int il, float etmin=20000) throw ( SError ) {
  if (m_MuonAuthor->at(il) != 12) return false;
  if (GetMuonTransverseMomentum(il) <= etmin) return false;
  float eta = TMath::Abs(m_MuonEta->at(il));
  if (eta >= 2.5) return false;
  if ( not ( !m_MuonExpectBLayerHit->at(il) || 0 != m_MuonBLayerHits->at(il) )) return false;
  if (m_MuonNumPixelHits->at(il) + m_MuonNumPixelDeadSensors->at(il) < 2) return false;
  if (m_MuonNumSCTHits->at(il) + m_MuonNumSCTDeadSensors->at(il) < 6) return false;
  if (m_MuonNumPixHoles->at(il) + m_MuonNumSCTHoles->at(il) > 1) return false;
  float n = m_MuonNumTRTHits->at(il) + m_MuonNumTRTOutliers->at(il);
  if (eta < 1.9) {
    if (not ((n > 5) && (m_MuonNumTRTOutliers->at(il)/n < 0.9))) return false;
  } else {
    if ((n > 5) && (m_MuonNumTRTOutliers->at(il)/n >= 0.9)) return false;
  }
  if (m_MuonIsoPtCone30->at(il) >= 4000 || m_MuonIsoEtCone30->at(il) >= 4000) return false;
  for (int jIdx = 0; jIdx < m_NumJets; jIdx++) {
    if ((m_JetPt->at(jIdx) < 20000) || (m_JetE->at(jIdx) < 0)) continue;
    if (deltaREtaPhi(m_MuonEta->at(il)- m_JetEta->at(jIdx), m_MuonPhi->at(il)- m_JetPhi->at(jIdx)) >= 0.4) return false;
  }
  return true;
}
  
bool IsGoodElectron(unsigned int il, float etmin=20000) throw ( SError ) {
  if (il >= m_ElectronAuthor->size()) return false;
  int author = m_ElectronAuthor->at(il);
  if ((author != 1) && (author != 3)) return false;
  float etc = GetElectronTransverseMomentum(il);
  if (etc < etmin) return false;
  float aeta = TMath::Abs(m_ElectronClusterEta->at(il)); 
  if ( aeta > 2.47 || ( (aeta > 1.37) && ( aeta < 1.52 )))  return false;
  if (not m_ElectronMedium->at(il)) return false; //check that this is robust
  if ((m_ElectronOQ->at(il)&1446)!=0) return false;//el_oq in d3pd for new rel
  if ( m_ElectronIsoCone20->at(il) > 0.15*etc ) return false; //ptcorrected
  if (not ElectronIsNotMuonTrack(il)) {  
    m_logger << INFO << "Muon veto failed an electron! " << SLogger::endmsg;
    return false;
  }
  //blayer and e over p 
  return true;
}

bool IsGoodTopElectron(unsigned int il, float etmin=25000) throw ( SError ) {
  if (not m_ElectronTight->at(il)) return false; 
  if (il > m_ElectronAuthor->size()) return false;
  int author = m_ElectronAuthor->at(il);
  if ((author != 1) && (author != 3)) return false;
  float etc = GetElectronTransverseMomentum(il);
  if (etc < etmin) return false;
  float aeta = TMath::Abs(m_ElectronClusterEta->at(il)); 
  if ( aeta > 2.47 || ( (aeta >= 1.37) && ( aeta <= 1.52 )))  return false;
  if ((m_ElectronOQ->at(il)&1446)!=0) return false;
  if ( m_ElectronIsoCone20->at(il) > 0.15*etc ) return false; //ptcorrected
  if (not (true or ElectronIsNotMuonTrack(il))) return false;  //cut not disabled
  return true;
}

int CountGoodTopElectrons(float etmin=25000) throw ( ) {
  int count=0;
  for (int i=0; i<m_NumElectrons; ++i) 
    if (IsGoodTopElectron(i, etmin)) ++count;
  return count;
}

int CountGoodMuons(float etmin=25000) throw ( ) {
  int count=0;
  for (int i=0; i<m_NumMuons; ++i) 
    if (IsGoodMuon(i, etmin)) ++count;
  return count;
}

bool IsMediumPlusPlus(unsigned int il) throw ( SError ) {
  if (il >= m_ElectronClusterEta->size()) return false;
  float eT=m_ElectronClusterE->at(il)/TMath::CosH(m_ElectronTrackEta->at(il));
  float rhad  = safeRatio(m_ElectronEtHad->at(il),eT);
  float rhad1 = safeRatio(m_ElectronEtHadOne->at(il),eT);
  float emax2 = m_ElectronEmax2->at(il);
  float emax  = m_ElectronEmaxS1->at(il);
  float demax = safeRatio(emax-emax2,emax+emax2);
  int ntrt = m_ElectronTrackNTRTHits->at(il);
  int ntrto = m_ElectronNTRTOutliers->at(il);
  return isMediumPlusPlus(m_ElectronClusterEta->at(il),
			  eT,
			  rhad, rhad1, 
			  m_ElectronREta->at(il),
			  m_ElectronWEta2->at(il), //is this right?
			  m_ElectronF1->at(il), 
			  m_ElectronWSTot->at(il),
			  demax, 
			  m_ElectronDeltaEta1->at(il),
			  m_ElectronTrackD0->at(il),
			  ((ntrt + ntrto) != 0) ? m_ElectronTRTHighTOutliersRatio->at(il) : 0,//fillerbug
			  ntrt, ntrto,
			  m_ElectronNSiHits->at(il),
			  m_ElectronTrackNPixelHits->at(il),
			  m_ElectronNPixelOutliers->at(il),			   
			  m_ElectronTrackNBLayerHits->at(il),
			  m_ElectronNBLayerOutliers->at(il),
			  m_ElectronExpectBLayerHit->at(il));
}

bool IsAntiElectron(unsigned int il, float etmin ) throw( SError ) {
  //orthogonal sample to good electrons.
  int author = m_ElectronAuthor->at(il);
  if ((author != 1) && (author != 3)) return false;
  float etc = GetElectronTransverseMomentum(il);
  if (etc < etmin) return false;
  float aeta = TMath::Abs(m_ElectronClusterEta->at(il)); 
  if ( aeta > 2.47 || ( (aeta > 1.37) && ( aeta < 1.52 )))  return false;
  if ( not m_ElectronMedium->at(il)) return false; //check that this is robust
  if ((m_ElectronOQ->at(il)&1446)!=0) return false;//el_oq in d3pd for new rel
  if ( m_ElectronIsoCone20->at(il) < 0.15*etc ) return false; //this is the inverted cut
  if (not ElectronIsNotMuonTrack(il)) return false;  
  return true;
}

bool ElectronIsNotMuonTrack(unsigned int il) throw ( SError ) {
  //this test uses exact equality to compare track parameters since blocks are filled by same tool.  
  if (il >  m_ElectronTrackQoverP->size()) return true; //no electron means no muon track, i guess...
  float etqop = m_ElectronTrackQoverP->at(il);//rather important to get type right.
  unsigned int imax = m_MuidMuonTrackQOverP->size();
  for (unsigned int im=0; im < imax; ++im) {
    if (etqop == m_MuidMuonTrackQOverP->at(im)) {
      if ((m_ElectronTrackPhi->at(il) == m_MuidMuonTrackPhi->at(im)) && 
	  (m_ElectronTrackTheta->at(il) == m_MuidMuonTrackTheta->at(im))) return false; //testing perigee is overkill probably
    }	   
  }
  return true;
}


bool ElectronMatchesTrigger(unsigned int il) throw ( SError ) {
  if (m_ElectronEFDistance->at(il) > 0.15)  return false; //http://cdsweb.cern.ch/record/1323877
  return true;  
}

bool MuonMatchesTrigger(unsigned int il) throw ( SError ) {
  //if (m_MuonEFDistance->at(il) > 0.15)  return false;
  return true;  
}

bool HasGoodVertex() throw ( SError ) {
  for (int i=0; i<m_NumPrimaryVertices; ++i) {
    if ((m_PrimaryVertexType->at(i) != 1) || (m_PrimaryVertexNumTracks->at(i) < 4) ) continue;
    return true;
  }
  return false;
}

#endif
