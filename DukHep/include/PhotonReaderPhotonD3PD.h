////bin/dukhep_create_reader.py PhotonMacro.dat -n PhotonReaderPhotonD3PD
#ifndef PHOTONREADERPHOTOND3PD
#define PHOTONREADERPHOTOND3PD 1
#include <vector>
#include <string>
#include "core/include/SCycleBaseNTuple.h"


class PhotonReaderPhotonD3PD {
  public:
    PhotonReaderPhotonD3PD(SCycleBaseNTuple * owner);
    virtual ~PhotonReaderPhotonD3PD(){};
    std::string VarName(const char * s) {return std::string(s);};
    void ConnectVariables(std::string treename);
    void DeclareVariables();
    void Reset();
    void CopyToOutput();

    //define your getters here
  public:
    SCycleBaseNTuple * owner;    
      Int_t m_Photonn;
  Int_t o_m_Photonn;
  std::vector<float>* m_PhotonE;
  std::vector<float> o_m_PhotonE;
  std::vector<float>* m_PhotonEt;
  std::vector<float> o_m_PhotonEt;
  std::vector<float>* m_Photonpt;
  std::vector<float> o_m_Photonpt;
  std::vector<float>* m_Photonm;
  std::vector<float> o_m_Photonm;
  std::vector<float>* m_Photoneta;
  std::vector<float> o_m_Photoneta;
  std::vector<float>* m_Photonphi;
  std::vector<float> o_m_Photonphi;
  std::vector<int>* m_Photonauthor;
  std::vector<int> o_m_Photonauthor;
  std::vector<int>* m_PhotonisRecovered;
  std::vector<int> o_m_PhotonisRecovered;
  std::vector<unsigned int>* m_PhotonisEM;
  std::vector<unsigned int> o_m_PhotonisEM;
  std::vector<unsigned int>* m_PhotonOQ;
  std::vector<unsigned int> o_m_PhotonOQ;
  std::vector<unsigned int>* m_PhotonOQRecalc;
  std::vector<unsigned int> o_m_PhotonOQRecalc;
  std::vector<int>* m_PhotonconvFlag;
  std::vector<int> o_m_PhotonconvFlag;
  std::vector<int>* m_PhotonisConv;
  std::vector<int> o_m_PhotonisConv;
  std::vector<int>* m_PhotonnConv;
  std::vector<int> o_m_PhotonnConv;
  std::vector<int>* m_PhotonnSingleTrackConv;
  std::vector<int> o_m_PhotonnSingleTrackConv;
  std::vector<int>* m_PhotonnDoubleTrackConv;
  std::vector<int> o_m_PhotonnDoubleTrackConv;
  std::vector<int>* m_Photontype;
  std::vector<int> o_m_Photontype;
  std::vector<float>* m_Photontruth_deltaRRecPhoton;
  std::vector<float> o_m_Photontruth_deltaRRecPhoton;
  std::vector<float>* m_Photontruth_E;
  std::vector<float> o_m_Photontruth_E;
  std::vector<float>* m_Photontruth_pt;
  std::vector<float> o_m_Photontruth_pt;
  std::vector<float>* m_Photontruth_eta;
  std::vector<float> o_m_Photontruth_eta;
  std::vector<float>* m_Photontruth_phi;
  std::vector<float> o_m_Photontruth_phi;
  std::vector<int>* m_Photontruth_type;
  std::vector<int> o_m_Photontruth_type;
  std::vector<int>* m_Photontruth_status;
  std::vector<int> o_m_Photontruth_status;
  std::vector<int>* m_Photontruth_barcode;
  std::vector<int> o_m_Photontruth_barcode;
  std::vector<int>* m_Photontruth_mothertype;
  std::vector<int> o_m_Photontruth_mothertype;
  std::vector<int>* m_Photontruth_motherbarcode;
  std::vector<int> o_m_Photontruth_motherbarcode;
  std::vector<int>* m_Photontruth_index;
  std::vector<int> o_m_Photontruth_index;
  std::vector<int>* m_Photonloose;
  std::vector<int> o_m_Photonloose;
  std::vector<int>* m_Photontight;
  std::vector<int> o_m_Photontight;
  std::vector<int>* m_PhotontightIso;
  std::vector<int> o_m_PhotontightIso;
  std::vector<int>* m_PhotongoodOQ;
  std::vector<int> o_m_PhotongoodOQ;
  std::vector<float>* m_PhotonEthad;
  std::vector<float> o_m_PhotonEthad;
  std::vector<float>* m_PhotonEthad1;
  std::vector<float> o_m_PhotonEthad1;
  std::vector<float>* m_PhotonE033;
  std::vector<float> o_m_PhotonE033;
  std::vector<float>* m_Photonf1;
  std::vector<float> o_m_Photonf1;
  std::vector<float>* m_Photonf1core;
  std::vector<float> o_m_Photonf1core;
  std::vector<float>* m_PhotonEmins1;
  std::vector<float> o_m_PhotonEmins1;
  std::vector<float>* m_Photonfside;
  std::vector<float> o_m_Photonfside;
  std::vector<float>* m_PhotonEmax2;
  std::vector<float> o_m_PhotonEmax2;
  std::vector<float>* m_Photonws3;
  std::vector<float> o_m_Photonws3;
  std::vector<float>* m_Photonwstot;
  std::vector<float> o_m_Photonwstot;
  std::vector<float>* m_Photonemaxs1;
  std::vector<float> o_m_Photonemaxs1;
  std::vector<float>* m_PhotondeltaEs;
  std::vector<float> o_m_PhotondeltaEs;
  std::vector<float>* m_PhotonE233;
  std::vector<float> o_m_PhotonE233;
  std::vector<float>* m_PhotonE237;
  std::vector<float> o_m_PhotonE237;
  std::vector<float>* m_PhotonE277;
  std::vector<float> o_m_PhotonE277;
  std::vector<float>* m_Photonweta2;
  std::vector<float> o_m_Photonweta2;
  std::vector<float>* m_Photonf3;
  std::vector<float> o_m_Photonf3;
  std::vector<float>* m_PhotonEtcone20;
  std::vector<float> o_m_PhotonEtcone20;
  std::vector<float>* m_Photonreta;
  std::vector<float> o_m_Photonreta;
  std::vector<float>* m_Photonrphi;
  std::vector<float> o_m_Photonrphi;
  std::vector<float>* m_Photoncl_E;
  std::vector<float> o_m_Photoncl_E;
  std::vector<float>* m_Photoncl_pt;
  std::vector<float> o_m_Photoncl_pt;
  std::vector<float>* m_Photoncl_eta;
  std::vector<float> o_m_Photoncl_eta;
  std::vector<float>* m_Photoncl_phi;
  std::vector<float> o_m_Photoncl_phi;
  std::vector<float>* m_PhotonEs0;
  std::vector<float> o_m_PhotonEs0;
  std::vector<float>* m_Photonetas0;
  std::vector<float> o_m_Photonetas0;
  std::vector<float>* m_Photonphis0;
  std::vector<float> o_m_Photonphis0;
  std::vector<float>* m_PhotonEs1;
  std::vector<float> o_m_PhotonEs1;
  std::vector<float>* m_Photonetas1;
  std::vector<float> o_m_Photonetas1;
  std::vector<float>* m_Photonphis1;
  std::vector<float> o_m_Photonphis1;
  std::vector<float>* m_PhotonEs2;
  std::vector<float> o_m_PhotonEs2;
  std::vector<float>* m_Photonetas2;
  std::vector<float> o_m_Photonetas2;
  std::vector<float>* m_Photonphis2;
  std::vector<float> o_m_Photonphis2;
  std::vector<float>* m_PhotonEs3;
  std::vector<float> o_m_PhotonEs3;
  std::vector<float>* m_Photonetas3;
  std::vector<float> o_m_Photonetas3;
  std::vector<float>* m_Photonphis3;
  std::vector<float> o_m_Photonphis3;
  std::vector<float>* m_Photontime;
  std::vector<float> o_m_Photontime;
  std::vector<int>* m_Photontruth_isBrem;
  std::vector<int> o_m_Photontruth_isBrem;
  std::vector<int>* m_Photontruth_isFromHardProc;
  std::vector<int> o_m_Photontruth_isFromHardProc;
};
 #endif
