// Local include(s):
// $Id: xAODtest.cxx 141731 2013-03-25 09:47:24Z mliu $
#include "../include/xAODtest.h"

ClassImp( xAODtest );

xAODtest::xAODtest()
  : DukHepFilter(), 
    m_cutflow( "cutflow", this ),
    icutflow(0), h_cutflow(0),
    //Macro initializing the stl vectors that access the tree 
    INIT_NULLS_CTOR,INIT_NULLS_CTOR_TRUTH
{
  //example job properties (sends data to your job via the xml file)
  DeclareProperty( "IgnoreGRL", m_prop_skipgrl );
  DeclareProperty( "FilterType", m_prop_filter );
  DeclareProperty( "Stream", m_prop_stream );
  DeclareProperty( "TriggerName", m_prop_triggername );
  SetLogName( GetName() );
}

xAODtest::~xAODtest() {
}

void xAODtest::BeginCycle() throw( SError ) {
  DukHepFilter::setupGRL();  
//  DukHepFilter::setupGRLOut(); 
  return;
}

void xAODtest::BeginInputData( const SInputData& ) throw( SError ) {
  //say something
  m_logger << DEBUG << "Hello from BeginInputData." << SLogger::endmsg;
  //macro of commands to set up the output tree (delete if you don't want an output tree)
  DECLARE("dummy")
    ;
  DECLARETRUTH("dummy")
    ;
  //do any needed initialization here.
  m_cutflow->resize(3,0); 
  h_cutflow = Book(TH1F("cf","Cut flow",3,-0.5,-2.5 ));  
  return;
}

void xAODtest::BeginInputFile( const SInputData& inputData ) throw( SError ) {
  int intype = STree::INPUT_TREE & STree::EVENT_TREE;
  bool isMC =false;
  if( ( inputData.GetType() == "MC" )) isMC=true; 
  if  (! inputData.GetTrees(intype) ) {
    m_logger << ERROR << "xAODtest needs an input tree!" << SLogger::endmsg; 
    throw SError( SError::SkipCycle );
  } else if  (inputData.GetTrees(intype)->size() != 1) {
    m_logger << ERROR << "xAODtest got too many (" << inputData.GetTrees(intype)->size() 
	     << ")input trees."  << SLogger::endmsg; 
    throw SError( SError::SkipCycle );    
  } else {
    TString treename(inputData.GetTrees(intype)->at(0).treeName);
    //macro of commands to read the input tree
    CONNECT( treename.Data() )   
      ;
    if(isMC) 
    CONNECTTRUTH( treename.Data() )   
      ;
    //You might want to read some special branches for this analysis.  You can add them via
    //ConnectVariable( treename.Data(), "branch_name", member_variable );
    //This example allows you to change the trigger via the xml file
    ConnectVariable( treename.Data(), m_prop_triggername.c_str(), m_LeptonTrigger  );
  }
  return;
}

///An example user function
void xAODtest::IncrementCutFlow() throw ( SError ) {
  if (icutflow < m_cutflow->size())
    ( *m_cutflow )[ icutflow ]++;
  else 
    m_logger << WARNING << "Resize your cut flow! " << SLogger::endmsg;
  h_cutflow->Fill(icutflow++);
}

///Main analysis function: this is executed for every entry in the tree.
void xAODtest::ExecuteEvent( const SInputData &inputData, Double_t ) throw( SError ) {
  icutflow=0;
  //macro of commands to clear the output tree vectors. (delete if you don't want an output tree)
  RESETVAR;
  bool isMC =false;
  if( ( inputData.GetType() == "MC" )) isMC=true; 

  if(isMC) RESETVARTRUTH;
 
  m_logger << VERBOSE << "/** event passed trigger cut   **/" << SLogger::endmsg;
  IncrementCutFlow();
  //macro of commands to copy variables to the output tree (delete if you don't want an output tree)
  COPYVAR
    ;  
  if(isMC) COPYVARTRUTH;

  return;
}

void xAODtest::EndMasterInputData( const SInputData& ) throw( SError ) {
  m_logger << INFO << "End of input data." << SLogger::endmsg;
  if ( m_cutflow->size() == 3 ) {
    m_logger << INFO << "(C0)  Number of input events:                " << ( *m_cutflow )[ 0 ] << SLogger::endmsg;
    m_logger << INFO << "(C1)  Number of events passing goodrun flag: " << ( *m_cutflow )[ 1 ] << SLogger::endmsg;
    m_logger << INFO << "(C2)  Number of events passing trigger:      " << ( *m_cutflow )[ 2 ] << SLogger::endmsg;
  } else {
    m_logger << WARNING << "It looks like your job didn't run." << SLogger::endmsg;
  }
   return;
}
