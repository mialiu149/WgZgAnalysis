// Dear emacs, this is -*- c++ -*-
// $Id$

#ifndef ZeegammaEventSelection_H
#define ZeegammaEventSelection_H

// SFrame/DukHep include(s):
#include "DukHep/include/DukHepFilter.h"
#include "DukHep/include/ElectronReader.h"
#include "DukHep/include/JetReader.h"
#include "DukHep/include/PhotonReader.h"
#include "DukHep/include/LArHole_v2_00.hpp"
#include "egammaAnalysisUtils/egammaSFclass.h"
#include "DukHep/include/AnalysisUtils.h"
#include "plug-ins/include/SSummedVar.h"
#include "PileupReweighting/TPileupReweighting.h"
#include "math.h"
// This line determines which branches are defined.
#define DUKHEPFILTER_TYPE DEF_FILTER
#include "WgZg2012Ana/include/MacrosForDukHepFilter_wggskim_mc.h"
//##include "MacrosForDukHepFilter_tiny_mc12_el.h"
//#include "WgZg2012Ana/include/MacroForZeeEventSelection.h"
#undef DUKHEPFILTER_TYPE
#define WGZG_TYPE WGCUTFLOW
#include "WgZg2012Ana/include/MacrosForWgZgCandidates.h"
#undef WGZG_TYPE 

/**
 *  @short ZeegammaEventSelection
 *  @author atarce
 * @version $Revision$
 */
class ZeegammaEventSelection : public DukHepFilter {

public:
  /// Default constructor
  ZeegammaEventSelection();
  /// Default destructor
  ~ZeegammaEventSelection();
  
  /// Function called at the beginning of the cycle
  virtual void BeginCycle() throw( SError );
  /// Function called at the end of the cycle
  virtual void EndCycle() throw( SError ) {};
  
  /// Function called at the beginning of a new input data
  virtual void BeginInputData( const SInputData& ) throw( SError );
  /// Function called after PROOF job ends (print cutflow here, or normalize histos, for example)
  virtual void EndMasterInputData  ( const SInputData& ) throw( SError );
  
  /// Function called after opening each new input file
  virtual void BeginInputFile( const SInputData& ) throw( SError );
  
  /// Function called for every event
  virtual void ExecuteEvent( const SInputData&, Double_t ) throw( SError );
  
  ///An example user function
  void IncrementCutFlow() throw ( SError );
  bool  OverlapRemovalFSR(bool isMC);    
  //bool  OverlapRemovalFSR(bool isMC) throw(SError);    

private:
  //Example of a variable that is summed over all nodes when running in PROOF mode.
  SSummedVar< std::vector<Int_t> > m_cutflow; //!
  SSummedVar< std::vector<int> > Ecounter;
  SSummedVar< std::vector<int> > Phcounter;

  //Example private variable
  unsigned int icutflow; //!

  //Example of a histogram pointer (not needed much in SFrame)
  TH1F * h_cutflow;
  TH1F * h_Ecutflow;
  TH1F * h_Phcutflow;
  ElectronReader er;
  PhotonReader phr;
  JetReader jr;
  Root::TPileupReweighting* m_pileupTool;

  //Example job property (set in the xml file)
  bool m_prop_skipgrl; //!
  std::string m_prop_triggername; //!
  std::string m_prop_phisoname; //!
  //Example of a branch read into a local member variable
  //defining list of cuts from xml file
  bool m_isBkgStudy;
  bool m_isZjets;
  bool m_LeptonTrigger; //!
  bool m_nPVCut;
  bool m_Trigger;
  double m_LeptonPt;
  bool m_LeptonCut;
  bool m_LeptonOSCut;
  double m_ZmassCut1;
  double m_ZmassCut2;
  double m_PhotonPt;
  bool m_PhotonIDCut;
  double m_dRLeptonGammaCut;
  double m_PhotonIsoValue; 
  std::vector<double>* m_PhotonIsolation; 

  // Macro adding lots of variables to access the tree
  DUKEHEPHEADER_MEMBERS  
  WGZGHEPHEADER_MEMBERS                          
  // Macro adding the functions for dictionary generation
  ClassDef( ZeegammaEventSelection, 0 );

}; // class ZeegammaEventSelection

#endif // ZeegammaEventSelection_H

